#!/usr/bin/env bash

source message_functions || exit 1

sql_file_or_select_statement=$1 && shift
database_name=$1 && shift
credentials=$1 && shift
from_file='true'

user=$( echo $credentials | sed 's/ /\n/g' | grep user= | cut -d"=" -f2 | sed 's/"//g' )
password=$( echo $credentials | sed 's/ /\n/g' | grep password= | cut -d"=" -f2  | sed 's/"//g' )
host=$( echo $credentials | sed 's/ /\n/g' | grep host= | cut -d"=" -f2 | sed 's/"//g' )
port=$( echo $credentials | sed 's/ /\n/g' | grep port= | cut -d"=" -f2 | sed 's/"//g' )



if [[ ! -f "${sql_file_or_select_statement}" ]]; then
    if [[ ! "${sql_file_or_select_statement}" =~ ^(SELECT|select) ]]; then
        error "Provided sql is not an existing file but no SELECT statement either (${sql_file_or_select_statement}). Exiting."
    else
        from_file='false'
    fi
fi

if [[ -z "${database_name}" ]]; then
    error "No database name provided. Exiting."
fi

if [[ "$credentials" == "" ]]; then
    error "No credentials available. Exiting."
fi

if [[ "${from_file}" == "true" ]]; then
    mysql --user=${user} --password=${password} --host=${host} --port=${port} --database="${database_name}"  \
    < "${sql_file_or_select_statement}"
else
    mysql --user=${user} --password=${password} --host=${host} --port=${port} --database="${database_name}" --execute="${sql_file_or_select_statement}" --batch
fi

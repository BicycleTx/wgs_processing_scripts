#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1
source lims_functions || exit 1

set=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")
bucket=$( echo $runs_json | jq -r '.[].bucket' )
pipeline_version=$( echo $runs_json | jq -r '.[].version' | cut -d"." -f1,2 )
sample=$( echo $runs_json | jq -r '.[].set.tumor_sample' )
barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${sample}'") | .barcode' | cut -d"_" -f1 )
ref_sample=$( echo $runs_json | jq -r '.[].set.ref_sample' )
ref_sample_barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${ref_sample}'") | .barcode' | cut -d"_" -f1 )

[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

set_url="gs://${bucket}/${set}"
outputDir="/data/report_LAMA"

echo ""
echo "--- A report will be created for ${sample} from run bucket gs://${bucket}/${set}/, pipeline version ${pipeline_version} ---"

if [[ $( ls ${outputDir} | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
        exit 1
fi

### Copy run data from bucket to local in vm
temp_folder_path=$( pwd )"/temp_cp_${set}"
mkdir $temp_folder_path
gsutil -m cp ${set_url}/pipeline.version $temp_folder_path/ &> $temp_folder_path/copy.log
gsutil -m cp ${set_url}/metadata.json $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/purple/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/linx/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/chord/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/cuppa/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/virusbreakend/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/virusintrprtr/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/peach/ $temp_folder_path/  &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/protect/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/rose/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/lilac/ $temp_folder_path/ &>> $temp_folder_path/copy.log

if [[ $( cat $temp_folder_path/copy.log | grep "CommandException:" | wc -l ) > 0 ]]; then
    warn "Making the copy gave errors (see below). Exiting."
    cat $temp_folder_path/copy.log
    rm -r $temp_folder_path/
    exit 1
fi
# create folder for report
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report
output_dir_data_report=${temp_folder_path}/new_report

### rerun of protect (if applicable)
echo '[INPUT] Do you want to rerun PROTECT (related to f.e. DOID error)? Please answer Y or N.'
read answer_protect
if [[ $answer_protect == 'Y' ]]; then
    run_protect_prod_for_diagnostic_LAMA ${set} ${barcode} ${sample} ${temp_folder_path}
fi
echo '[INPUT] Do you want to manually edit the PROTECT file? Please answer Y or N.'
read answer_edit_protect
if [[ $answer_edit_protect == 'Y' ]]; then
    vi $temp_folder_path/protect/${sample}.protect.tsv
fi

### doid check (specifally important when rerun of protect)
report_doid=$( cat /data/dbs/clinical_data/curated_primary_tumor_from_lama_preview.tsv | grep ${sample} | awk -F "\t" '{print $7}' | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//' )
protect_doid=$( cat ${temp_folder_path}/protect/run.log | grep -w "initial tumor doids" | awk -F '[' '{print $NF}' | head -c -3 | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//')
info "Checking primary tumor doid from protect vs that used in the report: " &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
if [[ ${protect_doid} == "" ]]; then
    warn "Checking primary tumor doid - the doid of protect ${protect_doid} is not known" &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
elif [[ ${protect_doid} == ${report_doid} ]]; then
    info "Checking primary tumor doid - the doid is equal of protect ${protect_doid} and report ${report_doid}" &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
else
    warn "Checking primary tumor doid - the doid is not equal of protect ${protect_doid} and report ${report_doid}" &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
fi


#### run patient reporter

#Normal report
do_patient_report_for_run_LAMA ${temp_folder_path} ${sample} ${barcode} ${ref_sample} ${ref_sample_barcode} \
  -output_dir_report ${output_dir_report} \
  -output_dir_data ${output_dir_data_report} "$@" &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log

#check whether a report has been made
if [[ $( ls ${temp_folder_path}/new_report/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
    info "$report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the patient reporter log:"
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
    rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi

#### check log file of making the report
if [[ $( cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN \|Exception in thread" | grep -v "has already been reported" |  wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log"
else
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep 'WARN ' | grep "has already been reported"
    info "No warnings/errors (except possibly already reported) in running the patient reporter. If you still want to inspect the log file you can run: cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/ and remove temporary run folder
gsutil -q cp -r ${temp_folder_path}/new_report/* ${outputDir}
#rm -r ${temp_folder_path}/ 2>&1
info "The report and the related log + json file can be found in /data_report_LAMA on ops-vm"
ls ${outputDir} | grep ${sample}
reportShared=$( ls ${outputDir} | grep ${sample} | grep ".pdf" )


### upload report to NC
upload_file_to_nc_for_viewing ${reportShared} &> /dev/null
info "reportShared is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"

echo ""

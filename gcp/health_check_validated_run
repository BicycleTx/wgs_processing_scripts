#!/usr/bin/env bash

source message_functions || exit 1

set=$1 && shift

inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"

[[ -n "${set}" ]] || die "No set provided to $(basename $0). Exiting"

#info "Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")

run_json=$(jq '.[-1]' <<< "${runs_json}")
bucket=$(jq -r '.bucket' <<< "${run_json}")
healthchecker_url="gs://${bucket}/${set}/healthchecker/"

healthchecker_success=$( gsutil ls ${healthchecker_url} | grep ".HealthCheckSucceeded" | wc -l );
healthchecker_fail=$( gsutil ls ${healthchecker_url} | grep ".HealthCheckFailed" | wc -l )

if [[ ${healthchecker_success} == 0 && ${healthchecker_fail} == 0 ]]; then
   warn "HealthChecker has not been run for ${set}"
elif [[ ${healthchecker_success} == 0 ]]; then
   warn "HealthChecker has failed for ${set}!!"
else
   info "HealthChecker has succeeded for ${set}"
fi


# Printing pipeline version just for double-checking!
pipeline_version_url="gs://${bucket}/${set}/pipeline.version"
pipeline_version=$(gsutil -u hmf-database cat "${pipeline_version_url}" | grep version)
info "This run has been done with pipeline ${pipeline_version}"


#!/usr/bin/env bash

source gcp_functions || exit 1
source message_functions || exit 1

gcp_url=''
download_path=''
exclude_crams=''
billing_project="hmf-database"
switch_to_hmf_ops="true"

if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo "---"
    echo " Description: Downloads a pipeline run."
    echo " Usage:"
    echo "   $(basename "$0") -u <gcp-url> -d <download-path>"
    echo "   $(basename "$0") -u gs://path/to/run -d /data/gcp/qc_fail_runs"
    echo "   $(basename "$0") -e -u gs://path/to/run -d /data/gcp/qc_fail_runs"
    echo "   $(basename "$0") -e -u gs://path/to/run -d <download-path> -p hmf-crunch -o"
    echo " Options:"
    echo "   -u  GCP url to download from"
    echo "   -d  Directory to download to"
    echo "   -e  Exclude any BAMs/CRAMs"
    echo "   -p  Set user project to be billed for the download. Default is hmf-database."
    echo "   -o  Do not switch to hmf-ops service account"
    echo "---"
    exit 1
fi

while getopts ":u:d:ep:o" opt; do
  case ${opt} in
    u)
      gcp_url=${OPTARG}
      ;;
    d)
      download_path=${OPTARG}
      ;;
    e)
      exclude_crams='true'
      ;;
    p)
      billing_project="${OPTARG}"
      ;;
    o)
      switch_to_hmf_ops="false"
      ;;
    \?)
      error "Invalid option: -${OPTARG}"
      ;;
    :)
      error "Option -${OPTARG} requires an argument."
      ;;
  esac
done

## sanity checks
[[ -n "${gcp_url}" ]] || die "No URL provided"
[[ -n "${download_path}" ]] || die "No download path provided"
[[ -d "${download_path}" ]] || die "Download path is not a directory (${download_path})"
[[ "${gcp_url}" =~ ^gs\: ]] || die "URL should start with 'gs' (${gcp_url})"

download_path=$(realpath "${download_path}")
set_name=$(basename "${gcp_url}")
dest_path="${download_path}/${set_name}/"

info "Creating directory ${dest_path}"
mkdir -p "${dest_path}"

if [[ "${switch_to_hmf_ops}" == "true" ]]; then
    info "Switching to service account"
    switch_to_hmf_ops_service_account
fi

info "Starting download of ${gcp_url} to ${download_path}"
if [[ "$exclude_crams" == "true" ]]; then
    gsutil -u "${billing_project}" -m rsync -r -x ".*\.bam$|.*\.cram$" "${gcp_url}" "${dest_path}"
else
    gsutil -u "${billing_project}" -m rsync -r "${gcp_url}" "${dest_path}"
fi

info "Finished downloading of ${gcp_url} to ${download_path}"

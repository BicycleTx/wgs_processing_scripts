#!/usr/bin/env bash

source message_functions || exit 1

vm_name=""

image_name=""
image_project="hmf-build"
image_family="hmf-vm"

zone="europe-west4-a"
machine_type="n1-standard-2"
disk_type="pd-ssd"
disk_size="200G"
network="projects/hmf-vpc-network/global/networks/vpc-network-prod-1"
subnet="projects/hmf-vpc-network/regions/europe-west4/subnetworks/vpc-network-subnet-research-prod-1"

preemptible="FALSE"
startup_script="NONE"
umbrella_scope="crunch"
cost_center="experiments"

print_usage() {
    script=$(basename "$0")
    echo ""
    echo "Descr: Creates a VM with appropriate defaults"
    echo "Usage: ${script} -n <vm-name> [options]"
    echo "Examp: ${script} -n ${USER}-make-vm-test"
    echo ""
    echo "Options:"
    echo "  -i image_name          Image name [default is most recent image of family]"
    echo "  -p image_project       Image project [${image_project}]"
    echo "  -f image_family        Image family [${image_family}]"
    echo "  -m machine_type        VM machine type [${machine_type}]"
    echo "  -s disk_size           VM boot disk size [${disk_size}]"
    echo "  -t disk_type           VM boot disk type [${disk_type}]"
    echo "  -e                     Make VM pre-emptible"
    echo "  -d startup_script      Startup script (as a file) [${startup_script}]"
    echo "  -u umbrella_scope      Can be 'crunch' or 'ops' and configures service account and VM project [${umbrella_scope}]"
    echo "  -c cost_center         Adjust if you want to track costs [${cost_center}]"
    echo ""
    echo "See also:"
    echo "  https://cloud.google.com/compute/docs/disks"
    echo "  https://cloud.google.com/compute/docs/machine-types"
    echo "  https://cloud.google.com/sdk/gcloud/reference/compute/instances/create"
    echo "  gcloud --project ${image_project} compute images list | grep ${image_family}"
    echo "  gcloud --project ${vm_project} compute compute instances list"
    echo ""
    echo "Commands:"
    echo "  gcloud compute instances delete --zone ${zone} --quiet {your-vm}"
    echo "  gcloud compute instances ssh {your-vm}"
    echo ""
    exit 1
}

while getopts ':n:u:p:f:i:m:s:t:ed:c:' flag; do
    case "${flag}" in
        n) vm_name=${OPTARG} ;;
        u) umbrella_scope=${OPTARG} ;;
        i) image_name=${OPTARG} ;;
        p) image_project=${OPTARG} ;;
        f) image_family=${OPTARG} ;;
        m) machine_type=${OPTARG} ;;
        s) disk_size=${OPTARG} ;;
        t) disk_type=${OPTARG} ;;
        e) preemptible="TRUE" ;;
        d) startup_script=${OPTARG} ;;
        c) cost_center=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done

if [[ -z "${vm_name}" || "$1" == "-h" || "$1" == "--help" ]]; then
    print_usage
fi

if [[ "${umbrella_scope}" == "crunch" ]]; then
    service_account="hmf-crunch@hmf-crunch.iam.gserviceaccount.com"
    vm_project="hmf-crunch"
elif [[ "${umbrella_scope}" == "ops" ]]; then
    service_account="hmf-ops@hmf-ops.iam.gserviceaccount.com"
    vm_project="hmf-ops"
else
    die "Unknown umbrella scope [${umbrella_scope}]"
fi

current_project=$(gcloud config get-value project) || die "Unable to get-value project"
if [[ ! "${current_project}" == "${vm_project}" ]]; then
    info "Current config wants to create VM in ${vm_project} but current project is ${current_project}"
    info "Switch to ${vm_project} (gcloud config set project ${vm_project}) and try again"
    exit 1
fi

info "Checking availability of VM name (${vm_name})"
gcloud compute instances describe "${vm_name}" > /dev/null 2>&1 && die "A VM with name ${vm_name} already exists. Exiting."

if [[ -z "${image_name}" ]]; then
    info "Searching for latest ${image_family} image"
    image_name=$(gcloud --project="${image_project}" compute images describe-from-family "${image_family}" | grep name | cut -d" " -f2) \
    || die "Unable to describe-from-family from project ${image_project}"
fi

info "Details of VM to be created:"
info "       VM: ${vm_name} @ ${current_project}"
info "    Image: ${image_name} @ ${image_project}"
info "   Config: ${machine_type}|${disk_size}|${disk_type}|${zone}|preemptible=${preemptible}"
info "  Account: ${service_account}"
info "   Script: ${startup_script}"

info "Press [ENTER] to create VM..."
read -r -s

if [[ "${preemptible}" == "TRUE" ]]; then
    preemptible_arg=" --preemptible"
else
    preemptible_arg=""
fi

if [[ "${startup_script}" != "NONE" ]]; then
    startup_script_arg=" --metadata-from-file=startup-script=${startup_script}"
else
    startup_script_arg=""
fi

info "Start creating VM instance ${vm_name}"
gcloud compute instances create "${vm_name}" \
--image "${image_name}" \
--image-project "${image_project}" \
--machine-type "${machine_type}" \
--boot-disk-type "${disk_type}" \
--boot-disk-size "${disk_size}" \
--scopes cloud-platform \
--no-restart-on-failure \
--zone "${zone}" \
--service-account "${service_account}" \
--network "${network}" \
--subnet "${subnet}" \
--no-address \
--metadata enable-oslogin=TRUE \
${preemptible_arg} \
${startup_script_arg} || die "Something wrong with VM creation. Check the gcloud response."

labels="user=$USER,cost_center=${cost_center}"
gcloud compute instances add-labels "${vm_name}" --zone="${zone}" --labels="${labels}"
gcloud compute disks add-labels "${vm_name}" --zone="${zone}" --labels="${labels}"

info "VM usage:"
info "  Access: gcloud compute ssh ${vm_name}"
info "  Delete: gcloud compute instances delete --zone ${zone} -q ${vm_name}"

info "Finished creating VM instance ${vm_name}"

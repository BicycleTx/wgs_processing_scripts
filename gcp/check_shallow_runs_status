#!/usr/bin/env bash

yymmdd=$(date +'%y%m%d')
archive_path="/data/data_archive/shallow_seq_pipelines"
qcfail_path="/data/gcp/qc_fail_runs"
process_path="/data/gcp/shallow_runs"

## query and store
echo "## ShallowSeq Check (${yymmdd})"
shallow_runs=$(hmf_api_get "runs?ini=ShallowSeq.ini")

echo "${shallow_runs}" | jq -rc '.[] | [.set.name,.status,.set.tumor_sample] | @tsv' | while read line; do
    run_name=$(echo "${line}" | cut -f1)
    run_status=$(echo "${line}" | cut -f2)
    tumor_sample=$(echo "${line}" | cut -f3)

    if [[ "${run_name}" =~ ShallowTest|cancerPanel|HMFregVAL ]]; then 
        continue
    elif [[ -d "${archive_path}/${run_name}" ]]; then 
        continue
    elif [[ -d "${qcfail_path}/${run_name}" ]]; then 
        echo "## DOWNLOADED: ${run_name} (status=${run_status}, location=${qcfail_path})"
    elif [[ -d "${process_path}/${run_name}" ]]; then 
        echo "## DOWNLOADED: ${run_name} (status=${run_status}, location=${process_path})"
    else
        if [[ "${run_status}" == "Deleted" ]]; then
            continue
        elif [[ "${run_status}" =~ Failed ]]; then
            sample_archive_count=$(find "${archive_path}" -mindepth 1 -maxdepth 1 -type d -name "*_${tumor_sample}" | wc -l)
            if [[ "${sample_archive_count}" -gt 0 ]]; then 
                continue
            else 
                echo "## FAILED: ${run_name} (status=${run_status})"
            fi
        elif [[ "${run_status}" =~ ^(Waiting)$ ]]; then
            echo "## WAITING: ${run_name} (status=${run_status})"
        elif [[ "${run_status}" =~ ^(Pending|Processing|Uploading|Downloading)$ ]]; then
            echo "## PROCESSING: ${run_name} (status=${run_status})"
        elif [[ "${run_status}" =~ ^(Finished|Validated)$ ]]; then
            echo " process_shallow_run ${run_name} # (status=${run_status})"
        else 
            echo "## UNKNOWN status for run: ${run_name} (status=${run_status})"
        fi
    fi
done | sort

job_file="${HOME}/jobs/${yymmdd}_process_shallow_runs"
log_file=$(echo "${job_file}" | sed 's/jobs/logs/')

write_job_cmd="$(basename $0) > ${job_file} && chmod +x ${job_file}"
execute_job_cmd="nohup ${job_file} > ${log_file} &"

echo "## ---"
echo "## Potential followup steps to process ready runs:"
echo "## Create job: ${write_job_cmd}"
echo "##    Run job: ${execute_job_cmd}"

if [[ -f "${job_file}" ]]; then
    echo "## WARNING: job file already exists (${job_file})"
fi


#!/usr/bin/env bash

source message_functions || exit 1

yymmdd=$(date +'%y%m%d')
qcfail_path="/data/gcp/qc_fail_runs"
process_path="/data/gcp/shallow_runs"
archive_path="/data/data_archive/shallow_seq_pipelines"
current_pipeline_version="5.22"

echo "===== Running $(basename "$0") ====="
info "Checking ShallowSeq runs (v${current_pipeline_version} and higher)"

# Waiting runs have no version in API so retrieve in second query
all_runs=$(hmf_api_get "runs?ini=ShallowSeq.ini&min_version=${current_pipeline_version}") || die "Unable to get Shallow runs from API"
waiting_runs=$(hmf_api_get "runs?ini=ShallowSeq.ini&status=Waiting") || die "Unable to get Waiting Shallow runs from API"

to_mention=() # gets comment msg appended
to_process=() # gets actual processing commands appended

# Process Waiting runs
while read -r line; do
    run_name=$(echo "${line}" | cut -f1)
    run_status=$(echo "${line}" | cut -f2)
    run_version=$(echo "${line}" | cut -f3)
    run_info="status=${run_status}|version=${run_version}"
    to_mention+=("  WAITING: ${run_name} (${run_info})")
done < <(echo "${waiting_runs}" | jq -rc '.[] | [.set.name,.status,.version] | @tsv')

# Process ShallowSeq runs from current pipeline version
while read -r line; do
    run_name=$(echo "${line}" | cut -f1)
    run_status=$(echo "${line}" | cut -f2)
    run_version=$(echo "${line}" | cut -f3)

    reported=$(find "${archive_path}" -mindepth 1 -maxdepth 1 -type d -name "${run_name}" | wc -l)
    run_info="status=${run_status}|version=${run_version}"

    if [[ "${reported}" -gt 0 ]]; then
        continue
    elif [[ "${run_name}" =~ ShallowTest|cancerPanel|HMFregVAL ]]; then
        continue
    elif [[ "${run_status}" == "Deleted" ]]; then
        continue
    elif [[ -d "${qcfail_path}/${run_name}" ]]; then
        to_mention+=("  DOWNLOADED: ${run_name} found in ${qcfail_path}")
    elif [[ -d "${process_path}/${run_name}" ]]; then
        to_mention+=("  DOWNLOADED: ${run_name} found in ${process_path}")
    elif [[ "${run_status}" == "Waiting" ]]; then
        to_mention+=("  WAITING: ${run_name} (${run_info})")
    elif [[ "${run_status}" =~ ^(Pending|Processing|Uploading|Downloading)$ ]]; then
        to_mention+=("  PROCESSING: ${run_name} (${run_info})")
    elif [[ "${run_status}" == "Failed" ]]; then
        to_mention+=("  FAILED: ${run_name} (${run_info})")
    elif [[ "${run_status}" =~ ^(Finished|Validated)$ ]]; then
        to_mention+=("  FINISHED: ${run_name} (${run_info})")
        to_process+=(" process_shallow_run ${run_name} # (${run_info})")
    else
        to_mention+=("  UNKNOWN STATUS: ${run_name} (${run_info})")
    fi
done < <(echo "${all_runs}" | jq -rc '.[] | [.set.name,.status,.version] | @tsv')

to_process_count="${#to_process[*]}"
to_mention_count="${#to_mention[*]}"

info "Found ${to_mention_count} runs to mention and ${to_process_count} finished to be processed further"
if [[ "${to_mention_count}" -gt 0 ]]; then
    printf '[INFO] %s\n' "${to_mention[@]}" | sort
fi

if [[ "${to_process_count}" -gt 0 ]]; then
    job_name="${yymmdd}_${USER}_process_shallow_runs"
    job_file="/data/ops/jobs/${job_name}"
    log_file="/data/ops/logs/${job_name}"

    if [[ -f "${job_file}" ]]; then
        warn "Overwriting job file ${job_file}"
    fi
    echo "# ShallowSeq processing ${yymmdd}" > "${job_file}"
    printf ' %s\n' "${to_process[@]}" | sort >> "${job_file}"
    chmod +x "${job_file}"
    execute_job_cmd="nohup ${job_file} > ${log_file} &"

    info "Check contents of job file ${job_file}"
    info "Or start processing a total of ${to_process_count} runs with:"
    echo "  ${execute_job_cmd}"
    if [[ -f "${log_file}" ]]; then
        warn "log file already exists (${log_file})!!!!"
    fi
fi
#!/usr/bin/env bash

source message_functions || exit 1
source locate_reporting_api || exit 1

major_version="5.32"

###########

main () {
    echo ""
    echo "## Panel run status check for runs on pipeline version ${major_version} (date=$(date +'%y%m%d'))"

    # Create all required run collections
    echo "## Retrieving required information from API..."
    ##mapfile -t non_db_entities < <(hmf_api_get "entities" | jq -r '.[] | select(.add_to_db == false) | .name')
    runs=$(hmf_api_get "runs?ini=Targeted.ini" | jq '[.[] | select(.context != "RESEARCH")]' | jq -s '.') || die "Unable to retrieve Somatic runs from API"

    echo "## Creating run collections to check..."
    all_non_fini_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Pending" or .status == "Processing" or .status == "Failed" or .status == "Invalidated"  or .status == "Waiting")]')
    all_fini_runs=$(echo "${runs}" | jq '[.[] | select(.status == "Finished" or .status == "Validated")]')

    tumor_samples_with_non_fini_run=$(get_tumor_samples_from_runs_json "${all_non_fini_runs}")
    tumor_samples_with_fini_run=$(get_tumor_samples_from_runs_json "${all_fini_runs}")

    # We only consider current runs to check for further processing
    current_non_fini_runs=$(select_runs_to_check "${all_non_fini_runs}" "${major_version}")
    current_fini_runs=$(select_runs_to_check "${all_fini_runs}" "${major_version}")


    # Now ready to check each status on by one

    echo ""
    echo ""
    echo "### NON-FINISHED PANEL RUNS:"
    counter=0
    while read -r run_info; do
      echo
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | awk -F '_' '{print $3}')
        status=$(echo "${run_info}" | cut -f3)

        has_finished_run=$(echo "${tumor_samples_with_fini_run}" | tr " " "\n" | grep -cw "${sample_name}" )

        reporting_id=$(extract_reporting_id_on_barcode ${barcode} "prod")
        is_reported=$(extract_object_shared ${reporting_id} "prod" | wc -l )

        if [[ ${has_finished_run} -lt 1 ]]; then
            counter=$((counter+1))
            echo "---------"
            echo "-${counter}- ${set_name} : status = ${status}"
            fi
    done < <(echo "${current_non_fini_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.status] | @tsv')


    echo ""
    echo ""
    echo "### FINISHED PANEL RUNS:"
    counter=0
    while read -r run_info; do
        echo
        sample_name=$(echo "${run_info}" | cut -f1)
        set_name=$(echo "${run_info}" | cut -f2)
        barcode=$(echo "${set_name}" | awk -F '_' '{print $3}')
        status=$(echo "${run_info}" | cut -f3)

        has_finished_run=$(echo "${tumor_samples_with_fini_run}" | tr " " "\n" | grep -cw "${sample_name}" )

        reporting_id=$( extract_reporting_id_on_barcode ${barcode} "prod")
        is_reported=$( extract_object_shared ${reporting_id} "prod" | wc -l )

        if [[ ${has_finished_run} -gt 0 && ${is_reported} -lt 1 ]]; then
             counter=$((counter+1))
             echo "---------"
             echo "-${counter}- ${set_name} : status = ${status}"
             echo " ** Action - create a report and upload it to the sharing bucket for NKI/AVL using the script: create_panel_report ${set_name} "
        fi
    done < <(echo "${current_fini_runs}" | jq -cr '.[] | [.set.tumor_sample,.set.name,.status] | @tsv')

echo ""
echo ""

}


select_runs_to_check () {
    local runs_json_input=$1 && shift
    local version_string=$1 && shift
    local bucket_exclude="research-pipeline"
    # Since Pv5.22 the samples-for-db have two runs (diagnostic and research) we want to ignore the research
    echo "${runs_json_input}" | jq \
      --arg vsn "^${version_string}" \
      --arg buk "^${bucket_exclude}" \
      '[.[] | select(.version//"NA"|match($vsn)) | select(.bucket//"NA"|test($buk)|not)]'
}

get_tumor_samples_from_runs_json () {
    local runs_json=$1 && shift
    echo "${runs_json}" | jq -r '.[].set.tumor_sample' | sort | uniq
}

main
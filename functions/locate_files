#!/usr/bin/env bash

source message_functions || exit 1

base_path="/data/common"
if [[ ! -d ${base_path} ]]; then
    # Backup if that path doesn't exist
    base_path="/data"
fi

############################# Database Credentials #############################

locate_gcp_prod_database_host() {
    echo $(cat ${base_path}/dbs/mysql_credentials/gcp_database_host)
    cat "${base_path}/dbs/mysql_credentials/gcp_database_host"
}

locate_prod_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/prod
}

locate_diagnostic_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/prod_diagnostic
}

locate_prod_database_credentials_cnf() {
    echo ${base_path}/dbs/mysql_credentials/patients.sql.prod-1/reader.cnf
}

locate_prod_backup_database_credentials_cnf() {
    echo ${base_path}/dbs/mysql_credentials/patients.sql.backup.prod-1/reader.cnf
}

locate_pilot_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pilot
}

locate_pilot_database_credentials_cnf() {
    echo ${base_path}/dbs/mysql_credentials/patients.sql.prod-1/reader.cnf
}

locate_reference_validation_sets_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/reference_validation_sets
}

locate_pipeline_v5_validation_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pipeline_v5_validation
}

locate_vicc_database_credentials() {
    echo ${base_path}/resources/mysql_credentials/vicc_db
}

locate_vicc_pilot_database_credentials() {
    echo ${base_path}/resources/mysql_credentials/vicc_db_pilot
}

locate_ckb_database_credentials() {
    echo ${base_path}/resources/mysql_credentials/ckb_db
}

locate_ckb_pilot_database_credentials() {
    echo ${base_path}/resources/mysql_credentials/ckb_db_pilot
}


############################# Nextcloud Credentials ############################

locate_nextcloud_upload_credentials() {
    echo ${base_path}/dbs/nextcloud_credentials/nextcloud_credentials
}

##################################### JARS #####################################

locate_prod_purple() {
    echo ${base_path}/tools/purple_v3.1/purple.jar
}

locate_pilot_purple() {
    echo ${base_path}/tools/purple_pilot/purple.jar
}

locate_prod_virus_interpreter() {
    echo ${base_path}/tools/virus-interpreter_v1.0/virus-interpreter.jar
}

locate_pilot_virus_interpreter() {
    echo ${base_path}/tools/virus-interpreter_pilot/virus-interpreter.jar
}

locate_prod_patient_db() {
    echo ${base_path}/tools/patient-db_v3.62/patient-db.jar
}

locate_diagnostic_patient_db() {
    echo ${base_path}/tools/patient-db_v3.61/patient-db.jar
}

locate_pilot_patient_db() {
    echo ${base_path}/tools/patient-db_pilot/patient-db.jar
}

locate_prod_linx() {
    echo ${base_path}/tools/linx_v1.16/linx.jar
}

locate_pilot_linx() {
    echo ${base_path}/tools/linx_pilot/linx.jar
}

locate_prod_sigs() {
    echo ${base_path}/tools/sigs_v1.0/sigs.jar
}

locate_pilot_sigs() {
    echo ${base_path}/tools/sigs_pilot/sigs.jar
}

locate_pilot_orange() {
    echo ${base_path}/tools/orange_pilot/orange.jar
}

locate_prod_patient_reporter() {
    echo ${base_path}/tools/patientreporter_v7.23/patient-reporter.jar
}

locate_pilot_patient_reporter() {
    echo ${base_path}/tools/patientreporter_pilot/patient-reporter.jar
}

locate_prod_vicc_importer() {
    echo ${base_path}/tools/vicc-importer/1.1/vicc-importer.jar
}

locate_pilot_vicc_importer() {
    echo ${base_path}/tools/vicc-importer/pilot/vicc-importer.jar
}

locate_prod_iclusion_importer() {
    echo ${base_path}/tools/iclusion-importer/1.3/iclusion-importer.jar
}

locate_pilot_iclusion_importer() {
    echo ${base_path}/tools/iclusion-importer/pilot/iclusion-importer.jar
}

locate_prod_ckb_importer() {
    echo ${base_path}/tools/ckb-importer/1.1/ckb-importer.jar
}

locate_pilot_ckb_importer() {
    echo ${base_path}/tools/ckb-importer/pilot/ckb-importer.jar
}

locate_prod_serve() {
    echo ${base_path}/tools/serve/1.6/serve.jar
}

locate_pilot_serve() {
    echo ${base_path}/tools/serve/pilot/serve.jar
}

locate_prod_protect() {
    # Cannot update to v1.4 yet as long as diagnostics pipeline occasionally needs a protect rerun.
    echo ${base_path}/tools/protect_v1.3/protect.jar
}

locate_pilot_protect() {
    echo ${base_path}/tools/protect_pilot/protect.jar
}

locate_pilot_cuppa() {
    echo ${base_path}/tools/cuppa_pilot/cuppa.jar
}

locate_pilot_sig_analyser() {
    echo ${base_path}/tools/sig-analyser_pilot/sig-analyser.jar
}

locate_prod_hmf_id_generator() {
    echo ${base_path}/tools/hmf-id-generator_v2.7/hmf-id-generator.jar
}

locate_pilot_hmf_id_generator() {
    echo ${base_path}/tools/hmf-id-generator_pilot/hmf-id-generator.jar
}

locate_prod_datarequest() {
    echo ${base_path}/tools/datarequest/datarequest_prod.jar
}

locate_pilot_datarequest() {
    echo ${base_path}/tools/datarequest/datarequest_pilot.jar
}

locate_dsync() {
	echo ${base_path}/tools/dsync/1.0/dsync.jar
}

############################# PIPELINE VERSION #################################

extract_expected_pipeline_version() {
    echo "5.22"
}

############################### NON JAVA TOOLS #################################

locate_peach_main() {
    echo "$(locate_repo_dir "peach")/peach"
}

locate_vcftools() {
    echo ${base_path}/tools/vcftools_v0.1.14/bin/vcftools
}

################################## Resources ###################################

locate_driver_gene_panel_37_tsv_ds() {
    echo ${base_path}/dbs/driver_gene_panel/DriverGenePanel.37.tsv
}

locate_driver_gene_panel_37_tsv_gcp() {
    echo ${base_path}/repos/common-resources-public/gene_panel/37/DriverGenePanel.37.tsv
}

locate_driver_gene_panel_38_tsv_gcp() {
    echo ${base_path}/repos/common-resources-public/gene_panel/38/DriverGenePanel.38.tsv
}

locate_known_fusion_data_37_csv_ds() {
    echo ${base_path}/dbs/fusions/known_fusion_data.37_v3.csv
}

locate_known_fusion_data_37_csv_gcp() {
    echo ${base_path}/repos/common-resources-public/fusions/37/known_fusion_data.37.csv
}

locate_known_fusion_data_38_csv_gcp() {
    echo ${base_path}/repos/common-resources-public/fusions/38/known_fusion_data.38.csv
}

locate_peach_resource_dir() {
    echo ${base_path}/dbs/peach
}

locate_pilot_iclusion_trial_tsv() {
    echo ${base_path}/resources/iclusion/iclusion_trials_pilot.tsv
}

locate_prod_iclusion_trial_tsv() {
    echo ${base_path}/resources/iclusion/iclusion_trials_prod.tsv
}

locate_vicc_json() {
    echo ${base_path}/resources/vicc/all.json
}

locate_docm_tsv() {
    echo ${base_path}/resources/docm/docm_v3.2.tsv
}

locate_hartwig_cohort_tsv() {
    echo ${base_path}/resources/hartwig/hartwig_cohort.tsv
}

locate_hartwig_curated_tsv() {
    echo ${base_path}/resources/hartwig/hartwig_curated.tsv
}

locate_ckb_flex_data_dir() {
    echo ${base_path}/resources/ckb/270730_ckb_flex_dump
}

locate_ckb_filter_tsv() {
    echo ${base_path}/resources/serve/ckb_filters.tsv
}

locate_ckb_filter_tsv_empty() {
    echo ${base_path}/resources/serve/ckb_filters_empty.tsv
}

locate_samplesheets_dir() {
    echo "/data/samplesheets/"
}

locate_sample_registration_unregistered_jsons_dir() {
    echo "/data/ops/api/prod/jsons/"
}

locate_sample_registration_registered_jsons_dir() {
    echo "/data/ops/api/prod/jsons/registered/"
}

locate_sample_registration_logs_dir() {
    echo "/data/ops/api/prod/logs/"
}

#################################### Repos #####################################

locate_repo_dir() {
    local repo_name=$1 && shift
    echo "${base_path}/repos/${repo_name}"
}

################################# REF GENOME ###################################

locate_ref_genome_37_fasta_file_ds() {
    echo ${base_path}/refgenomes/Homo_sapiens.GRCh37.GATK.illumina/Homo_sapiens.GRCh37.GATK.illumina.fasta
}

locate_ref_genome_37_fasta_file_gcp() {
    echo ${base_path}/resources/reference_genome/37/Homo_sapiens.GRCh37.GATK.illumina.fasta
}

locate_ref_genome_38_fasta_file_ds() {
    echo ${base_path}/refgenomes/Homo_sapiens.GRCh38.no.alt/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna
}

locate_ref_genome_38_fasta_file_gcp() {
    echo ${base_path}/resources/reference_genome/38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna
}

locate_ref_genome_37_to_38_chain() {
    echo ${base_path}/resources/reference_genome_liftover/hg19ToHg38.over.chain
}

locate_ref_genome_38_to_37_chain() {
    echo ${base_path}/resources/reference_genome_liftover/hg38ToHg19.over.chain
}

##################################  METRICS ####################################

locate_wgs_metrics() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local metrics_file=""
    local metrics_dir_pre_v5=${run_dir}/QCStats
    local metrics_dir_v5=${run_dir}/${sample}/bam_metrics

    if [[ -d "${metrics_dir_pre_v5}" ]]; then
        metrics_file=$(find -L ${metrics_dir_pre_v5}/ -type f -name "${sample}*_WGSMetrics.txt")
    elif [[ -d "${metrics_dir_v5}" ]]; then
        metrics_file=$(find -L ${metrics_dir_v5}/ -type f -name "${sample}.wgsmetrics")
    fi

    if [[ -z "${metrics_file}" ]]; then
        error "Unable to locate metrics file for ${sample} in run ${run_dir}. Exiting."
    fi

    echo ${metrics_file}
}

locate_flagstats() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local flagstats_file=""
    local flagstats_dir_pre_v5=${run_dir}/${sample}/mapping
    local flagstats_dir_v5=${run_dir}/${sample}/flagstat

    if [[ -d "${flagstats_dir_pre_v5}" ]]; then
        flagstats_file=$(find -L ${flagstats_dir_pre_v5}/ -type f -name "${sample}*.realigned.flagstat")
    elif [[ -d "${flagstats_dir_v5}" ]]; then
        flagstats_file=$(find -L ${flagstats_dir_v5}/ -type f -name "${sample}.flagstat")
    fi

    if [[ -z "${flagstats_file}" ]]; then
        error "Unable to locate flagstats file for ${sample} in run ${run_dir}. Exiting."
    fi

    echo ${flagstats_file}
}

##################################### AMBER ####################################

locate_amber_directory() {
    local run_dir=$1
    local amber_dir=${run_dir}/amber

    if [[ ! -d "${amber_dir}" ]]; then
        error "Unable to locate AMBER directory in ${run_dir}. Exiting."
    fi

    echo ${amber_dir}
}

###################################### SAGE ####################################

locate_sage_somatic_variants() {
    local run_dir=$1
    local sage_dir_old=${run_dir}/sage
    local sage_dir=${run_dir}/sage_somatic

    local somatic_vcf=""

    if [[ -d "${sage_dir}" ]]; then
        somatic_vcf=$(find -L ${sage_dir}/ -type f -name "*.sage.somatic.filtered.vcf.gz")
    elif [[ -d "${sage_dir_old}" ]]; then
        somatic_vcf=$(find -L ${sage_dir_old}/ -type f -name "*.sage.somatic.filtered.vcf.gz")
    fi

    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate sage somatic variants in ${run_dir}. Exiting."
    fi
    echo ${somatic_vcf}
}

##################################### PURPLE ###################################

locate_purple_purity() {
    local run_dir=$1
    local purple_purity_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.purple.purity.tsv")
    if [[ -z "${purple_purity_tsv}" ]]; then
        error "Unable to locate purple purity in ${run_dir}. Exiting."
    fi
    echo ${purple_purity_tsv}
}

locate_purple_pilot_purity() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_purity_tsv=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        purple_purity_tsv=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.purity.tsv")
    fi

    if [[ -z "${purple_purity_tsv}" ]]; then
        error "Unable to locate purple pilot purity in ${run_dir}. Exiting."
    fi
    echo ${purple_purity_tsv}
}

locate_purple_qc() {
    local run_dir=$1
    local purple_qc_file=$(find -L ${run_dir}/purple/ -type f -name "*.purple.qc")
    if [[ -z "${purple_qc_file}" ]]; then
        error "Unable to locate purple qc in ${run_dir}. Exiting."
    fi
    echo ${purple_qc_file}
}

locate_purple_somatic_driver_catalog() {
    local run_dir=$1
    local purple_somatic_driver_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.driver.catalog.somatic.tsv")
    if [[ -z "${purple_somatic_driver_tsv}" ]]; then
        error "Unable to locate purple somatic driver catalog in ${run_dir}. Exiting."
    fi
    echo ${purple_somatic_driver_tsv}
}

locate_purple_somatic_copynumber_tsv() {
    local run_dir=$1
    local purple_somatic_copynumber_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.somatic.tsv")
    if [[ -z "${purple_somatic_copynumber_tsv}" ]]; then
        error "Unable to locate purple somatic copynumbers in ${run_dir}. Exiting."
    fi
    echo ${purple_somatic_copynumber_tsv}
}

locate_purple_gene_copynumbers() {
    local run_dir=$1
    local purple_gene_copynumbers=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.gene.tsv")
    if [[ -z "${purple_gene_copynumbers}" ]]; then
        error "Unable to locate purple gene copynumbers in ${run_dir}. Exiting."
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_pilot_gene_copynumbers() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_gene_copynumbers=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        purple_gene_copynumbers=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.cnv.gene.tsv")
    fi

    if [[ -z "${purple_gene_copynumbers}" ]]; then
        error "Unable to locate purple pilot gene copynumbers in ${run_dir}. Exiting."
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_somatic_variants() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.somatic.vcf.gz")
    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate purple somatic variants in ${run_dir}. Exiting."
    fi
    echo ${somatic_vcf}
}

locate_purple_pilot_somatic_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local somatic_vcf=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        somatic_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.somatic.vcf.gz")
    fi

    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate purple pilot somatic variants in ${run_dir}. Exiting."
    fi

    echo ${somatic_vcf}
}

locate_purple_plot_directory() {
    local run_dir=$1
    local purple_plot_dir="${run_dir}/purple/plot"
    if [[ ! -d "${purple_plot_dir}" ]]; then
        error "Unable to locate purple plot directory in ${run_dir}. Exiting."
    fi
    echo ${purple_plot_dir}
}

locate_purple_circos_plot() {
    local run_dir=$1
    local circos_plot=$(find -L ${run_dir}/purple/plot/ -type f -name "*.circos.png")
    if [[ -z "${circos_plot}" ]]; then
        error "Unable to locate purple circos plot in ${run_dir}. Exiting."
    fi
    echo ${circos_plot}
}

locate_purple_pilot_circos_plot() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local circos_plot=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        circos_plot=$(find -L ${purple_pilot_dir}/plot/ -type f -name "*.circos.png")
    fi

    if [[ -z "${circos_plot}" ]]; then
        error "Unable to locate purple pilot circos plot in ${run_dir}. Exiting."
    fi
    echo ${circos_plot}
}

################################ PURPLE Germline ###############################

locate_purple_germline_variants() {
    local run_dir=$1
    local germline_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.germline.vcf.gz")
    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate purple germline variants in ${run_dir}. Exiting."
    fi
    echo ${germline_vcf}
}

locate_purple_pilot_germline_variants() {
    local run_dir=$1
    local purple_dir=${run_dir}/purple_pilot

    local germline_vcf=""

    if [[ -d "${purple_dir}" ]]; then
        germline_vcf=$(find -L ${purple_dir} -type f -name "*.purple.germline.vcf.gz")
    fi

    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate purple pilot germline variants in ${run_dir}. Exiting."
    fi
    echo ${germline_vcf}
}

locate_purple_germline_driver_catalog() {
    local run_dir=$1
    local purple_germline_driver_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.driver.catalog.germline.tsv")
    if [[ -z "${purple_germline_driver_tsv}" ]]; then
        error "Unable to locate purple germline driver catalog in ${run_dir}. Exiting."
    fi
    echo ${purple_germline_driver_tsv}
}

############################ Structural Variants ###############################

locate_purple_structural_variants() {
    local run_dir=$1
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate purple structural variants in ${run_dir}. Exiting."
    fi
    echo ${structural_vcf}
}

locate_purple_pilot_structural_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local structural_vcf=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        structural_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.sv.vcf.gz")
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate purple pilot structural variants in ${run_dir}. Exiting."
    fi
    echo ${structural_vcf}
}

locate_gripss_structural_variants() {
    local run_dir=$1
    local gripss_dir=${run_dir}/gripss

    local structural_vcf=""
    if [[ -d "${gripss_dir}" ]]; then
        structural_vcf=$(find -L ${gripss_dir}/ -type f -name "*.gripss.somatic.filtered.vcf.gz")
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate GRIPSS structural variants in ${run_dir}. Exiting."
    fi
    echo ${structural_vcf}
}

locate_gripss_recovery_candidates() {
    local run_dir=$1
    local gripss_dir=${run_dir}/gripss

    local structural_vcf=""
    if [[ -d "${gripss_dir}" ]]; then
        structural_vcf=$(find -L ${gripss_dir}/ -type f -name "*.gripss.somatic.vcf.gz")
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate GRIPSS recovery variants in ${run_dir}. Exiting."
    fi
    echo ${structural_vcf}
}

##################################### LINX #####################################

locate_linx_fusions() {
    local run_dir=$1
    local fusion_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.fusion.tsv")
    if [[ -z "${fusion_tsv}" ]]; then
        error "Unable to locate linx fusions tsv in ${run_dir}. Exiting."
    fi
    echo ${fusion_tsv}
}

locate_linx_breakends() {
    local run_dir=$1
    local disruption_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.breakend.tsv")
    if [[ -z "${disruption_tsv}" ]]; then
        error "Unable to locate linx disruptions tsv in ${run_dir}. Exiting."
    fi
    echo ${disruption_tsv}
}

locate_linx_viral_insertions() {
    local run_dir=$1
    local viral_insertion_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.viral_inserts.tsv")
    if [[ -z "${viral_insertion_tsv}" ]]; then
        error "Unable to locate viral insertion tsv in ${run_dir}. Exiting."
    fi
    echo ${viral_insertion_tsv}
}

locate_linx_driver_catalog() {
    local run_dir=$1
    local driver_catalog_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.driver.catalog.tsv")
    if [[ -z "${driver_catalog_tsv}" ]]; then
        error "Unable to locate linx drivers catalog in ${run_dir}. Exiting."
    fi
    echo ${driver_catalog_tsv}
}

locate_linx_plot_directory() {
    local run_dir=$1
    local linx_plot_dir="${run_dir}/linx/plot"
    if [[ ! -d "${linx_plot_dir}" ]]; then
        error "Unable to locate linx plot directory in ${run_dir}. Exiting."
    fi
    echo ${linx_plot_dir}
}

##################################### Sigs #####################################

locate_sigs_dir() {
    local run_dir=$1
    if [[ ! -d ${run_dir} ]]; then
        error "Run dir is not a directory: ${run_dir}. Exiting"
    fi
    echo ${run_dir}/sigs
}

locate_sigs_pilot_dir() {
    local run_dir=$1
    if [[ ! -d ${run_dir} ]]; then
        error "Run dir is not a directory: ${run_dir}. Exiting"
    fi
    echo ${run_dir}/sigs_pilot
}

##################################### GATK #####################################

locate_gatk_germline_variants() {
    local run_dir=$1 && shift
    local ref_sample=$1 && shift

    local germline_vcf=""

    if [[ -f "${run_dir}/pipeline.version" ]]; then
        # >v5 format
        germline_vcf=$(find -L ${run_dir}/${ref_sample}/germline_caller/ -type f -name "*.germline.vcf.gz")
    else
        # <v5 format
        germline_vcf=$(find -L ${run_dir}/ -type f -name "*.annotated.vcf.gz")
    fi

    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate germline VCF in ${run_dir}. Exiting."
    fi
    echo ${germline_vcf}
}

#################################### PEACH #####################################

locate_peach_venv_dir() {
    echo "$(locate_peach_resource_dir)/venv/peach"
}

locate_peach_requirements() {
    echo "$(locate_repo_dir "peach")/requirements.txt"
}

locate_peach_pilot_output_dir() {
    local run_dir=$1
    echo "${run_dir}/peach_pilot"
}

locate_peach_pilot_calls() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_calls_tsv=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_calls_tsv=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.calls.tsv")
    fi

    if [[ -z "${peach_pilot_calls_tsv}" ]]; then
        error "Unable to locate pilot PEACH calls tsv in ${run_dir}. Exiting."
    fi

    echo "${peach_pilot_calls_tsv}"
}

locate_peach_pilot_genotype() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_genotype_tsv=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_genotype_tsv=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.genotype.tsv")
    fi

    if [[ -z "${peach_pilot_genotype_tsv}" ]]; then
        error "Unable to locate pilot PEACH genotype tsv in ${run_dir}. Exiting."
    fi

    echo "${peach_pilot_genotype_tsv}"
}

locate_peach_prod_output_dir() {
    local run_dir=$1
    echo "${run_dir}/peach"
}

locate_peach_prod_calls() {
    local run_dir=$1
    local peach_prod_output_dir
    peach_prod_output_dir=$(locate_peach_prod_output_dir "${run_dir}")

    local peach_prod_calls_tsv=""

    if [[ -d "${peach_prod_output_dir}" ]]; then
        peach_prod_calls_tsv=$(find -L "${peach_prod_output_dir}" -type f -name "*.peach.calls.tsv")
    fi

    if [[ -z "${peach_prod_calls_tsv}" ]]; then
        error "Unable to locate prod PEACH calls tsv in ${run_dir}. Exiting."
    fi

    echo "${peach_prod_calls_tsv}"
}

locate_peach_prod_genotype() {
    local run_dir=$1
    local peach_prod_output_dir
    peach_prod_output_dir=$(locate_peach_prod_output_dir "${run_dir}")

    local peach_prod_genotype_tsv=""

    if [[ -d "${peach_prod_output_dir}" ]]; then
        peach_prod_genotype_tsv=$(find -L "${peach_prod_output_dir}" -type f -name "*.peach.genotype.tsv")
    fi

    if [[ -z "${peach_prod_genotype_tsv}" ]]; then
        error "Unable to locate prod PEACH genotype tsv in ${run_dir}. Exiting."
    fi

    echo "${peach_prod_genotype_tsv}"
}

locate_peach_pilot_vcf() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_vcf=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_vcf=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.filtered.vcf")
    fi

    if [[ -z "${peach_pilot_vcf}" ]]; then
        error "Unable to locate pilot PEACH VCF file in ${run_dir}. Exiting."
    fi

    echo "${peach_pilot_vcf}"
}

locate_peach_genotype_prod_tsv() {
    local run_dir=$1
    local peach_genotype=$(find -L ${run_dir}/peach/ -type f -name "*.peach.genotype.tsv")
    if [[ -z "${peach_genotype}" ]]; then
        error "Unable to locate peach genotype tsv in ${run_dir}. Exiting."
    fi
    echo ${peach_genotype}
}

#################################### CHORD #####################################

locate_chord_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord/ -type f -name "*_chord_prediction.txt")
    if [[ -z "${chord_prediction_file}" ]]; then
        error "Unable to locate CHORD prediction file in ${run_dir}. Exiting."
    fi
    echo ${chord_prediction_file}
}

locate_chord_pilot_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord_pilot/ -type f -name "*_chord_prediction.txt")
    if [[ -z "${chord_prediction_file}" ]]; then
        error "Unable to locate pilot CHORD prediction file in ${run_dir}. Exiting."
    fi
    echo ${chord_prediction_file}
}

################################ VIRUSBreakend #################################

locate_virus_breakend_tsv() {
    local run_dir=$1
    local virus_breakend_tsv=$(find -L ${run_dir}/virusbreakend/ -type f -name "*.virusbreakend.vcf.summary.tsv")
    if [[ -z "${virus_breakend_tsv}" ]]; then
        error "Unable to locate virus breakend conclusion tsv in ${run_dir}. Exiting."
    fi
    echo ${virus_breakend_tsv}
}

################################ VIRUS Interpreter #################################

locate_virus_annotation_tsv_pilot() {
    local run_dir=$1
    local virus_annotation_tsv=$(find -L ${run_dir}/virusbreakend_pilot/ -type f -name "*.virus.annotated.tsv")
    if [[ -z "${virus_annotation_tsv}" ]]; then
        warn "Unable to locate pilot virus annotation TSV in ${run_dir}. Reverting to empty virus interpretation."
        virus_annotation_tsv="${base_path}/dbs/virus_interpreter/empty.virus.annotated.tsv"
    fi
    echo ${virus_annotation_tsv}
}

locate_virus_annotation_tsv() {
    local run_dir=$1
    local virus_annotation_tsv=$(find -L ${run_dir}/virusbreakend/ -type f -name "*.virus.annotated.tsv")
    if [[ -z "${virus_annotation_tsv}" ]]; then
        warn "Unable to locate virus annotation TSV in ${run_dir}. Reverting to empty virus interpretation."
        virus_annotation_tsv="${base_path}/dbs/virus_interpreter/empty.virus.annotated.tsv"
    fi
    echo ${virus_annotation_tsv}
}

################################## CUPPA #######################################

locate_cuppa_result_csv() {
    local run_dir=$1
    local result_csv=$(find -L ${run_dir}/cuppa/ -type f -name "*.cup.data.csv")
    if [[ -z "${result_csv}" ]]; then
        error "Unable to locate cuppa result csv in ${run_dir}. Exiting."
    fi
    echo ${result_csv}
}

locate_cuppa_conclusion_txt() {
    local run_dir=$1
    local conclusion_txt=$(find -L ${run_dir}/cuppa/ -type f -name "*.cuppa.conclusion.txt")
    if [[ -z "${conclusion_txt}" ]]; then
        error "Unable to locate cuppa conclusion in ${run_dir}. Exiting."
    fi
    echo ${conclusion_txt}
}

locate_cuppa_plot() {
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa/ -type f -name "*.cuppa.chart.png")
    if [[ -z "${plot}" ]]; then
        error "Unable to locate cuppa plot in ${run_dir}. Exiting."
    fi
    echo ${plot}
}

################################### PROTECT ####################################

locate_protect_evidence() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT evidence tsv in ${run_dir}. Exiting."
    fi
    echo ${protect_evidence_tsv}
}

locate_protect_evidence_pilot_ckb() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect_pilot_ckb/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT pilot CKB evidence tsv in ${run_dir}. Exiting."
    fi
    echo ${protect_evidence_tsv}
}

locate_protect_evidence_pilot_vicc() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect_pilot_vicc/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT pilot VICC evidence tsv in ${run_dir}. Exiting."
    fi
    echo ${protect_evidence_tsv}
}

##################################### LIMS #####################################

locate_reporting_db_tsv() {
    local reporting_db_tsv=/data/ops/lims/prod/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate reporting db TSV. Exiting."
    fi
    echo ${reporting_db_tsv}
}

locate_reporting_db_tsv_pilot() {
    local reporting_db_tsv=/data/ops/lims/pilot/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate pilot reporting db TSV. Exiting."
    fi
    echo ${reporting_db_tsv}
}

##################################### LIMS #####################################

locate_reporting_db_tsv() {
    local reporting_db_tsv=/data/ops/lims/prod/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate reporting db TSV. Exiting."
    fi
    echo ${reporting_db_tsv}
}

locate_shallow_tsv() {
    local shallow_seq_tsv=/data/ops/lims/prod/shallow_seq_purity.tsv
    if [[ ! -f "${shallow_seq_tsv}" ]]; then
        error "Unable to locate shallow seq TSV. Exiting."
    fi
    echo ${shallow_seq_tsv}
}


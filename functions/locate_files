#!/usr/bin/env bash

source message_functions || exit 1

############################# Nextcloud Credentials ############################

locate_nextcloud_upload_credentials() {
    echo "/data/dbs/nextcloud_credentials/nextcloud_credentials"
}

##################################### JARS #####################################

locate_pilot_actin() {
    echo "/data/actin/system/actin.jar"
}

locate_pilot_isofox() {
    echo "/data/experiments/tools/isofox.jar"
}

locate_prod_sage() {
    echo "/data/tools/sage/2.8/sage.jar"
}

locate_prod_purple() {
    echo "/data/tools/purple/3.2/purple.jar"
}

locate_pilot_purple() {
    echo "/data/tools/purple/pilot/purple.jar"
}

locate_prod_virus_interpreter() {
    echo "/data/tools/virus-interpreter/1.2/virus-interpreter.jar"
}

locate_research_virus_interpreter() {
    echo "/data/tools/virus-interpreter/1.2/virus-interpreter.jar"
}

locate_pilot_virus_interpreter() {
    echo "/data/experiments/pilot_tools/virus-interpreter/virus-interpreter.jar"
}

locate_prod_lilac() {
    echo "/data/tools/lilac/1.0/lilac.jar"
}

locate_pilot_lilac() {
    echo "/data/experiments/tools/lilac.jar"
}

locate_prod_cuppa() {
    echo "/data/tools/cuppa/1.6/cuppa.jar"
}

locate_pilot_cuppa() {
    echo "/data/tools/cuppa/pilot/cuppa.jar"
}

locate_prod_paddle() {
    echo "/data/tools/paddle/1.0/paddle.jar"
}

locate_prod_linx() {
    echo "/data/tools/linx/1.17/linx.jar"
}

locate_pilot_linx() {
    echo "/data/tools/linx/pilot/linx.jar"
}

locate_prod_sigs() {
    echo "/data/tools/sigs/1.0/sigs.jar"
}

locate_pilot_sigs() {
    echo "/data/tools/sigs/pilot/sigs.jar"
}

locate_prod_orange() {
    echo "/data/tools/orange/1.6/orange.jar"
}

locate_pilot_orange() {
    echo "/data/tools/orange/pilot/orange.jar"
}

locate_research_patient_db() {
    echo "/data/tools/patient-db/3.64/patient-db.jar"
}

locate_prod_patient_db() {
    echo "/data/tools/patient-db/3.64/patient-db.jar"
}

locate_prod_clinical_patient_db() {
    echo "/data/tools/patient-db/3.66/patient-db.jar"
}

locate_diagnostic_patient_db() {
    echo "/data/tools/patient-db/3.62/patient-db.jar"
}

locate_pilot_patient_db() {
    echo "/data/experiments/pilot_tools/patient-db/patient-db.jar"
}

locate_prod_patient_reporter() {
    echo "/data/tools/patientreporter/7.24.1/patient-reporter.jar"
}

locate_pilot_patient_reporter() {
    echo "/data/experiments/pilot_tools/patient-reporter/patient-reporter.jar"
}

locate_prod_vicc_importer() {
    echo "/data/tools/vicc-importer/1.2/vicc-importer.jar"
}

locate_pilot_vicc_importer() {
    echo "/data/experiments/pilot_tools/vicc-importer/vicc-importer.jar"
}

locate_prod_iclusion_importer() {
    echo "/data/tools/iclusion-importer/1.5/iclusion-importer.jar"
}

locate_pilot_iclusion_importer() {
    echo "/data/experiments/pilot_tools/iclusion-importer/iclusion-importer.jar"
}

locate_prod_ckb_importer() {
    echo "/data/tools/ckb-importer/1.2/ckb-importer.jar"
}

locate_pilot_ckb_importer() {
    echo "/data/experiments/pilot_tools/ckb-importer/ckb-importer.jar"
}

locate_prod_serve() {
    echo "/data/tools/serve/1.8/serve.jar"
}

locate_pilot_serve() {
    echo "/data/experiments/pilot_tools/serve/serve.jar"
}

locate_prod_protect() {
    echo "/data/tools/protect/1.6/protect.jar"
}

locate_research_protect() {
    echo "/data/tools/protect/2.0/protect.jar"
}

locate_pilot_protect() {
    echo "/data/experiments/pilot_tools/protect/protect.jar"
}

locate_prod_pave() {
    echo "/data/tools/pave/1.0/pave.jar"
}

locate_pilot_sig_analyser() {
    echo "/data/tools/sig-analyser/pilot/sig-analyser.jar"
}

locate_prod_hmf_id_generator() {
    echo "/data/tools/hmf-id-generator/2.8/hmf-id-generator.jar"
}

locate_pilot_hmf_id_generator() {
    echo "/data/tools/hmf-id-generator/pilot/hmf-id-generator.jar"
}

locate_prod_datarequest() {
    echo "/data/tools/datarequest/datarequest_prod.jar"
}

locate_pilot_datarequest() {
    echo "/data/tools/datarequest/datarequest_pilot.jar"
}

locate_dsync() {
    echo "/data/tools/dsync/1.4.0/dsync.jar"
}

locate_run_contexts_writer() {
    echo "/data/tools/clinical-db-loader/1.0/clinical-db-loader.jar"
}

############################# Clinical patient data ############################

locate_tumor_location_mapping_pilot() {
    echo "/data/resources/ops/clinical_curation/pilot_tumor_location_mapping.tsv"
}

locate_tumor_location_mapping_prod() {
    echo "/data/resources/ops/clinical_curation/tumor_location_mapping.tsv"
}

locate_tumor_location_overrides_pilot() {
    echo "/data/resources/ops/clinical_curation/pilot_tumor_location_overrides.tsv"
}

locate_tumor_location_overrides_prod() {
    echo "/data/resources/ops/clinical_curation/tumor_location_overrides.tsv"
}

locate_treatment_mapping_pilot() {
    echo "/data/resources/ops/clinical_curation/pilot_treatment_mapping.tsv"
}

locate_treatment_mapping_prod() {
    echo "/data/resources/ops/clinical_curation/treatment_mapping.tsv"
}

locate_biopsy_site_mapping_prod() {
    echo "/data/resources/ops/clinical_curation/biopsy_site_mapping.tsv"
}

############################# Patient report data ############################

locate_germline_reporting_prod() {
    echo "/data/resources/ops/germline_reporting/germline_reporting.tsv"
}

locate_summary_patient_report_prod() {
    echo "/data/resources/ops/summary_patient_report/summary_samples.tsv"
}

locate_rva_logo_prod() {
    echo "/data/resources/ops/patient_report_images/L633_l_testlaboratoria_rva_en_color.jpeg"
}

locate_company_logo_prod() {
    echo "/data/resources/ops/patient_report_images/hartwig_logo.jpg"
}

locate_signature_prod() {
    echo "/data/resources/ops/patient_report_images/signature_edwin_transparant.png"
}

############################# PIPELINE VERSION #################################

extract_expected_pipeline_version() {
    echo "5.25"
}

extract_expected_pipeline_version_research() {
    echo "5.27"
}

############################### NON JAVA TOOLS #################################

locate_peach_main() {
    echo "$(locate_repo_dir "peach")/peach"
}

############################## ACTIN Resources #################################

locate_actin_local_crunch_repo() {
    echo "$HOME/hmf/repos/crunch-resources-private/actin"
}

locate_actin_database_sql_script() {
    echo "/data/resources/crunch/actin/sql_database/generate_database.sql"
}

locate_actin_clinical_curation_directory() {
    echo "/data/resources/crunch/actin/clinical_curation"
}

locate_actin_trial_config_directory() {
    echo "/data/resources/crunch/actin/trial_config"
}

locate_actin_minimal_molecular_json() {
    echo "/data/resources/crunch/actin/minimal_molecular_json/minimal.json"
}

locate_actin_serve_bridge_tsv() {
    echo "/data/actin/serve_bridge/actin_knowledgebase.tsv"
}

locate_cuppa_ref_dir_dna_rna() {
    echo "/data/resources/crunch/actin/cuppa_ref"
}

locate_actin_rna_sample_metadata_file() {
    echo "/data/resources/crunch/actin/rna_cohort/actin_sample_cohort_mapping.csv"
}

################################# ACTIN Data ###################################

locate_actin_clinical_input_feed_directory() {
    echo "/data/actin/clinical/input_feed/latest"
}

locate_actin_curated_clinical_directory() {
    echo "/data/actin/clinical/curated"
}

locate_actin_clinical_json() {
    local sample=$1 && shift
    local clinical_dir=$(locate_actin_curated_clinical_directory)

    if [[ ! -d "${clinical_dir}" ]]; then
        error "Unable to locate ACTIN clinical directory '${clinical_dir}'"
    fi

    local clinical_json="${clinical_dir}/${sample}.clinical.json"
    if [[ ! -f ${clinical_json} ]]; then
        error "Could not locate clinical json for sample '${sample}'"
    fi

    echo "${clinical_json}"
}

locate_actin_lilac_hla_bam_dir() {
    echo "/data/actin/dna_hla_bams"
}

locate_actin_molecular_directory() {
    echo "/data/actin/molecular"
}

locate_actin_platinum_directory_for_sample() {
    local sample=$1 && shift

    if [[ -z "${sample}" ]]; then
        error "No sample provided. Exiting"
    fi

    echo "$(locate_actin_molecular_directory)/${sample}"
}

locate_actin_molecular_json() {
    local sample=$1
    local platinum_dir=$(locate_actin_platinum_directory_for_sample ${sample})

    if [[ ! -d "${platinum_dir}" ]]; then
        error "Unable to locate ACTIN platinum directory '${platinum_dir}'"
    fi

    local molecular_json="${platinum_dir}/actin/${sample}.molecular.json"
    if [[ ! -f ${molecular_json} ]]; then
        error "Could not locate molecular json for sample '${sample}'"
    fi

    echo "${molecular_json}"
}

locate_actin_treatment_database_directory() {
    echo "/data/actin/treatment_database"
}

locate_actin_treatment_match_directory() {
    echo "/data/actin/treatment_matches"
}

locate_actin_treatment_match_json() {
    local sample=$1 && shift
    local treatment_match_dir=$(locate_actin_treatment_match_directory)

    if [[ ! -d "${treatment_match_dir}" ]]; then
        error "Unable to locate ACTIN treatment match directory '${treatment_match_dir}'"
    fi

    local treatment_match_json="${treatment_match_dir}/${sample}.treatment_match.json"
    if [[ ! -f ${treatment_match_json} ]]; then
        error "Could not locate treatment match json for sample '${sample}'"
    fi

    echo "${treatment_match_json}"
}

locate_actin_reports_directory() {
    echo "/data/actin/reports"
}

##################################### RNA ######################################

locate_rna_bam_directory() {
    local run_dir=$1 && shift

    echo "${run_dir}/rna_bam"
}

locate_rna_bam() {
    local run_dir=$1 && shift

    local bam_directory=$(locate_rna_bam_directory ${run_dir})
    local bam=$(find -L "${bam_directory}/" -type f -name "*.sorted.dups.bam")

    echo "${bam}"
}

locate_rna_hla_bam() {
    local run_dir=$1 && shift

    local bam_directory=$(locate_rna_bam_directory ${run_dir})
    local bam=$(find -L "${bam_directory}/" -type f -name "*.hla.bam")

    echo "${bam}"
}

locate_rna_sage_directory() {
    local run_dir=$1 && shift

    echo "${run_dir}/rna_sage"
}

locate_rna_annotated_somatic_variants() {
    local run_dir=$1 && shift

    local rna_sage_directory=$(locate_rna_sage_directory ${run_dir})
    local rna_annotated_vcf=$(find -L "${rna_sage_directory}/" -type f -name "*.purple.somatic.with_rna.vcf.gz")

    echo "${rna_annotated_vcf}"
}

locate_rna_analysis_bucket() {
    local sample=$1 && shift
    local rna_analysis_bucket=""

    # Assume the Log.out always exists in case of RNA pipeline performed.
    gsutil -q stat "gs://hmf-rna-analysis/samples/${sample}/Log.out"
    if [[ $? == 0 ]]; then
        rna_analysis_bucket="gs://hmf-rna-analysis/samples/${sample}"
    fi

    echo "${rna_analysis_bucket}"
}

############################# Pipeline Resources ###############################

locate_ensembl_data_dir_37() {
    echo "/data/resources/public/ensembl_data_cache/37"
}

locate_ensembl_data_dir_38() {
    echo "/data/resources/public/ensembl_data_cache/38"
}

locate_amber_snpcheck_37_vcf() {
    echo "/data/resources/public/amber/37/Amber.snpcheck.37.vcf"
}

locate_amber_snpcheck_38_vcf() {
    echo "/data/resources/public/amber/38/Amber.snpcheck.38.vcf"
}

locate_cuppa_ref_dir_dna() {
    echo "/data/resources/private/cuppa"
}

locate_cohort_mapping_tsv() {
    echo "/data/resources/public/orange/cohort_mapping.tsv"
}

locate_cohort_percentiles_tsv() {
    echo "/data/resources/public/orange/cohort_percentiles.tsv"
}

locate_doid_json() {
    echo "/data/resources/public/disease_ontology/201015_doid.json"
}

locate_driver_gene_panel_37_tsv() {
    echo "/data/resources/public/gene_panel/37/DriverGenePanel.37.tsv"
}

locate_driver_gene_panel_38_tsv() {
    echo "/data/resources/public/gene_panel/38/DriverGenePanel.38.tsv"
}

locate_known_fusion_data_37_csv() {
    echo "/data/resources/public/fusions/37/known_fusion_data.37.csv"
}

locate_known_fusion_data_38_csv() {
    echo "/data/resources/public/fusions/38/known_fusion_data.38.csv"
}

locate_peach_resource_dir() {
    echo "/data/dbs/peach"
}


############################### Ops Resources #################################

locate_samplesheets_dir() {
    echo "/data/samplesheets"
}

locate_sample_registration_unregistered_jsons_dir() {
    echo "/data/ops/api/prod/jsons"
}

locate_sample_registration_registered_jsons_dir() {
    echo "/data/ops/api/prod/jsons/registered"
}

locate_sample_registration_logs_dir() {
    echo "/data/ops/api/prod/logs"
}

locate_snpcheck_dir() {
    echo "/data/snpcheck"
}

locate_snpcheck_vcf_upload_dir() {
    echo "/data/snpcheck/gcp-sync"
}

############################### SERVE Resources ################################

locate_pilot_iclusion_trial_tsv() {
    echo "/data/resources/crunch/serve/iclusion/iclusion_trials_pilot.tsv"
}

locate_prod_iclusion_trial_tsv() {
    echo "/data/resources/crunch/serve/iclusion/iclusion_trials_prod.tsv"
}

locate_iclusion_filter_tsv() {
    echo "/data/resources/crunch/serve/curation/iclusion_filters.tsv"
}

locate_iclusion_filter_pilot_tsv() {
  echo "/data/resources/crunch/serve/curation/iclusion_filters_pilot.tsv"
}

locate_actin_trial_tsv() {
    echo "/data/resources/crunch/serve/actin/actin_knowledgebase.tsv"
}

locate_actin_filter_tsv() {
    echo "/data/resources/crunch/serve/curation/actin_filters.tsv"
}

locate_actin_filter_pilot_tsv() {
    echo "/data/resources/crunch/serve/curation/actin_filters_pilot.tsv"
}

locate_vicc_json() {
    echo "/data/resources/crunch/serve/vicc/all.json"
}

locate_docm_tsv() {
    echo "/data/resources/crunch/serve/docm/docm_v3.2.tsv"
}

locate_hartwig_cohort_tsv() {
    echo "/data/resources/crunch/serve/hartwig/hartwig_cohort.tsv"
}

locate_hartwig_curated_tsv() {
    echo "/data/resources/crunch/serve/hartwig/hartwig_curated.tsv"
}

locate_ckb_flex_data_production_dir() {
    echo "/data/resources/custom/ckb/production/ckb_flex_dump"
}

locate_ckb_flex_data_latest_dir() {
    echo "/data/resources/custom/ckb/latest/ckb_flex_dump"
}

locate_ckb_filter_tsv() {
    echo "/data/resources/crunch/serve/curation/ckb_filters.tsv"
}

locate_ckb_filter_pilot_tsv() {
    echo "/data/resources/crunch/serve/curation/ckb_filters_pilot.tsv"
}

locate_public_missing_doids_mapping_tsv() {
    echo "/data/resources/crunch/serve/curation/public_doids_mapping.tsv"
}

locate_private_missing_doids_mapping_tsv() {
    echo "/data/resources/crunch/serve/curation/private_doids_mapping.tsv"
}


#################################### Repos #####################################

locate_repo_dir() {
    local repo_name=$1 && shift
    echo "/data/repos/${repo_name}"
}

locate_resources_repo_dir() {
    local repo_name=$1 && shift
    echo "/data/resources/${repo_name}"
}

################################# REF GENOME ###################################

locate_ref_genome_37_fasta_file() {
    echo "/data/resources/bucket/reference_genome/37/Homo_sapiens.GRCh37.GATK.illumina.fasta"
}

locate_ref_genome_38_fasta_file() {
    echo "/data/resources/bucket/reference_genome/38/GCA_000001405.15_GRCh38_no_alt_analysis_set.fna"
}

locate_ref_genome_37_to_38_chain() {
    echo "/data/resources/crunch/reference_genome_liftover/hg19ToHg38.over.chain"
}

locate_ref_genome_38_to_37_chain() {
    echo "/data/resources/crunch/reference_genome_liftover/hg38ToHg19.over.chain"
}

##################################  METRICS ####################################

locate_wgs_metrics() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local metrics_file=""
    local metrics_dir_pre_v5=${run_dir}/QCStats
    local metrics_dir_v5=${run_dir}/${sample}/bam_metrics

    if [[ -d "${metrics_dir_pre_v5}" ]]; then
        metrics_file=$(find -L ${metrics_dir_pre_v5}/ -type f -name "${sample}*_WGSMetrics.txt")
    elif [[ -d "${metrics_dir_v5}" ]]; then
        metrics_file=$(find -L ${metrics_dir_v5}/ -type f -name "${sample}.wgsmetrics")
        # Some runs have new structure but still old file names.
        if [[ -z ${metrics_file} ]]; then
            metrics_file=$(find -L ${metrics_dir_v5}/ -type f -name "${sample}*_WGSMetrics.txt")
        fi
    fi

    if [[ -z "${metrics_file}" ]]; then
        error "Unable to locate metrics file for ${sample} in run ${run_dir}."
    fi

    echo ${metrics_file}
}

locate_flagstats() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local flagstats_file=""
    local flagstats_dir_pre_v5=${run_dir}/${sample}/mapping
    local flagstats_dir_v5=${run_dir}/${sample}/flagstat

    if [[ -d "${flagstats_dir_pre_v5}" ]]; then
        flagstats_file=$(find -L ${flagstats_dir_pre_v5}/ -type f -name "${sample}*.realigned.flagstat")
    elif [[ -d "${flagstats_dir_v5}" ]]; then
        flagstats_file=$(find -L ${flagstats_dir_v5}/ -type f -name "${sample}.flagstat")
        # Some runs have new structure but still old file names.
        if [[ -z ${flagstats_file} ]]; then
            flagstats_file=$(find -L ${flagstats_dir_v5}/ -type f -name "${sample}*.realigned.flagstat")
        fi
    fi

    if [[ -z "${flagstats_file}" ]]; then
        error "Unable to locate flagstats file for ${sample} in run ${run_dir}."
    fi

    echo ${flagstats_file}
}

##################################### AMBER ####################################

locate_amber_directory() {
    local run_dir=$1
    local amber_dir=${run_dir}/amber

    if [[ ! -d "${amber_dir}" ]]; then
        error "Unable to locate AMBER directory in ${run_dir}."
    fi

    echo ${amber_dir}
}

###################################### SAGE ####################################

locate_sage_somatic_variants() {
    local run_dir=$1
    local sage_dir_old=${run_dir}/sage
    local sage_dir=${run_dir}/sage_somatic

    local somatic_vcf=""

    if [[ -d "${sage_dir}" ]]; then
        somatic_vcf=$(find -L ${sage_dir}/ -type f -name "*.sage.somatic.filtered.vcf.gz")
    elif [[ -d "${sage_dir_old}" ]]; then
        somatic_vcf=$(find -L ${sage_dir_old}/ -type f -name "*.sage.somatic.filtered.vcf.gz")
    fi

    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate sage somatic variants in ${run_dir}."
    fi
    echo ${somatic_vcf}
}

locate_sage_bqr_plot() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local sage_dir_old=${run_dir}/sage
    local sage_dir=${run_dir}/sage_somatic

    local bqr_plot=""

    if [[ -d "${sage_dir}" ]]; then
        bqr_plot=$(find -L ${sage_dir}/ -type f -name "${sample}.sage.bqr.png")
    elif [[ -d "${sage_dir_old}" ]]; then
        bqr_plot=$(find -L ${sage_dir_old}/ -type f -name "${sample}.sage.bqr.png")
    fi

    if [[ -z "${bqr_plot}" ]]; then
        error "Unable to locate BQR plot for ${sample} in ${run_dir}."
    fi
    echo ${bqr_plot}
}

locate_sage_germline_gene_coverage() {
    local run_dir=$1 && shift

    local sage_dir=${run_dir}/sage_germline

    local gene_coverage_tsv=""

    if [[ -d "${sage_dir}" ]]; then
        gene_coverage_tsv=$(find -L ${sage_dir}/ -type f -name "*.sage.gene.coverage.tsv")
    fi

    if [[ -z "${gene_coverage_tsv}" ]]; then
        error "Unable to locate SAGE germline gene coverage in ${run_dir}."
    fi
    echo ${gene_coverage_tsv}
}

##################################### PURPLE ###################################

locate_purple_purity() {
    local run_dir=$1
    local purple_purity_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.purple.purity.tsv")
    if [[ -z "${purple_purity_tsv}" ]]; then
        error "Unable to locate purple purity in ${run_dir}."
    fi
    echo ${purple_purity_tsv}
}

locate_purple_pilot_purity() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_purity_tsv=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        purple_purity_tsv=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.purity.tsv")
    fi

    if [[ -z "${purple_purity_tsv}" ]]; then
        error "Unable to locate purple pilot purity in ${run_dir}."
    fi
    echo ${purple_purity_tsv}
}

locate_purple_qc() {
    local run_dir=$1
    local purple_qc_file=$(find -L ${run_dir}/purple/ -type f -name "*.purple.qc")
    if [[ -z "${purple_qc_file}" ]]; then
        error "Unable to locate purple qc in ${run_dir}."
    fi
    echo ${purple_qc_file}
}

locate_purple_somatic_driver_catalog() {
    local run_dir=$1
    local purple_somatic_driver_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.driver.catalog.somatic.tsv")
    if [[ -z "${purple_somatic_driver_tsv}" ]]; then
        error "Unable to locate purple somatic driver catalog in ${run_dir}."
    fi
    echo ${purple_somatic_driver_tsv}
}

locate_purple_somatic_copynumber_tsv() {
    local run_dir=$1
    local purple_somatic_copynumber_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.somatic.tsv")
    if [[ -z "${purple_somatic_copynumber_tsv}" ]]; then
        error "Unable to locate purple somatic copynumbers in ${run_dir}."
    fi
    echo ${purple_somatic_copynumber_tsv}
}

locate_purple_gene_copynumbers() {
    local run_dir=$1
    local purple_gene_copynumbers=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.gene.tsv")
    if [[ -z "${purple_gene_copynumbers}" ]]; then
        error "Unable to locate purple gene copynumbers in ${run_dir}."
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_pilot_gene_copynumbers() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_gene_copynumbers=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        purple_gene_copynumbers=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.cnv.gene.tsv")
    fi

    if [[ -z "${purple_gene_copynumbers}" ]]; then
        error "Unable to locate purple pilot gene copynumbers in ${run_dir}."
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_somatic_variants() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.somatic.vcf.gz")
    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate purple somatic variants in ${run_dir}."
    fi
    echo ${somatic_vcf}
}

locate_purple_pilot_somatic_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local somatic_vcf=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        somatic_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.somatic.vcf.gz")
    fi

    if [[ -z "${somatic_vcf}" ]]; then
        error "Unable to locate purple pilot somatic variants in ${run_dir}."
    fi

    echo ${somatic_vcf}
}

locate_purple_plot_directory() {
    local run_dir=$1
    local purple_plot_dir="${run_dir}/purple/plot"
    if [[ ! -d "${purple_plot_dir}" ]]; then
        error "Unable to locate purple plot directory in ${run_dir}."
    fi
    echo ${purple_plot_dir}
}

locate_purple_circos_plot() {
    local run_dir=$1
    local circos_plot=$(find -L ${run_dir}/purple/plot/ -type f -name "*.circos.png")
    if [[ -z "${circos_plot}" ]]; then
        error "Unable to locate purple circos plot in ${run_dir}."
    fi
    echo ${circos_plot}
}

locate_purple_pilot_circos_plot() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local circos_plot=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        circos_plot=$(find -L ${purple_pilot_dir}/plot/ -type f -name "*.circos.png")
    fi

    if [[ -z "${circos_plot}" ]]; then
        error "Unable to locate purple pilot circos plot in ${run_dir}."
    fi
    echo ${circos_plot}
}

################################ PURPLE Germline ###############################

locate_purple_germline_variants() {
    local run_dir=$1
    local germline_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.germline.vcf.gz")
    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate purple germline variants in ${run_dir}."
    fi
    echo ${germline_vcf}
}

locate_purple_pilot_germline_variants() {
    local run_dir=$1
    local purple_dir=${run_dir}/purple_pilot

    local germline_vcf=""

    if [[ -d "${purple_dir}" ]]; then
        germline_vcf=$(find -L ${purple_dir} -type f -name "*.purple.germline.vcf.gz")
    fi

    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate purple pilot germline variants in ${run_dir}."
    fi
    echo ${germline_vcf}
}

locate_purple_germline_driver_catalog() {
    local run_dir=$1
    local purple_germline_driver_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.driver.catalog.germline.tsv")
    if [[ -z "${purple_germline_driver_tsv}" ]]; then
        error "Unable to locate purple germline driver catalog in ${run_dir}."
    fi
    echo ${purple_germline_driver_tsv}
}

############################ Structural Variants ###############################

locate_purple_structural_variants() {
    local run_dir=$1
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate purple structural variants in ${run_dir}."
    fi
    echo ${structural_vcf}
}

locate_purple_pilot_structural_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local structural_vcf=""

    if [[ -d "${purple_pilot_dir}" ]]; then
        structural_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.sv.vcf.gz")
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate purple pilot structural variants in ${run_dir}."
    fi
    echo ${structural_vcf}
}

locate_gripss_structural_variants() {
    local run_dir=$1
    local gripss_dir="${run_dir}/gripss_somatic"
    [[ -d "${gripss_dir}" ]] || gripss_dir="${run_dir}/gripss"

    local structural_vcf=""
    if [[ -d "${gripss_dir}" ]]; then
        structural_vcf=$(find -L ${gripss_dir}/ -type f -name "*.gripss.somatic.filtered.vcf.gz")
        # With GRIPSS 2.0 the name has changed from "somatic filtered" to "filtered somatic"
        if [[ -z ${structural_vcf} ]]; then
            structural_vcf=$(find -L ${gripss_dir}/ -type f -name "*.gripss.filtered.somatic.vcf.gz")
        fi
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate GRIPSS structural variants in ${run_dir}."
    fi
    echo ${structural_vcf}
}

locate_gripss_recovery_candidates() {
    local run_dir=$1
    local gripss_dir="${run_dir}/gripss_somatic"
    [[ -d "${gripss_dir}" ]] || gripss_dir="${run_dir}/gripss"

    local structural_vcf=""
    if [[ -d "${gripss_dir}" ]]; then
        structural_vcf=$(find -L ${gripss_dir}/ -type f -name "*.gripss.somatic.vcf.gz")
    fi

    if [[ -z "${structural_vcf}" ]]; then
        error "Unable to locate GRIPSS recovery variants in ${run_dir}."
    fi
    echo ${structural_vcf}
}

##################################### LINX #####################################

locate_linx_fusions() {
    local run_dir=$1
    local fusion_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.fusion.tsv")
    if [[ -z "${fusion_tsv}" ]]; then
        error "Unable to locate linx fusions tsv in ${run_dir}."
    fi
    echo ${fusion_tsv}
}

locate_linx_breakends() {
    local run_dir=$1
    local disruption_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.breakend.tsv")
    if [[ -z "${disruption_tsv}" ]]; then
        error "Unable to locate linx disruptions tsv in ${run_dir}."
    fi
    echo ${disruption_tsv}
}

locate_linx_driver_catalog() {
    local run_dir=$1
    local driver_catalog_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.driver.catalog.tsv")
    if [[ -z "${driver_catalog_tsv}" ]]; then
        error "Unable to locate linx drivers catalog in ${run_dir}."
    fi
    echo ${driver_catalog_tsv}
}

locate_linx_drivers() {
    local run_dir=$1
    local driver_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.drivers.tsv")
    if [[ -z "${driver_tsv}" ]]; then
        error "Unable to locate linx drivers in ${run_dir}."
    fi
    echo ${driver_tsv}
}

locate_linx_plot_directory() {
    local run_dir=$1
    local linx_plot_dir="${run_dir}/linx/plot"
    echo ${linx_plot_dir}
}

locate_linx_svs() {
    local run_dir=$1
    local svs_tsv=$(find -L ${run_dir}/linx/ -type f -name "*.linx.svs.tsv")
    if [[ -z "${svs_tsv}" ]]; then
        error "Unable to locate linx svs tsv in ${run_dir}."
    fi
    echo ${svs_tsv}
}

##################################### Sigs #####################################

locate_sigs_dir() {
    local run_dir=$1
    if [[ ! -d ${run_dir} ]]; then
        error "Run dir is not a directory: ${run_dir}"
    fi
    echo ${run_dir}/sigs
}

locate_sigs_pilot_dir() {
    local run_dir=$1
    if [[ ! -d ${run_dir} ]]; then
        error "Run dir is not a directory: ${run_dir}"
    fi
    echo ${run_dir}/sigs_pilot
}

##################################### GATK #####################################

locate_gatk_germline_variants() {
    local run_dir=$1 && shift
    local ref_sample=$1 && shift

    local germline_vcf=""
    local gatk_dir=${run_dir}/${ref_sample}/germline_caller

    if [[ -d ${gatk_dir} ]]; then
        germline_vcf=$(find -L ${gatk_dir}/ -type f -name "*.germline.vcf.gz")
        # Some runs have GATK calls in a new place but with old file name.
        if [[ -z ${germline_vcf} ]]; then
            germline_vcf=$(find -L ${gatk_dir}/ -type f -name "*.annotated.vcf.gz")
        fi
    fi

    if [[ -z ${germline_vcf} ]]; then
        # Probably no v5 pipeline done yet
        germline_vcf=$(find -L ${run_dir}/germline_caller/*/ -type f -name "*.annotated.vcf.gz")
    fi

    if [[ -z "${germline_vcf}" ]]; then
        error "Unable to locate germline VCF in ${run_dir}."
    fi

    echo ${germline_vcf}
}

#################################### PEACH #####################################

locate_peach_venv_dir() {
    echo "$(locate_peach_resource_dir)/venv/peach"
}

locate_peach_requirements() {
    echo "$(locate_repo_dir "peach")/requirements.txt"
}

locate_peach_pilot_output_dir() {
    local run_dir=$1
    echo "${run_dir}/peach_pilot"
}

locate_peach_pilot_calls() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_calls_tsv=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_calls_tsv=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.calls.tsv")
    fi

    if [[ -z "${peach_pilot_calls_tsv}" ]]; then
        error "Unable to locate pilot PEACH calls tsv in ${run_dir}."
    fi

    echo "${peach_pilot_calls_tsv}"
}

locate_peach_pilot_genotype() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_genotype_tsv=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_genotype_tsv=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.genotype.tsv")
    fi

    if [[ -z "${peach_pilot_genotype_tsv}" ]]; then
        error "Unable to locate pilot PEACH genotype tsv in ${run_dir}."
    fi

    echo "${peach_pilot_genotype_tsv}"
}

locate_peach_prod_output_dir() {
    local run_dir=$1
    echo "${run_dir}/peach"
}

locate_peach_prod_calls() {
    local run_dir=$1
    local peach_prod_output_dir
    peach_prod_output_dir=$(locate_peach_prod_output_dir "${run_dir}")

    local peach_prod_calls_tsv=""

    if [[ -d "${peach_prod_output_dir}" ]]; then
        peach_prod_calls_tsv=$(find -L "${peach_prod_output_dir}" -type f -name "*.peach.calls.tsv")
    fi

    if [[ -z "${peach_prod_calls_tsv}" ]]; then
        error "Unable to locate prod PEACH calls tsv in ${run_dir}."
    fi

    echo "${peach_prod_calls_tsv}"
}

locate_peach_prod_genotype() {
    local run_dir=$1
    local peach_prod_output_dir
    peach_prod_output_dir=$(locate_peach_prod_output_dir "${run_dir}")

    local peach_prod_genotype_tsv=""

    if [[ -d "${peach_prod_output_dir}" ]]; then
        peach_prod_genotype_tsv=$(find -L "${peach_prod_output_dir}" -type f -name "*.peach.genotype.tsv")
    fi

    if [[ -z "${peach_prod_genotype_tsv}" ]]; then
        error "Unable to locate prod PEACH genotype tsv in ${run_dir}."
    fi

    echo "${peach_prod_genotype_tsv}"
}

locate_peach_pilot_vcf() {
    local run_dir=$1
    local peach_pilot_output_dir
    peach_pilot_output_dir=$(locate_peach_pilot_output_dir "${run_dir}")

    local peach_pilot_vcf=""

    if [[ -d "${peach_pilot_output_dir}" ]]; then
        peach_pilot_vcf=$(find -L "${peach_pilot_output_dir}" -type f -name "*.peach.filtered.vcf")
    fi

    if [[ -z "${peach_pilot_vcf}" ]]; then
        error "Unable to locate pilot PEACH VCF file in ${run_dir}."
    fi

    echo "${peach_pilot_vcf}"
}

locate_peach_genotype_prod_tsv() {
    local run_dir=$1
    local peach_genotype=$(find -L ${run_dir}/peach/ -type f -name "*.peach.genotype.tsv")
    if [[ -z "${peach_genotype}" ]]; then
        error "Unable to locate peach genotype tsv in ${run_dir}."
    fi
    echo ${peach_genotype}
}

#################################### CHORD #####################################

locate_chord_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord/ -type f -name "*_chord_prediction.txt")
    if [[ -z "${chord_prediction_file}" ]]; then
        error "Unable to locate CHORD prediction file in ${run_dir}."
    fi
    echo ${chord_prediction_file}
}

locate_chord_pilot_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord_pilot/ -type f -name "*_chord_prediction.txt")
    if [[ -z "${chord_prediction_file}" ]]; then
        error "Unable to locate pilot CHORD prediction file in ${run_dir}."
    fi
    echo ${chord_prediction_file}
}

################################ VIRUSBreakend #################################

locate_virus_breakend_tsv() {
    local run_dir=$1
    local virus_breakend_tsv=$(find -L ${run_dir}/virusbreakend/ -type f -name "*.virusbreakend.vcf.summary.tsv")
    if [[ -z "${virus_breakend_tsv}" ]]; then
        error "Unable to locate virus breakend conclusion tsv in ${run_dir}."
    fi
    echo ${virus_breakend_tsv}
}

################################ VIRUS Interpreter #################################

locate_virus_annotation_tsv_pilot() {
    local run_dir=$1
    local virus_annotation_tsv=$(find -L ${run_dir}/virusbreakend_pilot/ -type f -name "*.virus.annotated.tsv")
    if [[ -z "${virus_annotation_tsv}" ]]; then
        error "Unable to locate pilot virus annotation TSV in ${run_dir}."
    fi
    echo ${virus_annotation_tsv}
}

locate_virus_annotation_tsv() {
    local run_dir=$1
    local virus_annotation_tsv=$(find -L ${run_dir}/virusbreakend/ -type f -name "*.virus.annotated.tsv")
    if [[ -z "${virus_annotation_tsv}" ]]; then
        error "Unable to locate virus annotation TSV in ${run_dir}."
    fi
    echo ${virus_annotation_tsv}
}

################################ iClusion importer #################################

locate_pilot_iclusion_importer_trial_tsv() {
    echo "/data/resources/custom/iclusion/iclusion_trials_pilot.tsv"
}

locate_prod_iclusion_importer_trial_tsv() {
    echo "/data/resources/custom/iclusion/iclusion_trials_prod.tsv"
}
################################## CUPPA #######################################

locate_cuppa_result_csv() {
    local run_dir=$1
    local result_csv=$(find -L ${run_dir}/cuppa/ -type f -name "*.cup.data.csv")
    if [[ -z "${result_csv}" ]]; then
        error "Unable to locate cuppa result csv in ${run_dir}."
    fi
    echo ${result_csv}
}

locate_cuppa_dna_rna_result_csv() {
    local run_dir=$1
    local result_csv=$(find -L ${run_dir}/cuppa_dna_rna/ -type f -name "*.cup.data.csv")
    if [[ -z "${result_csv}" ]]; then
        error "Unable to locate cuppa dna-rna result csv in ${run_dir}."
    fi
    echo ${result_csv}
}

locate_cuppa_summary_plot() {
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa/ -type f -name "*.cup.report.summary.png")
    if [[ -z "${plot}" ]]; then
        error "Unable to locate cuppa summary plot in ${run_dir}."
    fi
    echo ${plot}
}


locate_cuppa_dna_rna_summary_plot() {
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa_dna_rna/ -type f -name "*.cup.report.summary.png")
    if [[ -z "${plot}" ]]; then
        error "Unable to locate cuppa dna-rna summary plot in ${run_dir}."
    fi
    echo ${plot}
}

locate_cuppa_feature_plot() {
    # Feature plot is optional so no warn if it cannot be found.
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa/ -type f -name "*.cup.report.features.png")
    echo ${plot}
}

locate_cuppa_dna_rna_feature_plot() {
    # Feature plot is optional so no warn if it cannot be found.
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa_dna_rna/ -type f -name "*.cup.report.features.png")
    echo ${plot}
}

locate_cuppa_conclusion_txt() {
    local run_dir=$1
    local conclusion_txt=$(find -L ${run_dir}/cuppa/ -type f -name "*.cuppa.conclusion.txt")
    if [[ -z "${conclusion_txt}" ]]; then
        error "Unable to locate cuppa conclusion in ${run_dir}."
    fi
    echo ${conclusion_txt}
}

locate_cuppa_conclusion_plot() {
    local run_dir=$1
    local plot=$(find -L ${run_dir}/cuppa/ -type f -name "*.cuppa.chart.png")
    if [[ -z "${plot}" ]]; then
        error "Unable to locate cuppa plot in ${run_dir}."
    fi
    echo ${plot}
}

################################### PROTECT ####################################

locate_protect_evidence() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT evidence tsv in ${run_dir}."
    fi
    echo ${protect_evidence_tsv}
}

locate_protect_evidence_pilot_actin() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect_pilot_actin/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT pilot ACTIN evidence tsv in ${run_dir}."
    fi
    echo ${protect_evidence_tsv}
}

locate_protect_evidence_pilot_ckb() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect_pilot_ckb/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT pilot CKB evidence tsv in ${run_dir}."
    fi
    echo ${protect_evidence_tsv}
}

locate_protect_evidence_pilot_vicc() {
    local run_dir=$1
    local protect_evidence_tsv=$(find -L ${run_dir}/protect_pilot_vicc/ -type f -name "*.protect.tsv")
    if [[ -z "${protect_evidence_tsv}" ]]; then
        error "Unable to locate PROTECT pilot VICC evidence tsv in ${run_dir}."
    fi
    echo ${protect_evidence_tsv}
}

#################################### ORANGE ####################################

locate_orange_json() {
    local run_dir=$1
    local orange_json=""

    local orange_dir=${run_dir}/orange
    if [[ -d ${orange_dir} ]]; then
        orange_json=$(find -L ${orange_dir}/ -type f -name "*.orange.json")
    fi

    if [[ -z "${orange_json}" ]]; then
        error "Unable to locate ORANGE json in ${run_dir}."
    fi

    echo ${orange_json}
}

##################################### LIMS #####################################

locate_reporting_db_generate_tsv() {
    local reporting_db_tsv=/data/ops/lims/prod/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate reporting db TSV."
    fi
    echo ${reporting_db_tsv}
}

locate_reporting_db_sharing_tsv() {
    local reporting_db_tsv=/data/ops/lims/prod/final_sharing_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate reporting db TSV."
    fi
    echo ${reporting_db_tsv}
}

locate_reporting_db_tsv_pilot() {
    local reporting_db_tsv=/data/ops/lims/pilot/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate pilot reporting db TSV."
    fi
    echo ${reporting_db_tsv}
}

locate_reporting_db_tsv() {
    local reporting_db_tsv=/data/ops/lims/prod/reporting_db.tsv
    if [[ ! -f "${reporting_db_tsv}" ]]; then
        error "Unable to locate reporting db TSV."
    fi
    echo ${reporting_db_tsv}
}

locate_shallow_tsv() {
    local shallow_seq_tsv=/data/ops/lims/prod/shallow_seq_purity.tsv
    if [[ ! -f "${shallow_seq_tsv}" ]]; then
        error "Unable to locate shallow seq TSV."
    fi
    echo ${shallow_seq_tsv}
}

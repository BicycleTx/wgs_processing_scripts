#!/usr/bin/env bash

source locate_files
source metadata_functions

run_dir=$1 && shift

if [[ -z "${run_dir}" ]]; then
    echo "[ERROR] No run dir configured. Exiting"
    exit 1
fi

ref_sample=$(load_ref_sample_from_metadata ${run_dir})
tumor_sample=$(load_tumor_sample_from_metadata ${run_dir})

echo "[INFO] Files that must exist in every circumstance"

ref_sample_metrics_file=$(locate_wgs_metrics ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then echo "[INFO]  WGSMetrics Ref Sample: ${ref_sample_metrics_file}"; fi

tumor_sample_metrics_file=$(locate_wgs_metrics ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then echo "[INFO]  WGSMetrics Tumor Sample: ${tumor_sample_metrics_file}"; fi

ref_sample_flagstats=$(locate_flagstats ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then echo "[INFO]  Flagstats Ref Sample: ${ref_sample_flagstats}"; fi

tumor_sample_flagstats=$(locate_flagstats ${run_dir} ${tumor_sample})
if [[ $? = 0 ]]; then echo "[INFO]  Flagstats Tumor Sample: ${tumor_sample_flagstats}"; fi

sage_somatics=$(locate_sage_somatics ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  SAGE Somatic VCF: ${sage_somatics}"; fi

purple_somatics=$(locate_purple_somatics ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Somatic VCF: ${purple_somatics}"; fi

purple_purity=$(locate_purple_purity ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Purity: ${purple_purity}"; fi

purple_qc=$(locate_purple_qc ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple QC: ${purple_qc}"; fi

purple_drivers=$(locate_purple_drivers_somatic ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Drivers: ${purple_drivers}"; fi

purple_gene_copynumbers=$(locate_purple_gene_copynumbers ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Gene Copy Numbers: ${purple_gene_copynumbers}"; fi

purple_circos_plot=$(locate_purple_circos_plot ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Circos Plot: ${purple_circos_plot}"; fi

purple_structural_variants=$(locate_purple_structural_variants ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Structural VCF: ${purple_structural_variants}"; fi

gripss_structural_variants=$(locate_gripss_structural_variants ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  GRIPSS Filtered Structural VCF: ${gripss_structural_variants}"; fi

gripss_recovery_candidates=$(locate_gripss_recovery_candidates ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  GRIPSS Recovery Candidates VCF: ${gripss_recovery_candidates}"; fi

linx_reported_fusions=$(locate_linx_fusions ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  LINX Fusions: ${linx_reported_fusions}"; fi

linx_reported_breakends=$(locate_linx_breakends ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  LINX Disruptions: ${linx_reported_breakends}"; fi

linx_viral_insertions=$(locate_linx_viral_insertions ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  LINX Viral Insertions: ${linx_viral_insertions}"; fi

linx_drivers=$(locate_linx_drivers ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  LINX Drivers: ${linx_drivers}"; fi

germline_variants=$(locate_germline_variants ${run_dir} ${ref_sample})
if [[ $? = 0 ]]; then echo "[INFO]  Germline Variants: ${germline_variants}"; fi

reportable_bachelor_variants=$(locate_reportable_bachelor_variants ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Reportable Bachelor Variants: ${reportable_bachelor_variants}"; fi

chord_prediction=$(locate_chord_prediction ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  CHORD Prediction File: ${chord_prediction}"; fi

amber_dir=$(locate_amber_directory ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  AMBER directory: ${amber_dir}"; fi

echo ""
echo "[INFO] Files that are generated in pilot setting"

pgx_pilot_calls=$(locate_pgx_pilot_calls ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  PGx Pilot Calls: ${pgx_pilot_calls}"; fi

pgx_pilot_genotype=$(locate_pgx_pilot_genotype ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  PGx Pilot Genotype: ${pgx_pilot_genotype}"; fi

purple_pilot_somatic_vcf=$(locate_purple_pilot_somatics ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Pilot Somatic VCF: ${purple_pilot_somatic_vcf}"; fi

purple_pilot_purity=$(locate_purple_pilot_purity ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Pilot Purity: ${purple_pilot_purity}"; fi

purple_pilot_gene_copynumbers=$(locate_purple_pilot_gene_copynumbers ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Pilot Gene Copy Numbers: ${purple_pilot_gene_copynumbers}"; fi

purple_pilot_circos_plot=$(locate_purple_pilot_circos_plot ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Pilot Circos Plot: ${purple_pilot_circos_plot}"; fi

purple_pilot_structural_variants=$(locate_purple_pilot_structural_variants ${run_dir})
if [[ $? = 0 ]]; then echo "[INFO]  Purple Pilot Structural VCF: ${purple_pilot_structural_variants}"; fi
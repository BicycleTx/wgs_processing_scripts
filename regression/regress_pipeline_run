#!/bin/bash

TABIX_PATH=/data/common/tools/tabix_v0.2.6
RTG_PATH=/data/common/software
SDF_PATH=/data/common/dbs/RTGSDF_GRCh37

run=$1
runvcf=$2
truthrun=$3
truthrunvcf=$4

refsample=$5
tumorsample=$6
out=$7

echo -e "Starting regression check between ${run} and ${truthrun}"
mkdir ${out}

# KODU: Step 1: Assess final BAMs are identical. Same version of BWA with same nr of threads should yield identical mapping
echo -e "  Diffing reference BAMs"
refbam=${refsample}/mapping/${refsample}_dedup.realigned.bam
diff ${run}/${refbam} ${truthrun}/${refbam} > ${out}/refsamplediff

if [ -s ${out}/refsamplediff ]; then
    echo -e "    WARN: Ref samples are different!"
fi

echo -e "  Diffing tumor BAMs"
tumorbam=${tumorsample}/mapping/${tumorsample}_dedup.realigned.bam
diff ${run}/${tumorbam} ${truthrun}/${tumorbam} > ${out}/tumorsamplediff

if [ -s ${out}/tumorsamplediff ]; then
    echo -e "    WARN: Tumor samples are different!"
fi

# KODU: Step 2: Assess final somatic variant files are identical, after removing the headers (lines starting with "#")
grep -v "#" ${run}/somaticVariants/${refsample}_${tumorsample}/${refsample}_${tumorsample}_merged_somatics_annotated.vcf > ${out}/run_headerless_somatics.vcf
grep -v "#" ${truthrun}/somaticVariants/${refsample}_${tumorsample}/${refsample}_${tumorsample}_merged_somatics_snpEff_dbSNP_Cosmicv76.vcf > ${out}/truthrun_headerless_somatics.vcf
echo -e "  Diffing headerless somatic VCFs"
diff ${out}/run_headerless_somatics.vcf ${out}/truthrun_headerless_somatics.vcf > ${out}/somaticvariantdiff

if [ -s ${out}/somaticvariantdiff ]; then
    echo -e "    WARN: Somatic variants are different!"
fi

# KODU: Step 3: Assess germline variant files are identical using rtg vcfeval.
# This tool has a known issue with evaluating overlapping variant regions so has to be called multiple times.
# After 3 iterations, we accept a precision and sensitivity of at minimum 0.9998

rungermlinevcf=${runvcf}.filtered_variants.annotated.vcf
truthrungermlinevcf=${truthrunvcf}.filtered_variants.annotated.vcf

# KODU: Step 3.1: Generate gz and tbi needed for rtg tools

echo -e "  Generating zipped and indexed germline VCF for ${run}"
${TABIX_PATH}/bgzip -c ${run}/${rungermlinevcf} > ${out}/run_${rungermlinevcf}.gz
${TABIX_PATH}/tabix ${out}/run_${rungermlinevcf}.gz

echo -e "  Generating zipped and indexed germline VCF for ${truthrun}"
${TABIX_PATH}/bgzip -c ${truthrun}/${truthrungermlinevcf} > ${out}/truthrun_${truthrungermlinevcf}.gz
${TABIX_PATH}/tabix ${out}/truthrun_${truthrungermlinevcf}.gz

# KODU: Step 3.2: Run RTG vcfeval 3 times for ref and calculate precision / sensitivity.

echo -e "  Starting RTG vcfeval for ${refsample}"
${RTG_PATH}/rtg vcfeval -b ${out}/run_${rungermlinevcf}.gz -c ${out}/truthrun_${truthrungermlinevcf}.gz -o ${out}/Round1${refsample} -t ${SDF_PATH} --ref-overlap --sample=${refsample} > ${out}/${refsample}_round1_rtg_vcfeval_log
${RTG_PATH}/rtg vcfeval -b ${out}/Round1${refsample}/fp.vcf.gz -c ${out}/Round1${refsample}/fn.vcf.gz -o ${out}/Round2${refsample} -t ${SDF_PATH} --ref-overlap --sample=${refsample} > ${out}/${refsample}_round2_rtg_vcfeval_log
${RTG_PATH}/rtg vcfeval -b ${out}/Round2${refsample}/fp.vcf.gz -c ${out}/Round2${refsample}/fn.vcf.gz -o ${out}/Round3${refsample} -t ${SDF_PATH} --ref-overlap --sample=${refsample} > ${out}/${refsample}_round3_rtg_vcfeval_log

true_pos=$(awk '$1 == "None" { total += $2 } END { print total }' ${out}/${refsample}_round1_rtg_vcfeval_log ${out}/${refsample}_round2_rtg_vcfeval_log ${out}/${refsample}_round3_rtg_vcfeval_log)
false_pos=$(awk '$1 == "None" { print $3 }' ${out}/${refsample}_round3_rtg_vcfeval_log)
false_neg=$(awk '$1 == "None" { print $4 }' ${out}/${refsample}_round3_rtg_vcfeval_log)
precision=$(echo "$true_pos / ( $true_pos + $false_pos)" | bc -l)
sensitivity=$(echo "$true_pos / ( $true_pos + $false_neg)" | bc -l)

echo -e "  Ref sample germline precision: " ${precision}
echo -e "  Ref sample germline sensitivity: " ${sensitivity}

# KODU: Step 3.2.2: Do the same for tumor sample.

echo -e "  Starting RTG vcfeval for ${tumorsample}"
${RTG_PATH}/rtg vcfeval -b ${out}/run_${rungermlinevcf}.gz -c ${out}/truthrun_${truthrungermlinevcf}.gz -o ${out}/Round1${tumorsample} -t ${SDF_PATH} --ref-overlap --sample=${tumorsample} > ${out}/${tumorsample}_round1_rtg_vcfeval_log
${RTG_PATH}/rtg vcfeval -b ${out}/Round1${refsample}/fp.vcf.gz -c ${out}/Round1${refsample}/fn.vcf.gz -o ${out}/Round2${tumorsample} -t ${SDF_PATH} --ref-overlap --sample=${tumorsample} > ${out}/${tumorsample}_round2_rtg_vcfeval_log
${RTG_PATH}/rtg vcfeval -b ${out}/Round2${refsample}/fp.vcf.gz -c ${out}/Round2${refsample}/fn.vcf.gz -o ${out}/Round3${tumorsample} -t ${SDF_PATH} --ref-overlap --sample=${tumorsample} > ${out}/${tumorsample}_round3_rtg_vcfeval_log

true_pos=$(awk '$1 == "None" { total += $2 } END { print total }' ${out}/${tumorsample}_round1_rtg_vcfeval_log ${out}/${tumorsample}_round2_rtg_vcfeval_log ${out}/${tumorsample}_round3_rtg_vcfeval_log)
false_pos=$(awk '$1 == "None" { print $3 }' ${out}/${tumorsample}_round3_rtg_vcfeval_log)
false_neg=$(awk '$1 == "None" { print $4 }' ${out}/${tumorsample}_round3_rtg_vcfeval_log)
precision=$(echo "$true_pos / ( $true_pos + $false_pos)" | bc -l)
sensitivity=$(echo "$true_pos / ( $true_pos + $false_neg)" | bc -l)

echo -e "  Tumor sample germline precision: " ${precision}
echo -e "  Tumor sample germline sensitivity: " ${sensitivity}


#!/usr/bin/env bash

ini=$1
pip=$2

if [ -z ${ini} ]; then echo "[ERROR] No ini given" & exit 1; fi
if [ -z ${pip} ]; then echo "[ERROR] No pipeline version given" & exit 1; fi

## Param check
ini_count=$(query_sbp_api -type inis -filter "name=${ini}" -exact | grep -cv "^#")
if [ ${ini_count} != 1 ]; then
    echo "[ERROR] Non-existing ini ${ini})?" && exit 1
fi
pip_count=$(query_sbp_api -type stacks -filter "revision=${pip}" -exact | grep -cv "^#")
if [ ${pip_count} -lt 1 ]; then
    echo "[ERROR] Non-existing pipeline version (${pip})?" && exit 1
fi

## Define all paths used by script
find_dirs="/data/cpct/runs/ /data/core/runs/ /data/schuberg/processed_runs/ /data/schuberg/downloaded_runs/ "
find_dirs_fail="/data/schuberg/qc_fail_runs"
download_script="process_finished_run"
download_script_fail="download_qc_fail_run"

full_run_inis="Somatic.ini|CPCT.ini"
all_tumor_samples_with_valid_run=$(query_sbp_api \
    -type runs \
    -filter "bucket=hmf-output" \
    -filter "status=Validated" \
    -json | jq -r '.[].tumor_sample')

all_tumor_samples_with_success_run=$(query_sbp_api \
    -type runs \
    -filter "ini=${full_run_inis}" \
    -filter "bucket=hmf-output" \
    -filter "status=Success" \
    -json | jq -r '.[].tumor_sample')

all_tumor_samples_with_processing_run=$(query_sbp_api \
    -type runs \
    -filter "ini=${full_run_inis}" \
    -filter "bucket=hmf-output" \
    -filter "status=Processing" \
    -json | jq -r '.[].tumor_sample')

all_tumor_samples_with_waiting_run=$(query_sbp_api \
    -type runs \
    -filter "ini=${full_run_inis}" \
    -filter "bucket=hmf-output" \
    -filter "status=Waiting" \
    -json | jq -r '.[].tumor_sample')

echo "## Failed runs with ini ${ini} and pipeline ${pip} which are expected to exist on datastore"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=Failed" \
    -json | jq -r '.[].tumor_sample' | uniq | \
    while read failed_tumor_sample; do
        tumor_has_valid_run=$(echo ${all_tumor_samples_with_valid_run} | tr " " "\n" | grep -cw  ${failed_tumor_sample})
        tumor_has_success_run=$(echo ${all_tumor_samples_with_success_run} | tr " " "\n" | grep -cw  ${failed_tumor_sample})
        tumor_has_processing_run=$(echo ${all_tumor_samples_with_processing_run} | tr " " "\n" | grep -cw  ${failed_tumor_sample})
        tumor_has_waiting_run=$(echo ${all_tumor_samples_with_waiting_run} | tr " " "\n" | grep -cw  ${failed_tumor_sample})
        if [[ ${tumor_has_valid_run} == 0 && ${tumor_has_success_run} == 0 && ${tumor_has_processing_run} == 0 && ${tumor_has_waiting_run} == 0 ]]; then
            bucket_for_failed_tumor_sample=$(query_sbp_api \
                -type runs \
                -filter "tumor_sample=${failed_tumor_sample}" \
                -filter "ini=${ini}" \
                -filter "pipeline=${pip}" \
                -filter "status=Failed" \
                -exact -json | jq -r '.[].bucket' | grep "hmf-output" | tail -n 1)

            set_name_for_failed_tumor_sample=$(query_sbp_api \
                -type runs \
                -filter "tumor_sample=${failed_tumor_sample}" \
                -filter "ini=${ini}" \
                -filter "bucket=${bucket_for_failed_tumor_sample}" \
                -filter "pipeline=${pip}" \
                -filter "status=Failed" \
                -exact -json | jq -r '.[].name' | tail -n 1 )

            exists_in_success_run_dirs=$(find ${find_dirs} -maxdepth 1 -type d -name "${set_name_for_failed_tumor_sample}" | wc -l);
            exists_in_qcfail_run_dirs=$(find ${find_dirs_fail} -maxdepth 1 -type d -name "${set_name_for_failed_tumor_sample}" | wc -l)
            if [[ ${exists_in_success_run_dirs} == 0 && ${exists_in_qcfail_run_dirs} == 0 ]]; then
                echo "${download_script_fail} -s ${set_name_for_failed_tumor_sample} -b ${bucket_for_failed_tumor_sample}"
            elif [ ${exists_in_success_run_dirs} == 0 ]; then
                echo "# ${set_name_for_failed_tumor_sample} has failed on ${pip} and is already on datastore ${find_dirs_fail}"
            fi
        else
            echo "# ${failed_tumor_sample} has Failed on pip ${pip} but also has a Validated/Success/Processing/Waiting run so can be ignored."
        fi
    done | sort -r | uniq
echo ""

echo "## Success runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=Success" \
    -json | jq -r '.[].tumor_sample' | uniq | \
    while read success_tumor_sample; do
        tumor_has_valid_run=$(echo ${all_tumor_samples_with_valid_run} | tr " " "\n" | grep -cw  ${success_tumor_sample})
        tumor_has_processing_run=$(echo ${all_tumor_samples_with_processing_run} | tr " " "\n" | grep -cw  ${success_tumor_sample})
        tumor_has_waiting_run=$(echo ${all_tumor_samples_with_waiting_run} | tr " " "\n" | grep -cw  ${success_tumor_sample})
        if [[ ${tumor_has_valid_run} == 0 && ${tumor_has_processing_run} == 0 && ${tumor_has_waiting_run} == 0 ]]; then
            bucket_for_success_tumor_sample=$(query_sbp_api \
                -type runs \
                -filter "tumor_sample=${success_tumor_sample}" \
                -filter "ini=${ini}" \
                -filter "pipeline=${pip}" \
                -filter "status=Success" \
                -exact -json | jq -r '.[].bucket' | grep "hmf-output" | tail -n 1)

            set_name_for_success_tumor_sample=$(query_sbp_api \
                -type runs \
                -filter "tumor_sample=${success_tumor_sample}" \
                -filter "ini=${ini}" \
                -filter "bucket=${bucket_for_success_tumor_sample}" \
                -filter "pipeline=${pip}" \
                -filter "status=Success" -exact -json | jq -r '.[].name' | tail -n 1 )

            exists_in_success_run_dirs=$(find ${find_dirs} -maxdepth 1 -type d -name "${set_name_for_success_tumor_sample}" | wc -l);
		        if [ ${exists_in_success_run_dirs} == 0 ]; then
                echo "${download_script} -s ${set_name_for_success_tumor_sample}"
            fi
        else
            echo "# ${success_tumor_sample} has Success on pip ${pip} but also has a Validated/Processing/Waiting run so can be ignored."
        fi
    done | sort -r | uniq
echo ""

echo "## Validated runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=Validated" \
    -json | jq -r '.[].name' | \
    while read set_name; do
        exists_in_success_run_dirs=$(find ${find_dirs} -maxdepth 1 -type d -name "${set_name}" | wc -l);
        if [[ ${exists_in_success_run_dirs} == 0 ]]
        then
            echo "${download_script} ${set_name}"
        fi
    done | sort -r | uniq
echo ""

echo "## SnpCheck runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=SnpCheck" \
    -json | jq -r '.[].name' | \
    while read set_name; do
        exists_in_success_run_dirs=$(find ${find_dirs} -maxdepth 1 -type d -name "${set_name}" | wc -l);
        if [[ ${exists_in_success_run_dirs} == 0 ]]
        then
            echo "${download_script} ${set_name}"
        else
            echo "# No action for ${set_name}: already exists on datastore"
        fi
    done | sort -r | uniq
echo ""

echo "## Processing/Uploading runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "pipeline=${pip}" \
    -filter "status=Processing|Uploading" \
    -json | jq -r '.[].name' | \
    while read set_name; do
        echo "# ${set_name} is Processing/Uploading) on ${pip}"
    done | sort -r | uniq
echo ""

echo "## Waiting runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "pipeline=${pip}" \
    -filter "status=Waiting" \
    -json | jq -r '.[].name' | \
    while read set_name; do
        echo "# ${set_name} is Waiting) on ${pip}"
    done | sort -r | uniq
echo ""

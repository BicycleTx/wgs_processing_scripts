#!/usr/bin/env bash

ini=$1
pip=$2

if [ -z ${ini} ]; then echo "[ERROR] No ini given" & exit 1; fi
if [ -z ${pip} ]; then echo "[ERROR] No pipeline version given" & exit 1; fi

## Param check
iniCount=$( query_sbp_api -type inis -filter "name=${ini}" -exact | grep -v "^#" | wc -l )
if [ ${iniCount} != 1 ]; then
    echo "[ERROR] Non-existing ini ${ini})?" && exit 1
fi
pipCount=$( query_sbp_api -type stacks -filter "revision=${pip}" -exact | grep -v "^#" | wc -l )
if [[ ${pipCount} < 1 ]]; then
    echo "[ERROR] Non-existing pipeline version (${pip})?" && exit 1
fi

## Define all paths used by script
findDirs="/data/cpct/runs/ /data/core/runs/ /data/schuberg/processed_runs/ /data/schuberg/downloaded_runs/ "
findDirsFail="/data/schuberg/qc_fail_runs"
downloadScript="process_finished_run_v5"
downloadScriptFail="download_qc_fail_run"
rerunMode=0

if [[ ${ini} =~ .*Rerun*. ]]; then
    ## When in rerun mode, we want to list Failed and Validated runs together, and skip Failed runs.
    echo "## Running in Rerun Mode"
    echo ""
    rerunMode=1
    findDirs="/data/schuberg/new_runs_based_off_v4_reruns/"
    downloadScript="rebuild_set_based_off_v4_rerun"
fi

fullRunInis="Somatic.ini|CPCT.ini"
allTumorSamplesWithValidRun=$( query_sbp_api \
    -type runs \
    -filter "bucket=hmf-output" \
    -filter "status=Validated" \
    -json | jq -r '.[].tumor_sample')

allTumorSamplesWithSuccessRun=$( query_sbp_api \
    -type runs \
    -filter "ini=${fullRunInis}" \
    -filter "bucket=hmf-output" \
    -filter "status=Success" \
    -json | jq -r '.[].tumor_sample')


if [ ${rerunMode} == 0 ]; then
    echo "## Failed runs with ini ${ini} and pipeline ${pip} which are expected to exist on datastore"
    query_sbp_api \
        -type runs \
        -filter "ini=${ini}" \
        -filter "bucket=hmf-output" \
        -filter "pipeline=${pip}" \
        -filter "status=Failed" \
        -json | jq -r '.[].tumor_sample' | uniq | \
        while read failedTumorSample; do
            tumorHasValidRun=$( echo ${allTumorSamplesWithValidRun} | tr " " "\n" | grep -w  ${failedTumorSample} | wc -l)
            tumorHasSuccessRun=$( echo ${allTumorSamplesWithSuccessRun} | tr " " "\n" | grep -w  ${failedTumorSample} | wc -l)
            if [[ ${tumorHasValidRun} == 0 && ${tumorHasSuccessRun} == 0 ]]; then
                bucketForFailedTumorSample=$( query_sbp_api \
                    -type runs \
                    -filter "tumor_sample=${failedTumorSample}" \
                    -filter "ini=${ini}" \
                    -filter "pipeline=${pip}" \
                    -filter "status=Failed" \
                    -exact -json | jq -r '.[].bucket' | grep "hmf-output" | tail -n 1)

                setNameForFailedTumorSample=$( query_sbp_api \
                    -type runs \
                    -filter "tumor_sample=${failedTumorSample}" \
                    -filter "ini=${ini}" \
                    -filter "bucket=${bucketForFailedTumorSample}" \
                    -filter "pipeline=${pip}" \
                    -filter "status=Failed" \
                    -exact -json | jq -r '.[].name' | tail -n 1 )

                existsInSuccessRunDirs=$( find ${findDirs} -maxdepth 1 -type d -name "${setNameForFailedTumorSample}" | wc -l);
                existsInQcFailRunDirs=$( find ${findDirsFail} -maxdepth 1 -type d -name "${setNameForFailedTumorSample}" | wc -l)
                if [[ ${existsInSuccessRunDirs} == 0 && ${existsInQcFailRunDirs} == 0 ]]; then
                    echo "${downloadScriptFail} -s ${setNameForFailedTumorSample} -b ${bucketForFailedTumorSample}"
                elif [ ${existsInSuccessRunDirs} == 0 ]; then
                    echo "# ${setNameForFailedTumorSample} has failed on ${pip} and is already on datastore ${findDirsFail}"
                fi
            else
                echo "# ${failedTumorSample} has failed analysis on pip ${pip} but also has a Validated or Success run so can be ignored."
            fi
        done | sort -r | uniq
    echo ""
fi

echo "## Success runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=Success" \
    -json | jq -r '.[].tumor_sample' | uniq | \
    while read successTumorSample; do
        tumorHasValidRun=$( echo ${allTumorSamplesWithValidRun} | tr " " "\n" | grep -w  ${successTumorSample} | wc -l)
        if [ ${tumorHasValidRun} == 0 ]; then
            bucketForSuccessTumorSample=$( query_sbp_api \
                -type runs \
                -filter "tumor_sample=${successTumorSample}" \
                -filter "ini=${ini}" \
                -filter "pipeline=${pip}" \
                -filter "status=Success" \
                -exact -json | jq -r '.[].bucket' | grep "hmf-output" | tail -n 1)

            setNameForSuccessTumorSample=$( query_sbp_api \
                -type runs \
                -filter "tumor_sample=${successTumorSample}" \
                -filter "ini=${ini}" \
                -filter "bucket=${bucketForSuccessTumorSample}" \
                -filter "pipeline=${pip}" \
                -filter "status=Success" -exact -json | jq -r '.[].name' | tail -n 1 )

            existsInSuccessRunDirs=$( find ${findDirs} -maxdepth 1 -type d -name "${setNameForSuccessTumorSample}" | wc -l);
		    if [ ${existsInSuccessRunDirs} == 0 ]; then
                echo "${downloadScript} -s ${setNameForSuccessTumorSample}"
		    else
                echo "# No action for ${setNameForSuccessTumorSample}: already exists on datastore"
            fi
        else
            echo "# ${successTumorSample} has Success on pip ${pip} but also has a Validated run so can be ignored."
        fi
    done | sort -r | uniq
echo ""

statusFilter="Validated"
if [ ${rerunMode} == 1 ]; then
    statusFilter="Validated|Failed"
fi

echo "## ${statusFilter} runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=${statusFilter}" \
    -json | jq -r '.[].name' | \
    while read setName; do
        existsInSuccessRunDirs=$( find ${findDirs} -maxdepth 1 -type d -name "${setName}" | wc -l);
        if [[ ${existsInSuccessRunDirs} == 0 ]]
        then
                echo "${downloadScript} ${setName}"
        else
            echo "# No action for ${setName}: already exists on datastore"
        fi
    done | sort -r | uniq
echo ""

echo "## SnpCheck runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "bucket=hmf-output" \
    -filter "pipeline=${pip}" \
    -filter "status=SnpCheck" \
    -json | jq -r '.[].name' | \
    while read setName; do
        existsInSuccessRunDirs=$( find ${findDirs} -maxdepth 1 -type d -name "${setName}" | wc -l);
        if [[ ${existsInSuccessRunDirs} == 0 ]]
        then
                echo "${downloadScript} ${setName}"
        else
            echo "# No action for ${setName}: already exists on datastore"
        fi
    done | sort -r | uniq
echo ""

echo "## Processing (or downloading/uploading) runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "pipeline=${pip}" \
    -filter "status=Processing|Downloading|Uploading" \
    -json | jq -r '.[].name' | \
    while read setName; do
        echo "# ${setName} is processing (or downloading/uploading) on ${pip}"
    done | sort -r | uniq
echo ""

echo "## Pending runs with ini ${ini} and pipeline ${pip}"
query_sbp_api \
    -type runs \
    -filter "ini=${ini}" \
    -filter "pipeline=${pip}" \
    -filter "status=Pending" \
    -json | jq -r '.[].name' | \
    while read setName; do
        echo "# ${setName} is pending on ${pip}"
    done | sort -r | uniq
echo ""

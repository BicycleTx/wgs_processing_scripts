#!/usr/bin/env bash

# There are 4 types of runs:
#  - v5 run. In this case the v5 run holds all the output.
#  - v4 run. In this case, the run info, v3 rerun and v4 rerun are all identical.
#  - v3 run, with a v4 rerun. In this case, the run and v3 rerun are identical, the v4 rerun is separate.
#  - pre-v3 run, with a v3 rerun and a v4 rerun. In this case all 3 run infos will be different.

load_sample_name_for_set_by_type_from_api() {
    local set_name=$1
    local sample_type=$2 # can be ref_sample or tumor_sample
    local sample_name=$( query_sbp_api -type sets -filter "name=${set_name}" -json | jq -r ".[0].$sample_type" )
    echo "${sample_name}"
}

load_ref_sample_name_for_set() {
    local set_name=$1
    local ref_sample_name=$( load_sample_name_for_set_by_type_from_api "${set_name}" "ref_sample" )
    echo "${ref_sample_name}"
}

load_tum_sample_name_for_set() {
    local set_name=$1
    local tum_sample_name=$( load_sample_name_for_set_by_type_from_api "${set_name}" "tumor_sample" )
    echo "${tum_sample_name}"
}

load_run_info_for_set() {
    local set_name=$1
    local run_info=$( query_sbp_api -type runs \
        -filter "bucket=hmf-output|hmf_research|hmf_experiments" \
        -filter "ini=PipelineV5.ini|Somatic.ini|CPCT.ini" \
        -filter "status=Validated|SnpCheck|Failed|Success" \
        -filter "name=${set_name}"
    )
    echo ${run_info}
}

getRunsBySetFromApi() {
    local set_name=$1
    local json_string=$( query_sbp_api -type runs -json \
        -filter "bucket=hmf-output|hmf_research|hmf_experiments" \
        -filter "ini=PipelineV5.ini|Somatic.ini" \
        -filter "status=Validated|SnpCheck|Failed|Success" \
        -filter "name=${set_name}"
    )
    echo "$json_string"
    #return ${json_string}
}

load_rerun_v3_info_for_set() {
    set=$1
    # The v3 rerun ini was called 'Somatic_Rerun.bam" so below will always get v3 reruns
    rerun_info=`query_sbp_api -type runs | grep "hmf-output" | grep "${set}" | grep "Somatic_Rerun_bam.ini" | grep "Validated" `
    if [ -z "${rerun_info}" ]; then
        run_info=$(load_run_info_for_set ${set})
        run_is_v3_or_v4=`echo ${run_info} | cut -d ' ' -f8 | grep "v4\|v3"`
        if [ -z "run_is_v3_or_v4" ]; then
            rerun_info=""
        else
            rerun_info=${run_info}
        fi
    fi
    echo ${rerun_info}
}

load_rerun_v4_info_for_set() {
    set=$1
    # Allow for failure of v4 rerun since v4 rerun runs the health checks.
    rerun_info=`query_sbp_api -type runs | grep "hmf-output" | grep "${set}" | grep "Somatic_Rerun_v4.ini" | grep "v4.4" | grep "Validated\|Failed" `
    if [ -z "${rerun_info}" ]; then
        run_info=$(load_run_info_for_set ${set})
        run_is_v4=`echo ${run_info} | cut -d ' ' -f8 | grep "v4"`
        if [ -z "run_is_v4" ]; then
            rerun_info=""
        else
            rerun_info=${run_info}
        fi
    fi
    echo ${rerun_info}
}

locate_tumor_bam_for_set_in_bucket() {
    run_bucket=$1
    set=$2

    tum_sample_name=$( load_tum_sample_name_for_set ${set} )

    s3path="s3://${run_bucket}/${set}"
    echo $( sbp s3 ls ${s3path}/ --profile download --recursive | grep -Po "[^\s]*mapping/${tum_sample_name}(_dedup)?.realigned.bam$" )
}

locate_ref_bam_for_set_in_bucket() {
    run_bucket=$1
    set=$2

    ref_sample_name=$( load_ref_sample_name_for_set ${set} )

    s3path="s3://${run_bucket}/${set}"
    echo $( sbp s3 ls ${s3path}/ --profile download --recursive | grep -Po "[^\s]*mapping/${ref_sample_name}(_dedup)?.realigned.bam$" )
}

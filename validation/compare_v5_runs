#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || die "Unable to source locate_files"

base_run_path=$1
test_run_path=$2
logs_dir_path=$3

tools=(amber bachelor chord cobalt health_checker linx purple sage_germline sage_somatic gridss gripss protect)

base_pip_vsn_file="${base_run_path}/pipeline.version"
test_pip_vsn_file="${test_run_path}/pipeline.version"

base_meta_file="${base_run_path}/metadata.json"
test_meta_file="${test_run_path}/metadata.json"

if [[ "$#" -ne 3 ]]; then
    echo "-----"
    echo " Descr: Compares a selection of files from two Somatic pipeline runs"
    echo " Usage: $(basename "$0") \$path_to_base_run \$path_to_test_run \$path_to_logs_dir"
    echo " Examp: $(basename "$0") /path/to/COLO829v003_v5.8 /path/to/COLO829v003_v5.9 /path/to/logs"
    echo "-----"
    exit 1
fi
[[ -d "${base_run_path}" ]] || die "Directory not found (${base_run_path})"
[[ -d "${test_run_path}" ]] || die "Directory not found (${test_run_path})"
[[ -d "${logs_dir_path}" ]] || die "Directory not found (${logs_dir_path})"
[[ -f "${base_pip_vsn_file}" ]] || die "File not found (${base_pip_vsn_file})"
[[ -f "${test_pip_vsn_file}" ]] || die "File not found (${test_pip_vsn_file})"

main () {
    base_pip_vsn=$(cat "${base_pip_vsn_file}")
    test_pip_vsn=$(cat "${test_pip_vsn_file}")

    base_ref_sample_name=$(jq -r '.reference.sampleName' "${base_meta_file}")
    test_ref_sample_name=$(jq -r '.reference.sampleName' "${test_meta_file}")
    base_tum_sample_name=$(jq -r '.tumor.sampleName' "${base_meta_file}")
    test_tum_sample_name=$(jq -r '.tumor.sampleName' "${test_meta_file}")

    base_ref_cram="${base_run_path}/${base_ref_sample_name}/cram/${base_ref_sample_name}.cram"
    test_ref_cram="${test_run_path}/${test_ref_sample_name}/cram/${test_ref_sample_name}.cram"
    base_tum_cram="${base_run_path}/${base_tum_sample_name}/cram/${base_tum_sample_name}.cram"
    test_tum_cram="${test_run_path}/${test_tum_sample_name}/cram/${test_tum_sample_name}.cram"
    cram_files=("$base_ref_cram" "$test_ref_cram" "$base_tum_cram" "$test_tum_cram")

    header "Settings"
    info "  Logs dir: ${logs_dir_path}"
    info "  Base dir: ${base_run_path}"
    info "  Test dir: ${test_run_path}"
    info "  Base version: ${base_pip_vsn}"
    info "  Test version: ${test_pip_vsn}"
    info "  Base sample: ${base_tum_sample_name}"
    info "  Test sample: ${test_tum_sample_name}"

    header "CRAM check"
    for cram_file in ${cram_files[*]}; do
        [[ -f "${cram_file}" ]] || warn "  File does not exist (${cram_file})"
    done

    base_header_file="${logs_dir_path}/cram_header_base_tum.txt"
    test_header_file="${logs_dir_path}/cram_header_test_tum.txt"
    samtools view -H "${base_tum_cram}" | grep '^@RG' > "${base_header_file}"
    samtools view -H "${test_tum_cram}" | grep '^@RG' > "${test_header_file}"
    if [[ $(diff "${base_header_file}" "${test_header_file}" | wc -l) -eq 0 ]]; then
        info "  OK Identical CRAM RG lines in headers"
    else
        warn "  DIFFERENT CRAM RG lines in headers (see ${base_header_file} and ${test_header_file}"
    fi

    header "DIRECTORY check"
    for tool_name in ${tools[*]}; do
        info "Checking directory $tool_name"
        base_tool_path="${base_run_path}/${tool_name}"
        test_tool_path="${test_run_path}/${tool_name}"
        if [[ ! -d "${base_tool_path}" ]]; then
            warn "  Tool directory does not exist in base so cannot compare (${base_tool_path})"
        elif [[ ! -d "${test_tool_path}" ]]; then
            warn "  Tool directory does not exist in test so cannot compare (${test_tool_path})"
        else
            # expect file/dir count to be equal excluding potential symlinks (-not -type l) and backup files (*.bak)
            base_file_count=$(find "$(readlink -f "${base_tool_path}")" -mindepth 1 -maxdepth 1 -not -type l -not -name "*.bak" | wc -l)
            test_file_count=$(find "$(readlink -f "${test_tool_path}")" -mindepth 1 -maxdepth 1 -not -type l -not -name "*.bak" | wc -l)
            if [[ ${base_file_count} -ne ${test_file_count} ]]; then
                warn "  DIFFERENT file count (${base_file_count} vs ${test_file_count}) for tool directory (${tool_name})"
            else
                info "  OK Identical file count (${base_file_count}) for tool directory (${tool_name})"
            fi

            # vcf tbi gz log sh cram crai bam bai bak)
            find "$(readlink -f "${base_tool_path}")" -mindepth 1 -maxdepth 1 -type f \
                -not -name "*.cram" -not -name "*.crai" \
                -not -name "*.bam" -not -name "*.bai" \
                -not -name "*.vcf" -not -name "*.tbi" -not -name "*.gz" \
                -not -name "*.sh" -not -name "*.log" -not -name "*.bak" \
            | while read -r base_file_path; do
                file_name=$(basename "${base_file_path}");
                file_path="${tool_name}/${file_name}"
                test_file_path="${test_run_path}/${file_path}"
                base_count=$(wc -l "${base_file_path}" | cut -d" " -f1)
                test_count=$(wc -l "${test_file_path}" | cut -d" " -f1)
                if [[ ${base_count} -eq ${test_count} ]]; then
                    info "  OK Identical line count (${base_count}) for file (${file_path})"
                else
                    warn "  DIFFERENT line count (${base_count} vs ${test_count}) for file (${file_path})"
                fi

                # special handling of txt output files
                if [[ "$base_file_path" =~ (csv|tsv|txt)$ ]]; then
                    files_are_identical=$(diff --report-identical-files "$base_file_path" "$test_file_path")
                    if [[ -n "$files_are_identical" ]]; then
                        info "  OK Identical diff for file (${file_path})"
                    else
                        warn "  DIFFERENCES found for file (${file_path})"
                    fi
                fi
            done
        fi
    done

    test_grm_vcf=$(locate_gatk_germline_variants "${test_run_path}" "${test_ref_sample_name}")
    base_grm_vcf=$(locate_gatk_germline_variants "${base_run_path}" "${base_ref_sample_name}")
      test_chord=$(locate_chord_prediction "${test_run_path}")
      base_chord=$(locate_chord_prediction "${base_run_path}")
    test_vir_ins=$(locate_linx_viral_insertions "${test_run_path}")
    base_vir_ins=$(locate_linx_viral_insertions "${base_run_path}")
    test_som_var=$(locate_purple_somatic_variants "${test_run_path}")
    base_som_var=$(locate_purple_somatic_variants "${base_run_path}")
     test_sv_var=$(locate_purple_structural_variants "${test_run_path}")
     base_sv_var=$(locate_purple_structural_variants "${base_run_path}")
       test_bach=$(locate_reportable_bachelor_variants "${test_run_path}")
       base_bach=$(locate_reportable_bachelor_variants "${base_run_path}")

    all_base_files=(
        "${base_grm_vcf}"
        "${base_chord}"
        "${base_vir_ins}"
        "${base_som_var}"
        "${base_sv_var}"
        "${base_bach}"
    )

    all_test_files=(
        "${test_grm_vcf}"
        "${test_chord}"
        "${test_vir_ins}"
        "${test_som_var}"
        "${test_sv_var}"
        "${test_bach}"
    )

    info "  Checking file existence"
    for file in "${all_base_files[@]}" "${all_test_files[@]}"; do
        [[ -f "${file}" ]] || die "  File does not exist ($file)"
    done
    info "  OK All expected files found"

    info "  Counting somatic small variants"
    test_som_var_count=$(unpigz -c "${test_som_var}" | grep -cv ^#)
    base_som_var_count=$(unpigz -c "${base_som_var}" | grep -cv ^#)
    test_som_pass_var_count=$(unpigz -c "${test_som_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
    base_som_pass_var_count=$(unpigz -c "${base_som_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)

    info "  Counting somatic structural variants"
    test_sv_var_count=$(unpigz -c "${test_sv_var}" | grep -cv ^#)
    base_sv_var_count=$(unpigz -c "${base_sv_var}" | grep -cv ^#)
    test_sv_pass_var_count=$(unpigz -c "${test_sv_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
    base_sv_pass_var_count=$(unpigz -c "${base_sv_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
    test_sv_non_pon_var_count=$(unpigz -c "${test_sv_var}" | grep -v ^# | awk '$7 != "PON"' | wc -l)
    base_sv_non_pon_var_count=$(unpigz -c "${base_sv_var}" | grep -v ^# | awk '$7 != "PON"' | wc -l)

    info "  Counting germline variants"
    test_grm_var_count=$(unpigz -c "${test_grm_vcf}" | grep -cv ^#)
    base_grm_var_count=$(unpigz -c "${base_grm_vcf}" | grep -cv ^#)
    test_grm_pass_var_count=$(unpigz -c "${test_grm_vcf}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
    base_grm_pass_var_count=$(unpigz -c "${base_grm_vcf}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
    test_grm_var_count=0
    base_grm_var_count=0
    test_grm_pass_var_count=0
    base_grm_pass_var_count=0

    declare -A tool_names
    declare -A tool_versions

    while read -r name_vsn_str; do
        tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
        tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
        tool_names[${tool_name}]="true"
        tool_versions["${tool_name}_BASE"]="${tool_vsn}"
    done < <(awk '/Versions of tools/,/\]/' "${base_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

    while read -r name_vsn_str; do
        tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
        tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
        tool_names["${tool_name}"]="true"
        tool_versions["${tool_name}_TEST"]="${tool_vsn}"
    done < <(awk '/Versions of tools/,/\]/' "${test_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

    header "TOOL VERSIONS check"

    for tool_name in "${!tool_names[@]}"; do
        base_vsn=${tool_versions["${tool_name}_BASE"]}
        test_vsn=${tool_versions["${tool_name}_TEST"]}
        if [[ "${base_vsn}" == "${test_vsn}" ]]; then
            info "  OK identical tool version for tool ${tool_name} (${base_vsn})"
        elif [[ "${base_vsn}" == "" ]]; then
            warn "  NEW tool ${tool_name} v${test_vsn} found"
        else
            warn "  DIFFERENT version for tool ${tool_name} v${base_vsn} -> v${test_vsn}"
        fi
    done

    header "VARIANT COUNT check"

    info "GERMLINE file checks"
    info "  Germline total variant count ${base_grm_var_count} (base) vs ${test_grm_var_count} (test)"
    info "  Germline PASS variant count ${base_grm_pass_var_count} (base) vs ${test_grm_pass_var_count} (test)"

    info "PURPLE file checks"
    info "  PURPLE total variant count ${base_som_var_count} (base) vs ${test_som_var_count} (test)"
    info "  PURPLE PASS variant count ${base_som_pass_var_count} (base) vs ${test_som_pass_var_count} (test)"
    info "  PURPLE SV total variant count ${base_sv_var_count} (base) vs ${test_sv_var_count} (test)"
    info "  PURPLE SV PASS variant count ${base_sv_pass_var_count} (base) vs ${test_sv_pass_var_count} (test)"
    info "  PURPLE SV NON-PON variant count ${base_sv_non_pon_var_count} (base) vs ${test_sv_non_pon_var_count} (test)"

    info "CHORD file content"
    awk '{print "[INFO]   BASE: "$0}' "${base_chord}"
    awk '{print "[INFO]   TEST: "$0}' "${test_chord}"

    info "LINX file content"
    awk '{print "[INFO]   BASE: "$0}' "${base_vir_ins}"
    awk '{print "[INFO]   TEST: "$0}' "${test_vir_ins}"

    info "BACHELOR file content"
    cut -f 1-2,4-7 "${base_bach}" | tr "\t" "," | awk '{print "[INFO]   BASE: "$0}'
    cut -f 1-2,4-7 "${test_bach}" | tr "\t" "," | awk '{print "[INFO]   TEST: "$0}'
}

header () {
    info "===== $1 ====="
}

main
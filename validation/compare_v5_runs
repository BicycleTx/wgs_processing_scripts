#!/usr/bin/env bash

source locate_files

base_run_path=$1
test_run_path=$2
logs_dir_path=$3

tools=(amber bachelor chord cobalt health_checker linx purple sage_germline sage_somatic gridss gripss)

base_pip_vsn_file="${base_run_path}/pipeline.version"
test_pip_vsn_file="${test_run_path}/pipeline.version"

base_meta_file="${base_run_path}/metadata.json"
test_meta_file="${test_run_path}/metadata.json"

if [[ "$#" -ne 3 ]]; then
    echo "-----"
    echo " Descr: Compares a selection of files from two Somatic pipeline runs"
    echo " Usage: $(basename "$0") \$path_to_base_run \$path_to_test_run \$path_to_logs_dir"
    echo " Examp: $(basename "$0") /path/to/COLO829v003_v5.8 /path/to/COLO829v003_v5.9 /path/to/logs"
    echo "-----"
    exit 1
fi
if [[ ! -d "${base_run_path}" ]]; then echo "[ERROR] Directory not found (${base_run_path})" && exit 1; fi
if [[ ! -d "${test_run_path}" ]]; then echo "[ERROR] Directory not found (${test_run_path})" && exit 1; fi
if [[ ! -d "${logs_dir_path}" ]]; then echo "[ERROR] Directory not found (${logs_dir_path})" && exit 1; fi
if [[ ! -f "${base_pip_vsn_file}" ]]; then echo "[ERROR] File not found (${base_pip_vsn_file})" && exit 1; fi
if [[ ! -f "${test_pip_vsn_file}" ]]; then echo "[ERROR] File not found (${test_pip_vsn_file})" && exit 1; fi

base_pip_vsn=$(cat "${base_pip_vsn_file}")
test_pip_vsn=$(cat "${test_pip_vsn_file}")

base_ref_sample_name=$(jq -r '.reference.sampleName' "${base_meta_file}")
test_ref_sample_name=$(jq -r '.reference.sampleName' "${test_meta_file}")
base_tum_sample_name=$(jq -r '.tumor.sampleName' "${base_meta_file}")
test_tum_sample_name=$(jq -r '.tumor.sampleName' "${test_meta_file}")

base_ref_cram="${base_run_path}/${base_ref_sample_name}/cram/${base_ref_sample_name}.cram"
test_ref_cram="${test_run_path}/${test_ref_sample_name}/cram/${test_ref_sample_name}.cram"
base_tum_cram="${base_run_path}/${base_tum_sample_name}/cram/${base_tum_sample_name}.cram"
test_tum_cram="${test_run_path}/${test_tum_sample_name}/cram/${test_tum_sample_name}.cram"
cram_files=(
  "$base_ref_cram"
  "$test_ref_cram"
  "$base_tum_cram"
  "$test_tum_cram"
)

echo ""
echo "===== Overview"
echo "[INFO] LOGS dir path: ${logs_dir_path}"
echo "[INFO] BASE run path: ${base_run_path}"
echo "[INFO] TEST run path: ${test_run_path}"
echo "[INFO] BASE version: ${base_pip_vsn}"
echo "[INFO] TEST version: ${test_pip_vsn}"
echo "[INFO] BASE sample: ${base_tum_sample_name}"
echo "[INFO] TEST sample: ${test_tum_sample_name}"

echo ""
echo "===== CRAM existance CHECK"
for cram_file in ${cram_files[*]}; do
    if [[ -f "${cram_file}" ]]; then
        echo "[INFO] OK File found (${cram_file})"
    else
        echo "[ERROR] File does not exist (${cram_file})"
        exit 1
    fi
done

echo ""
echo "===== CRAM Headers CHECK"
base_header_file="${logs_dir_path}/cram_header_base_tum.txt"
test_header_file="${logs_dir_path}/cram_header_test_tum.txt"
samtools view -H "${base_tum_cram}" | grep '^@RG' > "${base_header_file}"
samtools view -H "${test_tum_cram}" | grep '^@RG' > "${test_header_file}"
if [[ $(diff "${base_header_file}" "${test_header_file}" | wc -l) -eq 0 ]]; then
    echo "[INFO] OK Identical CRAM RG lines in headers"
else
    echo "[WARN] DIFFERENT CRAM RG lines in headers (see ${base_header_file} and ${test_header_file}"
fi

echo ""
echo "===== Directory CHECKS"
for tool_name in ${tools[*]}; do 
    base_tool_path="${base_run_path}/${tool_name}"
    test_tool_path="${test_run_path}/${tool_name}"
    base_file_count=$(find "${base_tool_path}" -mindepth 1 -maxdepth 1 | wc -l)
    test_file_count=$(find "${test_tool_path}" -mindepth 1 -maxdepth 1 | wc -l)
    if [[ ! -d "${base_tool_path}" ]]; then
        echo "[WARN] Tool directory does not exist so cannot compare (${base_tool_path})"
    elif [[ ! -d "${test_tool_path}" ]]; then
        echo "[WARN] Tool directory does not exist so cannot compare (${test_tool_path})"
    else
        if [[ ${base_file_count} -ne ${test_file_count} ]]; then
            echo "[WARN] DIFFERENT file count (${base_file_count} vs ${test_file_count}) for tool ${tool_name}"
        else
            echo "[INFO] Identical file count (${base_file_count}) for tool ${tool_name}"
        fi
        find "${base_run_path}/${tool_name}" -mindepth 1 -maxdepth 1 -type f | \
        grep -vP "(vcf|tbi|gz|log|sh|cram|crai|bam|bai)$" | \
        while read -r base_file_path; do
            file_name=$(basename "${base_file_path}");
            test_file_path="${test_run_path}/${tool_name}/${file_name}"
            base_count=$(wc -l "${base_file_path}" | cut -d" " -f1)
            test_count=$(wc -l "${test_file_path}" | cut -d" " -f1)
            if [[ ${base_count} -eq ${test_count} ]]; then
                echo "[INFO]   Identical line count (${base_count}) for file ${file_name}"
            else
                echo "[WARN]   DIFFERENT line count (${base_count} vs ${test_count}) for file ${file_name}"
            fi
        done
    fi
done

echo ""
echo "===== File CHECKS"
echo "[INFO] Locating all relevant files"
test_grm_vcf=$(locate_germline_variants "${test_run_path}" "${test_ref_sample_name}")
base_grm_vcf=$(locate_germline_variants "${base_run_path}" "${base_ref_sample_name}")
  test_chord=$(locate_chord_prediction "${test_run_path}")
  base_chord=$(locate_chord_prediction "${base_run_path}")
test_vir_ins=$(locate_linx_viral_insertions "${test_run_path}")
base_vir_ins=$(locate_linx_viral_insertions "${base_run_path}")
test_som_var=$(locate_purple_somatics "${test_run_path}")
base_som_var=$(locate_purple_somatics "${base_run_path}")
 test_sv_var=$(locate_purple_structural_variants "${test_run_path}")
 base_sv_var=$(locate_purple_structural_variants "${base_run_path}")
   test_bach=$(locate_reportable_bachelor_variants "${test_run_path}")
   base_bach=$(locate_reportable_bachelor_variants "${base_run_path}")

all_base_files=(
    "${base_grm_vcf}"
    "${base_chord}"
    "${base_vir_ins}"
    "${base_som_var}"
    "${base_sv_var}"
    "${base_bach}"
)

all_test_files=(
    "${test_grm_vcf}"
    "${test_chord}"
    "${test_vir_ins}"
    "${test_som_var}"
    "${test_sv_var}"
    "${test_bach}"
)

for file in "${all_base_files[@]}" "${all_test_files[@]}"; do
    if [[ -f "${file}" ]]; then
        echo "[INFO]   File found ($file)"
    else
        echo "[WARN]   File does not exist ($file)" && exit 1
    fi
done

echo "[INFO] Counting somatic small variants"
test_som_var_count=$(unpigz -c "${test_som_var}" | grep -cv ^#)
base_som_var_count=$(unpigz -c "${base_som_var}" | grep -cv ^#)
test_som_pass_var_count=$(unpigz -c "${test_som_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
base_som_pass_var_count=$(unpigz -c "${base_som_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)

echo "[INFO] Counting somatic structural variants"
test_sv_var_count=$(unpigz -c "${test_sv_var}" | grep -cv ^#)
base_sv_var_count=$(unpigz -c "${base_sv_var}" | grep -cv ^#)
test_sv_pass_var_count=$(unpigz -c "${test_sv_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
base_sv_pass_var_count=$(unpigz -c "${base_sv_var}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
test_sv_non_pon_var_count=$(unpigz -c "${test_sv_var}" | grep -v ^# | awk '$7 != "PON"' | wc -l)
base_sv_non_pon_var_count=$(unpigz -c "${base_sv_var}" | grep -v ^# | awk '$7 != "PON"' | wc -l)

echo "[INFO] Counting germline variants"
test_grm_var_count=$(unpigz -c "${test_grm_vcf}" | grep -cv ^#)
base_grm_var_count=$(unpigz -c "${base_grm_vcf}" | grep -cv ^#)
test_grm_pass_var_count=$(unpigz -c "${test_grm_vcf}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
base_grm_pass_var_count=$(unpigz -c "${base_grm_vcf}" | grep -v ^# | awk '$7 == "PASS"' | wc -l)
test_tool_vsn=$( awk '/Versions of tools/,/\]/' "${test_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | paste -s -d '|')
base_tool_vsn=$( awk '/Versions of tools/,/\]/' "${base_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | paste -s -d '|')

declare -A tool_names
declare -A tool_versions

while read -r name_vsn_str; do
    tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
    tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
    tool_names[${tool_name}]="true"
    tool_versions["${tool_name}_BASE"]="${tool_vsn}"
done < <(awk '/Versions of tools/,/\]/' "${base_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

while read -r name_vsn_str; do
    tool_name=$(echo "${name_vsn_str}" | cut -d":" -f1)
    tool_vsn=$(echo "${name_vsn_str}" | cut -d":" -f2)
    tool_names["${tool_name}"]="true"
    tool_versions["${tool_name}_TEST"]="${tool_vsn}"
done < <(awk '/Versions of tools/,/\]/' "${test_run_path}/run.log" | awk 'NR>2 {print last} {last=$0}' | cut -d" " -f5,6 | sed 's/ //g')

echo "[INFO] TOOL VERSIONS"
for tool_name in "${!tool_names[@]}"; do 
    base_vsn=${tool_versions["${tool_name}_BASE"]}
    test_vsn=${tool_versions["${tool_name}_TEST"]}
    if [[ "${base_vsn}" == "${test_vsn}" ]]; then
        echo "[INFO]   Identical version for tool ${tool_name} v${base_vsn} -> v${test_vsn}"
    else
        echo "[WARN]   DIFFERENT version for tool ${tool_name} v${base_vsn} -> v${test_vsn}"
    fi
done

echo ""
echo "===== File content CHECKS"

echo "[INFO] PIPELINE VERSION"
echo "  BASE: ${base_pip_vsn}"
echo "  TEST: ${test_pip_vsn}"

echo "[INFO] TOOL VERSIONS"
echo "  BASE: ${base_tool_vsn}"
echo "  TEST: ${test_tool_vsn}"

echo "[INFO] GERMLINE file checks"
echo "  BASE VAR TOTAL COUNT: ${base_grm_var_count}"
echo "  TEST VAR TOTAL COUNT: ${test_grm_var_count}"
echo "  BASE VAR PASS COUNT: ${base_grm_pass_var_count}"
echo "  TEST VAR PASS COUNT: ${test_grm_pass_var_count}"

echo "[INFO] PURPLE file checks"
echo "  BASE VAR TOTAL COUNT: ${base_som_var_count}"
echo "  TEST VAR TOTAL COUNT: ${test_som_var_count}"
echo "  BASE VAR PASS COUNT: ${base_som_pass_var_count}"
echo "  TEST VAR PASS COUNT: ${test_som_pass_var_count}"
echo "  BASE SV VAR TOTAL COUNT: ${base_sv_var_count}"
echo "  TEST SV VAR TOTAL COUNT: ${test_sv_var_count}"
echo "  BASE SV VAR PASS COUNT: ${base_sv_pass_var_count}"
echo "  TEST SV VAR PASS COUNT: ${test_sv_pass_var_count}"
echo "  BASE SV VAR NON-PON COUNT: ${base_sv_non_pon_var_count}"
echo "  TEST SV VAR NON-PON COUNT: ${test_sv_non_pon_var_count}"

echo "[INFO] CHORD file content"
awk '{print "  BASE: "$0}' "${base_chord}"
awk '{print "  TEST: "$0}' "${test_chord}"

echo "[INFO] LINX file content"
awk '{print "  BASE: "$0}' "${base_vir_ins}"
awk '{print "  TEST: "$0}' "${test_vir_ins}"

echo "[INFO] BACHELOR file content"
cut -f 1-2,4-7 "${base_bach}" | tr "\t" "," | awk '{print "  BASE: "$0}'
cut -f 1-2,4-7 "${test_bach}" | tr "\t" "," | awk '{print "  TEST: "$0}'

echo ""

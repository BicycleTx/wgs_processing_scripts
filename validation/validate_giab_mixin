#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1

run_dir=$1 && shift
out_name=$1 && shift # optional

val_base='/data/giab/validation/mixin'
gatk_jar='/data/tools/gatk/3.8.0/GenomeAnalysisTK.jar'
rtg_exec='/data/tools/rtg-tools/3.9.1/rtg'
rtg_sdf_path='/data/dbs/RTGSDF_GRCh37/'
rtg_threads=8
ref_genome_fasta=$(locate_ref_genome_37_fasta_file)

truth_version='giab_mixin_truth_set_160628'
truth_vcf_name='na12878-na24385-somatic-truth.vcf.gz'
truth_bed_name='na12878-na24385-somatic-truth-regions.bed'
truth_dir_path="/data/giab/truth/${truth_version}"
truth_vcf_path="${truth_dir_path}/${truth_vcf_name}"
truth_bed_path="${truth_dir_path}/${truth_bed_name}"

## init checks
if [[ ! -w "${val_base}" ]]; then error "validation base not writable (${val_base})"; fi
if [[ ! -f "${truth_vcf_path}" ]]; then error "truth VCF not available (${truth_vcf_path})"; fi
if [[ ! -f "${truth_bed_path}" ]]; then error "truth BED not available (${truth_bed_path})"; fi
if [[ $1 == "" || $1 == "-h" || $1 == "--help" ]]; then
    echo "-----"
    echo " Descr: Validate GIAB run"
    echo " Usage: $(basename $0)<path-to-pipeline-dir-or-vcf>"
    echo "        $(basename $0) <path-to-pipeline-dir-or-vcf> [<output-name>]"
    echo "        $(basename $0) /data/experiments/giab-mixin/mixin-run/"
    echo "        $(basename $0) /data/experiments/giab-mixin/mixin-run/ \"hmf-mixin-v4-final\""
    echo "-----"
    exit 1
fi

info "START with $(basename $0)"

## -----
## Find somatic VCF
if [[ ${run_dir} =~ .vcf.gz$ || ${run_dir} =~ .vcf$ ]]; then
    run_som_vcf_path=${run_dir}
else
    run_links_json=${run_dir}/logs/links.json
    legacy_path=${run_dir}/somaticVariants/CPCT11111111R_CPCT11111111T/CPCT11111111R_CPCT11111111T_post_processed.vcf
    pv5_path=$( find ${run_dir} -name "*.purple.somatic.vcf.gz")
    if [[ -f "${run_links_json}" ]]; then
        run_som_vcf_link=$(cat "${run_links_json}" | jq -r '.somatic_variant_vcf')
        run_som_vcf_path=${run_dir}/${run_som_vcf_link}
    elif [[ -f "${legacy_path}" ]]; then
        run_som_vcf_path=${legacy_path}
    elif [[ -f "${pv5_path}" ]]; then
        run_som_vcf_path=${pv5_path}
    else
        error "Unable to find somatic VCF"
    fi
fi
run_som_vcf_name=$(basename ${run_som_vcf_path})

## -----
## Prepare
info "Using input VCF (${run_som_vcf_name})"
run_name="$(basename ${run_dir} )"
if [[ ! -z "${out_name}" ]]; then
    out_name="${truth_version}__vs__${out_name}"
else    
    out_name="${truth_version}__vs__${run_name}"
fi

out_path="${val_base}/${out_name}"
tmp_path="${out_path}/vcfeval"
if [[ -e "${out_path}" ]]; then
    error "Output dir exists remove first: ${out_path}"
else 
    info "Using output dir (${out_path})"
    mkdir ${out_path}
fi

## -----
## Copy final input VCF
cp "${run_som_vcf_path}"* ${out_path}
run_som_vcf_path="${out_path}/${run_som_vcf_name}"
if [[ "${run_som_vcf_path}" =~ .vcf$ ]]; then
    info "Running bgzip"
    bgzip ${run_som_vcf_path}
    info "Running tabix"
    tabix "${run_som_vcf_path}.gz"
    run_som_vcf_path="${run_som_vcf_path}.gz"
fi 

## -----
## Run variant evaluation
info "Running RTGtools vcfeval"
${rtg_exec} vcfeval \
    --template=${rtg_sdf_path} \
    --threads=${rtg_threads} \
    --baseline=${truth_vcf_path} \
    --calls=${run_som_vcf_path} \
    --evaluation-regions=${truth_bed_path} \
    --output=${tmp_path} \
    --ref-overlap \
    --all-records

## -----
## Create the sub VCFs
call_classes=(tp fp fn)
variant_types=(SNP INDEL MNP MIXED SYMBOLIC NO_VARIATION)
metrics_out_file="${out_path}/final_counts.tsv"
touch ${metrics_out_file}
printf "##INPUT=variant_count_of_input_vcf\n" >> ${metrics_out_file}
printf "##SUM=variant_count_sum_of_all_variant_types\n" >> ${metrics_out_file}
printf "#%s\t%s\t%s\n" "class" "type" "count" >> ${metrics_out_file}

for call_type in "${call_classes[@]}"; do 
    rtg_vcf="${tmp_path}/${call_type}.vcf.gz"
    all_count=$(zcat ${rtg_vcf} | grep -cv "^#")
    printf "%s\t%s\t%i\n" "${call_type}" "INPUT" "${all_count}" >> ${metrics_out_file}
    call_type_sum=0
    for variant_type in "${variant_types[@]}"; do
        out_vcf="${tmp_path}/${variant_type}_${call_type}.vcf.gz"
        info "Creating $call_type $variant_type sub VCF"
        java -jar ${gatk_jar} -T SelectVariants --variant ${rtg_vcf} -o ${out_vcf} -R ${ref_genome_fasta} -selectType ${variant_type}
        variant_count=$(zcat ${out_vcf} | grep -cv "^#")
        call_type_sum=$((call_type_sum + variant_count))
        printf "%s\t%s\t%i\n" "${call_type}" "${variant_type}" "${variant_count}" >> ${metrics_out_file}
    done
    printf "%s\t%s\t%i\n" "${call_type}" "SUM" "${call_type_sum}" >> ${metrics_out_file}
done

## -----
## Parse RTGtools vcfeval produced metrics
## SVL: vcfeval not the most parse-able format so need some sed magic
cat ${tmp_path}/summary.txt | sed 's/  */ /g' | sed 's/^ *//' | grep None | while read line; do
    thres=$(echo ${line} | cut -d" " -f1)
    tp=$(echo ${line} | cut -d" " -f3)
    fp=$(echo ${line} | cut -d" " -f4)
    fn=$(echo ${line} | cut -d" " -f5)
    prec=$(echo ${line} | cut -d" " -f6)
    sens=$(echo ${line} | cut -d" " -f7)
    score=$(echo ${line} | cut -d" " -f8)
    printf \
        "Threshold\t%s\nTruePositive\t%s\nFalsePositive\t%i\nFalseNegative\t%s\nPrecision\t%s\nSensitivity\t%s\nFmeasure\t%s\n" \
        "${thres}" "${tp}" "${fp}" "${fn}" "${prec}" "${sens}" "${score}"
done > ${out_path}/rtg_summary.tsv

info "Output in ${out_path}"
info "Counts in ${metrics_out_file}"
info "DONE with $(basename $0)"

#!/usr/bin/env bash

source message_functions || exit 1

print_usage(){
    echo "-----"
    echo " Descr: Installs a COLO829T Somatic pipeline run in validation data archive"
    echo " Usage: $(basename $0) -s <source-dir-in-experiments> -t <target_name>"
    echo " Examp: $(basename $0) -s /data/experiments/YYMMDD_p5_verification_vX -t YYMMDD_COLO829v003_vX"
    echo "-----"
    exit 1
}

while getopts ':s:t:' flag; do
    case "${flag}" in
        s) exp_dir_path=${OPTARG} ;;
        t) target_name=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done

if [[ -z "${exp_dir_path}" || -z "${target_name}" ]]; then
    print_usage
fi

main() {
    info "Starting with script $(basename $0)"

    exp_dir_path=$(realpath "${exp_dir_path}")
    
    ## some input sanity checks
    [[ ! "${target_name}" =~ \/ ]] || die "Target name contains a slash (${target_name})"
    [[ -d "${exp_dir_path}" ]] || die "Experiment dir does not exist (${exp_dir_path})"

    target_root="/data/data_archive/validation_data"
    target_path="${target_root}/pipeline_runs/${target_name}"
    latest_path="${target_root}/latest_tooling_pipeline_runs/${target_name}"

    runs_dir="${exp_dir_path}/runs"
    jobs_dir="${exp_dir_path}/jobs"
    logs_dir="${exp_dir_path}/logs"
 
    info "Selecting latest run in runs dir ${runs_dir}"
    source_path=$(find "${runs_dir}" -mindepth 1 -maxdepth 1 -type d -name "*COLO829*" | tail -1)
    #source_name=$(basename "${source_path}")
    #install_log="${logs_dir}/install.log"
    
    ## some more sanity checks
    [[ -d "${source_path}" ]] || die "No valid source run dir path at critical point (${source_path})"
    [[ ! -d "${target_path}" ]] || die "Target run dir path already exists (${target_path})"

    info "Settings:"
    info " Source path: ${source_path}"
    info " Target path: ${target_path}"

    info "TODO Move source to target:"
    echo " mv $source_path $target_path"
    echo ""

    info "TODO Sync without CRAMs from target back to source:"
    echo " rsync -ah --stats --exclude 'COLO829v003R.cram' --exclude 'COLO829v003T.cram' '$target_path/' '$source_path/'"
    echo ""

    info "TODO Sync without CRAMs to directory with latest"
    echo " rsync -ah --stats --exclude 'COLO829v003R.cram' --exclude 'COLO829v003T.cram' '$target_path/' '${latest_path}/'"
    echo ""

    load_job=${jobs_dir}/load_run_into_reference_validation_sets_db
    load_log=${logs_dir}/load_run_into_reference_validation_sets_db.log
    info "TODO Load data into reference DB:"
    echo " nohup ${load_job} ${latest_path} > ${load_log} &"
    echo ""

    info "TODO Inspect load log"
    info "  less ${load_log}"
    info "TODO Cleanup previous COLO run from latest_tooling"
    info "  cd ${target_root}/latest_tooling_pipeline_runs"
    info "  rm -r ${dir-of-previous-version}"
    info "TODO Cleanup CRAMs from previous COLO run in pipeline_runs"
    info "  cd ${target_root}/pipeline_runs"
    info "  find <dir-of-previous-version> -name 'COLO829v003[RT].cram' # add -delete for action"
    info "TODO make sure all is chowned to root:"
    echo "  chown_directory_contents_to_root ${target_root}/pipeline_runs"

    info "Finished with $(basename $0)"
}

copy_file() {
    local file_path=$1 && shift
    local target_dir=$1 && shift

    if [[ ! -f "${file_path}" ]]; then
        die "File not found (${file_path})"
    else
        info "Copying file ($file_path)"
        cp "${file_path}" "${jobs_dir}"
    fi
    
    [[ $? -eq 0 ]] || die "Unable to copy file (${file_path}) to dir (${target_dir})"
}

main

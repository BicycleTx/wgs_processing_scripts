#!/usr/bin/env bash

source message_functions || exit 1

LIMS_JSON="/data/ops/lims/prod/lims.json"
LAMA_JSON="/data/ops/lims/pilot/lims.json"

barcodes=("$@")
compare_mode="true"

check_fields=(
  patient
  sample_name
  sample_id
  submission
  entity
  project_name
  cohort
  shallowseq
  analysis_type
  ref_sample_id
  report_viral
  report_pgx
  report_germline
  report_germline_level
  sampling_date
  arrival_date
  report_date
  biopsy_site
  ptum
  hospital_pa_sample_id
  hospital_patient_id
  lab_sop_versions
  yield
  lab_status
)

main () {
  if [[ "${#barcodes[@]}" -gt 0 ]]; then
    for barcode in "${barcodes[@]}"; do
      check_sample "$barcode"
    done
  else
    warn "No barcodes provided"
  fi
}

check_sample () {
  local barcode=$1 && shift
  echo "-- Checking sample $barcode --"
    if [[ "$compare_mode" == "true" ]]; then
      compare_by_sample_barcode "$barcode"
    else
      print_tsv_by_sample_barcode "$barcode"
    fi
}

compare_by_sample_barcode () {
  local barcode=$1 && shift

  lims_result=$(query_lims "$LIMS_JSON" "$barcode" "json")
  lama_result=$(query_lims "$LAMA_JSON" "$barcode" "json")

  sample_name=$(jq -r '.sample_name//"NA"' <<< "$lims_result")
  analysis_type=$(jq -r '.analysis_type//"NA"' <<< "$lims_result")
  field_name="NA"

  present_in_lims="Absent"
  present_in_lama="Absent"

  if [[ "$lims_result" != 'null' ]]; then present_in_lims="Present"; fi
  if [[ "$lama_result" != 'null' ]]; then present_in_lama="Present"; fi

  if [[ "$present_in_lims" == "Absent" || "$present_in_lama" == "Absent" ]]; then
      printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        "FAIL" "$barcode" "$sample_name" "$analysis_type" "$field_name" "LIMS=$present_in_lims" "LAMA=$present_in_lama"
  else
    sample_name=$(jq -r '.sample_name' <<< "$lims_result")
    for field_name in "${check_fields[@]}"; do
      lims_val=$(jq -r --arg key "$field_name" '.[$key]' <<< "$lims_result")
      lama_val=$(jq -r --arg key "$field_name" '.[$key]' <<< "$lama_result")
      result="FAIL"

      if [[ "$lims_val" == "$lama_val" ]]; then
        result="OK"
      elif [[ "$lims_val" == "" && "$lama_val" == "null" ]]; then
        result="OK"
      elif [[ "$lims_val" == "" && "$lama_val" == "NA" ]]; then
        result="OK"
      elif [[ "${lims_val^^}" == "${lama_val^^}" ]]; then
        # downgrade a case insensitive match to warning
        result="WARN"
      elif [[ "${field_name}" == "lab_status" ]]; then
        # downgrade a mismatch for lab_status to warning because these are simply different in LAMA
        result="WARN"
      elif [[ "${field_name}" == "yield" ]]; then
        # downgrade a mismatch for yield to warning because those are handled differently since LAMA
        result="WARN"
      elif [[ "${field_name}" =~ report_ ]]; then
        # downgrade all report fields as they have been reset to defaults in LAMA
        result="WARN"
      else
        result="FAIL"
      fi
      printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        "$result" "$barcode" "$sample_name" "$analysis_type" "$field_name" "LIMS=$lims_val" "LAMA=$lama_val"
    done
  fi
}

query_lims () {
  local json=$1 && shift
  local barcode=$1 && shift
  local output=$1 && shift
  if [[ "$output" == 'json' ]]; then
    result=$(query_lims.pl -rna -lims "$json" -type samples -filter "sample_id=$barcode" -exact -json | jq -r '.[-1]')
  elif [[ "$output" == 'tsv' ]]; then
    result=$(query_lims.pl -rna -lims "$json" -type samples -filter "sample_id=$barcode" -exact)
  else
    die "Unknown output type given to query_lims ($output)"
  fi
  echo "$result"
}

print_tsv_by_sample_barcode () {
  local barcode=$1 && shift
  lims_result=$(query_lims "$LIMS_JSON" "$barcode" "tsv")
  lama_result=$(query_lims "$LAMA_JSON" "$barcode" "tsv")
  printf "%s: %s\n" "LIMS" "$lims_result"
  printf "%s: %s\n" "LAMA" "$lama_result"
}

main
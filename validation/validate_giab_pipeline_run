#!/usr/bin/env bash

source message_functions || exit 1

gatk_path='/data/common/tools/gatk_v3.8.0/GenomeAnalysisTK.jar'
rtg="/data/common/tools/rtg-tools_v3.6.2/installation/rtg-tools-3.6.2-bc71ee0/rtg"
ref_genome_fasta='/data/common/refgenomes/Homo_sapiens.GRCh37.GATK.illumina/Homo_sapiens.GRCh37.GATK.illumina.fasta'
rtg_sdf_path='/data/common/dbs/RTGSDF_GRCh37/'

truth_version='NIST_v3.2.2';
truth_dir_path="/data/giab/truth/${truth_version}/"
truth_bed_name='NA12878_GIAB_highconf_IllFB-IllGATKHC-CG-Ion-Solid_ALLCHROM_v3.2.2_highconf.bed'
truth_bed_path="${truth_dir_path}/${truth_bed_name}"
truth_vcf_name='NA12878_GIAB_highconf_IllFB-IllGATKHC-CG-Ion-Solid_ALLCHROM_v3.2.2_highconf.vcf.gz'
truth_vcf_path="${truth_dir_path}/${truth_vcf_name}"
truth_vcf_path_snv=$(echo ${truth_vcf_path} | sed 's/\.vcf\.gz/_SNP\.vcf.\gz/')

if [[ ! -f "${gatk_path}" ]]; then error "GATK JAR not available (${gatk_path})"; fi
if [[ ! -f "${ref_genome_fasta}" ]]; then error "Ref fasta not available (${ref_genome_fasta})"; fi
if [[ ! -f "${truth_vcf_path}" ]]; then error "truth VCF not available (${truth_vcf_path})"; fi
if [[ ! -f "${truth_bed_path}" ]]; then error "truth BED not available (${truth_bed_path})"; fi
if [[ ! -d "${rtg_sdf_path}" ]]; then error "RTG SDF directory not found (${rtg_sdf_path})"; fi
if [[ ! $(command -v datamash) ]]; then error "Dependency 'datamash' not found"; fi
if [[ ! $(command -v $rtg) ]]; then error "Dependency 'rtg' not found"; fi

if [[ $1 == "" || $1 == "-h" || $1 == "--help" ]]; then
    echo "-----"
    echo " Descr: Validate GIAB run"
    echo " Usage: $(basename $0) <path-to-pipeline-dir>"
    echo "        $(basename $0) /data/giab/pipelineruns/170615_VAL-S00057_v1.12_KG"
    echo "-----"
    exit 1
fi

run_path=$1 && shift
if [[ ! -w "${run_path}" ]]; then error "Run path not writable (${run_path})"; fi

## -----
## Checks and Setup
## -----
if [[ ! -d "${run_path}" ]]; then error "Provided run path does not exist?"; fi

## find input VCF
input_vcf_path=$(find "${run_path}" -wholename "*/germline_caller/*.germline.vcf.gz")
if [[ ! -f "${input_vcf_path}" ]]; then error "No germline VCF found (${run_path})"; fi

output_dir="${run_path}/verification"
tmp_dir="${output_dir}/tmp"

if [[ -d "${output_dir}" ]]; then error "output_dir already exists (${output_dir})"; fi

info "Creating output dir (${output_dir})"
mkdir -p "${output_dir}"
mkdir -p "${tmp_dir}"

## -----
## VCF preparation
## -----
start_vcf_path="${output_dir}/input.vcf"
start_vcf_name="$(basename "${start_vcf_path}")"

if [[ ${input_vcf_path} =~ .vcf$ ]]; then
    info "Copying Germline VCF to ${start_vcf_path}"
    cp "${input_vcf_path}" "${start_vcf_path}"
elif [[ ${input_vcf_path} =~ .gz$ ]]; then
    info "Germline VCF is compressed: gunzippig to ${start_vcf_path}"
    gunzip -c "${input_vcf_path}" > "${start_vcf_path}"
else
    error "Germline VCF of unsupported extension"
fi

info "Running RTGTools bgzip on ${start_vcf_name}"
$rtg bgzip "${start_vcf_path}"
start_vcf_path="${start_vcf_path}.gz"
start_vcf_name="${start_vcf_name}.gz"
info "Running RTGTools index on ${start_vcf_name}"
$rtg index -f vcf "${start_vcf_path}"

## -----
## Use GATK SelectVariants to separate SNVs and INDELs
## -----
snp_vcf_path="${output_dir}/SNP_${start_vcf_name}"
snp_vcf_name=$(basename "${snp_vcf_path}")

if [[ -f "${snp_vcf_path}" ]]; then
    info "SNP vcf already exist, skipping (${snp_vcf_path})"
else
    info "Running GATK to create SNP vcf (${snp_vcf_name})"
    java -Djava.io.tmp_dir="${tmp_dir}" -jar "${gatk_path}" \
        -T SelectVariants \
        -R "${ref_genome_fasta}" \
        -L "${truth_bed_path}" \
        --excludeNonVariants \
        --removeUnusedAlternates \
        -V "${start_vcf_path}" \
        -selectType SNP \
        -o "${snp_vcf_path}"
    if [[ $? -ne 0 ]]; then { error "GATK SelectVariants Failed"; } fi
fi

## no INDELs for now
#if [[ -f "${indVcfPath}" ]]; then
#    info "INDEL vcf already exist, skipping (${indVcfPath})"
#else
#    info "Running GATK to create INDEL vcf (${indVcfName})"
#    java -jar ${gatk_path} -T SelectVariants -R ${ref_genome_fasta} -L ${truth_bed_path} --excludeNonVariants --removeUnusedAlternates -V ${start_vcf_path} -selectType INDEL -o ${indVcfPath}
#fi


## -----
## run RTGtools vcfeval
## -----
call_name="${snp_vcf_name}"
call_name=$(echo "${call_name}" | sed 's/\.filtered_variants\.vcf\.gz//')
call_name=$(echo "${call_name}" | sed 's/\.annotated\.vcf\.gz//')
call_name=$(echo "${call_name}" | sed 's/\.germline\.vcf\.gz//')

rtg_out_name="${truth_version}_vs_${call_name}_truthBed";
rtg_out_path="${output_dir}/${rtg_out_name}"
sum_out_path="${rtg_out_path}/summary.txt"

rtg_tsv_out_path="${rtg_out_path}/rtg_summary.tsv"
rtg_csv_out_path="${rtg_out_path}/rtg_summary.csv"
wgs_tsv_out_path="${output_dir}/wgs_metrics.tsv"
wgs_csv_out_path="${output_dir}/wgs_metrics.csv"

wgs_metrics_count=$(find "${run_path}" -name "*.wgsmetrics" | wc -l)
if [[ "${wgs_metrics_count}" -eq 1 ]]; then
    wgs_metrics_path=$(find "${run_path}" -name "*.wgsmetrics")
    cat "${wgs_metrics_path}" | grep -A1 GENOME | datamash transpose -W > "${wgs_tsv_out_path}"
    cat "${wgs_metrics_path}" | grep -A1 GENOME | datamash transpose -W --output-delimiter "," > "${wgs_csv_out_path}"
else
    warn "Search for wgsmetrics found ${wgs_metrics_count} files"
fi

info "Running RTGtools vcfeval (${rtg_out_name})"
$rtg vcfeval \
    --template "${rtg_sdf_path}" \
    --threads=8 \
    --baseline="${truth_vcf_path_snv}" \
    --calls="${snp_vcf_path}" \
    --bed-regions="${truth_bed_path}" \
    --output "${rtg_out_path}"

info "Reformatting RTGtools vcfeval results into csv/tsv"
cat "${sum_out_path}" | grep -P "Threshold|None" | datamash transpose --whitespace > "${rtg_tsv_out_path}"
cat "${sum_out_path}" | grep -P "Threshold|None" | datamash transpose --whitespace --output-delimiter "," > "${rtg_csv_out_path}"

info "Final output written to:"
info "  WGSMetrics: ${wgs_tsv_out_path}"
info "  RTGTools: ${rtg_tsv_out_path}"
info "Finished with $(basename $0)"

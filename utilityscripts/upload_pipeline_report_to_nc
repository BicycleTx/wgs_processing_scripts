#!/usr/bin/env bash

source message_functions || exit 1

set=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")
bucket=$( echo $runs_json | jq -r '.[].bucket' )
pipeline_version=$( echo $runs_json | jq -r '.[].version' | cut -d"." -f1,2 )
sample=$( echo $runs_json | jq -r '.[].set.tumor_sample' )
barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${sample}'") | .barcode' | cut -d"_" -f1 )

[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

report=$( gsutil ls gs://patient-reporter-prod-1/ | grep ${sample} | grep dna_analysis_report.pdf )
report=$( echo ${report#"gs://patient-reporter-prod-1/"} )

set_url="gs://${bucket}/${set}"

##TODO remove when hotfix is made
# Check whether there was an error (potentially present in SAGE 3.0.1)
sage_exception_count=$(gsutil cat ${set_url}/sage_somatic/run.log | grep "Exception in thread")
if [[ ${sage_exception_count} -ge 1 ]]; then
    warn "Exceptions found in SAGE run log!"
else
    info "No exceptions found in SAGE run log!"
fi

### upload report to NC
upload_file_to_nc_new_reports_viewing gs://patient-reporter-prod-1/ $report &> /dev/null
info "The report $report is uploaded from gs://patient-reporter-prod-1/ to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"

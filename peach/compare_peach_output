#!/usr/bin/env bash

# Only built to run at datastore

source locate_files || exit 1
source message_functions || exit 1

SCRIPT_NAME="$(basename "$0")"

TRUE="TRUE"
FALSE="FALSE"

SAMPLE_DELIMITER="|"

MAX_THREADS=10

print_usage() {
  echo ""
  echo "Descr: Compare PEACH output with control outputs."
  echo "       See gs://hmf-crunch-experiments/david_peach_experiments/test_runs for some runs to try"
  echo "Usage: $(basename "$0")"
  echo "Exmpl: $(basename "$0") \\ "
  echo "       --input_base_dir /some/input/dir \\ "
  echo "       --output_base_dir /some/output/dir \\ "
  echo "       --control_base_dir /some/control/dir \\ "
  echo "       --main /peach/repo/peach \\ "
  echo "       --venv /some/peach/venv/ \\"
  echo "       --samples \"SAMPLE1|SAMPLE2\""
  echo ""
  echo "Unless specified otherwise, default values of optional parameters are taken from the locate_files script"
  echo "Options:"
  echo "  -i/--input_base_dir                 [REQUIRED]   Directory containing pipeline run directories to test."
  echo "  -o/--output_base_dir                [REQUIRED]   Directory to write output too."
  echo "  -c/--control_base_dir               [REQUIRED]   Directory containing control outputs."
  echo "  -s/--samples                        [OPTIONAL]   List of samples to compare, separated by '${SAMPLE_DELIMITER}'."
  echo "                                                   If left empty, use all subdirectories in 'input_base_dir'."
  echo "  -m/--peach_main                     [OPTIONAL]   Path to the main PEACH script in a local copy of the PEACH git repo."
  echo "  -v/--venv                           [OPTIONAL]   Directory containing a Python virtual environment with PEACH's dependencies."
  echo "  -p/--panel                          [OPTIONAL]   Path to PEACH panel JSON."
  echo "  -a/--vcf_reference_assembly_version [OPTIONAL]   37 or 38, to designate the version of the reference genome used in the run."
  echo "                                                   Default=37."
  echo ""
  exit 1
}

main() {
  info "Started ${SCRIPT_NAME}"

  # Parse args
  local key
  local input_base_dir
  local output_base_dir
  local control_base_dir
  local samples
  local peach_main
  local panel_path
  local optional_peach_args
  local unrecognized_options

  while [[ $# -gt 0 ]]
  do
  key=$1 && shift
  case $key in
      -i|--input_base_dir)
      input_base_dir="$1" && shift
      ;;
      -o|--output_base_dir)
      output_base_dir="$1" && shift
      ;;
      -c|--control_base_dir)
      control_base_dir="$1" && shift
      ;;
      -s|--samples)
      samples="$1" && shift  # Optional argument
      ;;
      -m|--main)
      peach_main="$1" && shift
      optional_peach_args+=("--main" "${peach_main}")  # Optional argument
      ;;
      -v|--venv)
      optional_peach_args+=("--venv" "$1") && shift  # Optional argument
      ;;
      -p|--panel)
      panel_path="$1" && shift
      optional_peach_args+=("--panel" "${panel_path}")  # Optional argument
      ;;
      -a|--vcf_reference_assembly_version)
      optional_peach_args+=("--vcf_reference_assembly_version" "$1") && shift  # Optional argument
      ;;
      *)    # Unknown option
      unrecognized_options+=("$key") # Save it in an array for later
      ;;
  esac
  done

  # Default values for arguments
  if [[ -z ${peach_main} ]]; then
    peach_main=""
  fi
  if [[ -z ${panel_path} ]]; then
    panel_path=""
  fi
  
  # Sanity checks
  sanity_check_fail="${FALSE}"
  if [[ ! "${#unrecognized_options[@]}" -eq 0 ]]; then
    warn "Unrecognized options! : ${unrecognized_options[*]}"
    sanity_check_fail="${TRUE}"
  fi
  if [[ ! -d ${input_base_dir} ]]; then
    warn "input_base_dir should be a dir: ${input_base_dir}."
    sanity_check_fail="${TRUE}"
  fi
  if [[ ! -d ${control_base_dir} ]]; then
    warn "control_base_dir should be a dir: ${control_base_dir}."
    sanity_check_fail="${TRUE}"
  fi
  if [[ -z ${output_base_dir} ]]; then
    warn "output_base_dir should not be an empty string: ${output_base_dir}."
    sanity_check_fail="${TRUE}"
  fi
  if [[ "${sanity_check_fail}" == "${TRUE}" ]]; then
    print_usage
  fi

  if [[ -z ${samples} ]]; then
    samples=$(find "${input_base_dir}" -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 -n 1 -I% basename % | tr '\n' "${SAMPLE_DELIMITER}")
  fi

  if [[ -d ${output_base_dir} ]]; then
    info "Delete output base dir ${output_base_dir}"
    rm -r "${output_base_dir}" || die "Could not delete output base dir ${output_base_dir}"
  fi
  info "Create output base dir ${output_base_dir}"
  mkdir -p "${output_base_dir}" || die "Could not create output base dir ${output_base_dir}"

  info "Run PEACH pilot"
  run_peach_pilot_on_subdirs "${input_base_dir}" "${output_base_dir}" "${samples}" "${optional_peach_args[@]}" \
      || die "Could not run PEACH pilot"
  
  info "Compare PEACH output"
  compare_peach_pilot_output_to_control "${input_base_dir}" "${output_base_dir}" "${control_base_dir}" "${samples}" \
      || die "Could not compare PEACH output to control"
  
  info "Finished ${SCRIPT_NAME}"
}

run_peach_pilot_on_subdirs() {
  local input_base_dir=$1 && shift
  local output_base_dir=$1 && shift
  local samples=$1 && shift
  optional_peach_args=("$@")

  if [[ -z "${samples}" ]]; then
    die "Not enough arguments to ${FUNCNAME[0]}"
  fi

  info "Subdirs: $(ls "${input_base_dir}")"
  echo "${samples}" | xargs -d "${SAMPLE_DELIMITER}" -n 1 -P "${MAX_THREADS}" -I % \
      run_peach_pilot --run_dir "${input_base_dir}/%" --output_dir "${output_base_dir}/%" "${optional_peach_args[@]}" \
      || die "Could not run PEACH pilot"
}

compare_peach_pilot_output_to_control() {
  local input_base_dir=$1 && shift
  local output_base_dir=$1 && shift
  local control_base_dir=$1 && shift
  local samples=$1 && shift

  if [[ -z "${samples}" ]]; then
    die "Not enough arguments to ${FUNCNAME[0]}"
  fi

  local IFS
  IFS="${SAMPLE_DELIMITER}" read -ra sample_array <<< "${samples}"
  local run_name
  for run_name in "${sample_array[@]}"; do
    compare_directory_contents "${output_base_dir}/${run_name}" "${control_base_dir}/${run_name}" \
        || die "Could not compare directory contents"
  done
}

compare_directory_contents() {
  local output_dir=$1 && shift
  local control_dir=$1 && shift

  if [[ -z "${control_dir}" ]]; then
    die "Not enough arguments to ${FUNCNAME[0]}"
  fi

  info "Start comparing ${output_dir} to ${control_dir}"

  if [[ ! -d "${output_dir}" ]]; then
    die "Output dir does not exist: ${output_dir}"
  fi
  if [[ ! -d "${control_dir}" ]]; then
    die "Control dir does not exist: ${control_dir}"
  fi

  local comparison_file_names
  comparison_file_names=$(get_comparison_file_names "${output_dir}" "${control_dir}") \
        || die "Could not get file names to compare"

  local actual_file
  local control_file
  for file_name in $(echo ${comparison_file_names})
  do
    info "Diff for ${file_name}"
    actual_file="${output_dir}/${file_name}"
    control_file="${control_dir}/${file_name}"

    [[ -f "${actual_file}" ]] || warn "Cannot find file ${actual_file}"
    [[ -f "${control_file}" ]] || warn "Cannot find file ${control_file}"

    if [[ -f "${actual_file}" &&  -f "${control_file}" ]]; then
      diff "${actual_file}" "${control_file}"
    fi
  done

  info "Finished comparing ${output_dir} to ${control_dir}"
}

get_comparison_file_names() {
  local output_dir=$1 && shift
  local control_dir=$1 && shift

  if [[ -z "${control_dir}" ]]; then
    die "Not enough arguments to ${FUNCNAME[0]}"
  fi

  local comparison_file_names
  comparison_file_names=$({ ls "${output_dir}" & ls "${control_dir}";} | sort -u ) \
      || die "Could not get comparison file names"

  echo "${comparison_file_names}"
}

main "$@"
#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1
source metadata_functions || exit 1

SCRIPT_NAME="$(basename "$0")"

TRUE="TRUE"
FALSE="FALSE"

DEFAULT_PANEL_NAME="min_DPYD.json"

print_usage() {
  echo ""
  echo "Descr: Do a pilot run of PEACH"
  echo "Usage: $(basename "$0") --rundir /some/run"
  echo "Exmpl: $(basename "$0") --rundir /some/run"
  echo "       $(basename "$0") --rundir /some/run --main /peach/repo/peach --venv /some/peach/venv/"
  echo ""
  echo "Unless specified otherwise, default values of optional parameters are taken from the locate_files script"
  echo "Options:"
  echo "  -r/--run_dir                        [REQUIRED]   Directory containing a pipeline run."
  echo "  -o/--output_dir                     [REQUIRED]   Directory to write output too."
  echo "  -m/--peach_main                     [OPTIONAL]   Path to the main PEACH script in a local copy of the PEACH git repo."
  echo "  -v/--venv                           [OPTIONAL]   Directory containing a Python virtual environment with PEACH's dependencies."
  echo "  -p/--panel                          [OPTIONAL]   Path to PEACH panel JSON."
  echo "  -a/--vcf_reference_assembly_version [OPTIONAL]   V37 or V38, to designate the version of the reference genome used in the run."
  echo "                                                   Default=V37."
  echo ""
  exit 1
}

main() {
  info "Started ${SCRIPT_NAME}"

  # Parse args
  local key
  local run_dir
  local output_dir
  local peach_main
  local venv_dir
  local panel_path
  local optional_reference_assembly_version_arg

  while [[ $# -gt 0 ]]
  do
  key="$1" && shift
  case $key in
      -r|--run_dir)
      run_dir="$1" && shift
      ;;
      -o|--output_dir)
      output_dir="$1" && shift
      ;;
      -m|--main)
      peach_main="$1" && shift  # Optional argument
      ;;
      -v|--venv)
      venv_dir="$1" && shift  # Optional argument
      ;;
      -p|--panel)
      panel_path="$1" && shift  # Optional argument
      ;;
      -a|--vcf_reference_assembly_version)
      optional_reference_assembly_version_arg=" --vcf_reference_assembly_version $1" && shift  # Optional argument
      ;;
      *)    # Unknown option
      OTHER_OPTIONS+=("$key") # Save it in an array for later
      ;;
  esac
  done

  # Default values for arguments
  if [[ -z ${peach_main} ]]; then
    peach_main=$(locate_peach_main) || die "Could not get default PEACH main path"
  fi
  if [[ -z ${venv_dir} ]]; then
    venv_dir=$(locate_peach_venv_dir) || die "Could not get default PEACH venv dir"
  fi
  if [[ -z ${panel_path} ]]; then
    local peach_resource_dir
    peach_resource_dir=$(locate_peach_resource_dir) || die "Could not get PEACH resource dir"
    local panel_path="${peach_resource_dir}/panelfiles/${DEFAULT_PANEL_NAME}"
  fi
  if [[ -z ${optional_reference_assembly_version_arg} ]]; then
    optional_reference_assembly_version_arg=""
  fi

  # Sanity checks
  local sanity_check_fail="${FALSE}"
  if [[ ! "${#OTHER_OPTIONS[@]}" -eq 0 ]]; then
    warn "Unrecognized options! : ${OTHER_OPTIONS[*]}"
    sanity_check_fail="${TRUE}"
  fi
  if [[ -z ${run_dir} ]]; then
    warn "Variable 'rundir' has not been set."
    sanity_check_fail="${TRUE}"
  fi
  if [[ ! -d ${run_dir} ]]; then
    warn "run_dir should be a dir: ${run_dir}."
    sanity_check_fail="${TRUE}"
  fi
  if [[ -z ${output_dir} ]]; then
    warn "Variable 'outputdir' has not been set."
    sanity_check_fail="${TRUE}"
  fi
  if [[ ! -d ${venv_dir} ]]; then
    warn "venv_dir should be a dir: ${venv_dir}."
    sanity_check_fail="${TRUE}"
  fi
  if [[ "${sanity_check_fail}" == "${TRUE}" ]]; then
    print_usage
  fi

  # Get argument values
  local peach_version
  peach_version=$(echo "pilot" | tr "_" " " | tr "v" " "| awk '{print $1}')
  local ref_sample
  ref_sample=$(load_ref_sample_from_metadata "${run_dir}") || die "Could not get ref sample from metadata"
  local tumor_sample
  tumor_sample=$(load_tumor_sample_from_metadata "${run_dir}") || die "Could not get tumor sample from metadata"
  local germline_vcf
  germline_vcf=$(locate_purple_germline_variants "${run_dir}") || die "Could not get purple germline vcf path"

  # Check input file existence
  [[ -f ${germline_vcf} ]] || die "Germline vcf could not be found"
  [[ -f ${panel_path} ]] || die "Panel file could not be found"

  # Start virtual venv
  source "${venv_dir}/bin/activate" || die "Could not activate PEACH venv"

  # Add path to environment variable
  export PYTHONPATH="${PYTHONPATH}:${peach_main}/../"

  # Run PEACH
  "${peach_main}" \
      "--vcf" "${germline_vcf}" \
      "--sample_t_id" "${tumor_sample}" \
      "--sample_r_id" "${ref_sample}" \
      "--tool_version" "${peach_version}" \
      "--outputdir" "${output_dir}"  \
      "--panel" "${panel_path}" \
      ${optional_reference_assembly_version_arg} \
      || die "PEACH pilot failed"

  info "Finished ${SCRIPT_NAME}"
}

main "$@"

#!/bin/bash
#
# Performs GRIDSS preprocessing
#
source do_run_gridss_lib

if [[ ! -f $gridss_raw_vcf ]] ; then
	assert_calling_complete
	if [[ ! -f $gridss_raw_vcf.unannotated2.vcf ]] ; then
		assert_preprocessing_complete
		assert_assembly_complete
		echo $(date) AnnotateVariants
		/usr/bin/time -o ${log_prefix}.AnnotateVariants.log \
		java -Xmx8G $gridss_jvm_args \
			-Dgridss.output_to_temp_file=true \
			gridss.AnnotateVariants \
			$gridss_common_args \
			INPUT=$normal_bam \
			INPUT=$tumor_bam \
			INPUT_VCF=$gridss_raw_vcf.unannotated.vcf \
			OUTPUT_VCF=$gridss_raw_vcf.unannotated2.vcf \
			ASSEMBLY=$assembly_bam \
			WORKER_THREADS=$threads \
			BLACKLIST=$blacklist \
			CONFIGURATION_FILE=$gridss_config_file
	fi
	if [[ ! -f $gridss_raw_vcf ]] ; then
		echo $(date) AnnotateUntemplatedSequence
		/usr/bin/time -o ${log_prefix}.AnnotateUntemplatedSequence.log \
		java -Xmx1G $gridss_jvm_args \
			-Dgridss.output_to_temp_file=true \
			gridss.AnnotateUntemplatedSequence \
			REFERENCE_SEQUENCE=$ref_genome \
			INPUT=$gridss_raw_vcf.unannotated2.vcf \
			OUTPUT=$gridss_raw_vcf \
			WORKER_THREADS=$threads && \
		rm $gridss_raw_vcf.unannotated2.vcf*
	fi
fi
# grep -ve '\[' $gridss_raw_vcf | grep -ve '\]' | grep -v BEALN | grep -v "#" | cut -f 3,5 | tr -d '.' | sed -e 's/^/>/' | tr '\t' '\n'
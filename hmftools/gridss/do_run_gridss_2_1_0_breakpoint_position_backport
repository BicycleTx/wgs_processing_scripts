#!/bin/bash
#
# Adjusts the breakpoint position to match GRIDSS 2.1.0 calling positions
#
source do_run_gridss_lib

export PATH=$base_path/tools/bedops_v2.4.30/:$PATH

PICARD_JAR=$base_path/tools/picard-tools_v1.135/picard.jar

jar=~/gridss-2.1.0-gridss-jar-with-dependencies.jar

original_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name *gridss.vcf.gz)
output_vcf=$(dirname ${original_vcf})/${tumor_sample}.gridss.somatic.vcf.gz
full_vcf=$(dirname ${original_vcf})/${tumor_sample}.gridss.somatic.full.vcf.gz
assembly_sv_bam=$assembly_bam.gridss.working/$(basename $assembly_bam).sv.bam
out_dir=$(basename $full_vcf)/breakpoint_position_backport
region_bed=$out_dir/region.bed

# check that the assembly actually exists
if [ ! -f $assembly_sv_bam ] ; then
	echo "Missing $input_assembly"
fi

if [ -d $out_dir ] ; then
	echo "Backport processing directory found. Existing."
	exit 1
fi
if [ -z ${original_vcf} ]
then
	echo "Unable to locate raw gridss structural variants. Exiting."
	exit 1
fi
mkdir $out_dir
rsync -r --exclude=*.bam --exclude=breakpoint_position_backport --exclude=*vcf* --exclude=jobs --exclude=logs . $out_dir
cd $out_dir
normal_bam=$out_dir/$(basename $normal_bam)
tumor_bam=$out_dir/$(basename $tumor_bam)
assembly_bam=$out_dir/$(basename $assembly_bam)
# Mock input files because GRIDSS needs these as positional arguments though the reads are ignored
samtools view $input_assembly | samtools view -b - > empty.bam
ln -s empty.bam $normal_bam
ln -s empty.bam $tumor_bam
ln -s ../empty.bam $normal_bam.gridss.working/$(basename $normal_bam).sv.bam
ln -s ../empty.bam $tumor_bam.gridss.working/$(basename $tumor_bam).sv.bam

gunzip -c $full_vcf | vcf2bed | cut -f 1-3 | bedops --range 2000 --everything /dev/stdin > region.bed

java -Xmx2G $gridss_jvm_args -cp $jar gridss.ExtractFullReads \
	 I=$assembly_sv_bam \
	 O=$assembly_bam \
	 R=$ref_genome \
	 EXTRACT_SPLITS=true \
	 REGION_BED=$region_bed

java -Xmx6G $gridss_jvm_args \
	-Dgridss.async.buffersize=16 \
	-Dgridss.output_to_temp_file=true \
	gridss.SoftClipsToSplitReads \
	$gridss_common_args \
	I=$assembly_bam \
	O=${assembly_sv_bam} \
	REALIGN_EXISTING_SPLIT_READS=true \
	REALIGN_ENTIRE_READ=true \
	WRITE_OA=false \
	WORKER_THREADS=$threads

java -Xmx4G $gridss_jvm_args -cp $jar gridss.AllocateEvidence \
	ALLOCATE_READS=false \
	I=$normal_bam \
	I=$tumor_bam \
	ASSEMBLY=$assembly_bam \
	INPUT_VCF=$full_vcf \
	OUTPUT_VCF=$out_dir/$(basename $full_vcf) \
	R=$ref_genome \
	CONFIGURATION_FILE=$gridss_config_file \
	WORKER_THREADS=$threads

java -Xmx4G $gridss_jvm_args -cp $jar gridss.AllocateEvidence \
	ALLOCATE_READS=false \
	I=$normal_bam \
	I=$tumor_bam \
	ASSEMBLY=$assembly_bam \
	INPUT_VCF=$output_vcf \
	OUTPUT_VCF=$out_dir/$(basename $output_vcf) \
	R=$ref_genome \
	CONFIGURATION_FILE=$gridss_config_file \
	WORKER_THREADS=$threads


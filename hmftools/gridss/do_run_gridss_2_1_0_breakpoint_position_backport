#!/usr/bin/env bash

source do_run_gridss_lib

export PATH=${base_path}/tools/bedops_v2.4.30/:$PATH

libgridss=/data/common/repos/scripts/gridss/

original_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name *gridss.vcf.gz)
if [[ -z ${original_vcf} ]]; then
    # Support for pv5 location of raw GRIDSS VCF.
    original_vcf=$(find -L ${run_dir}/structural_caller/ -type f -name *.unfiltered.vcf.gz)
fi

raw_somatic_vcf=$(dirname ${original_vcf})/${tumor_sample}.gridss.somatic.vcf.gz
full_vcf=$(dirname ${original_vcf})/${tumor_sample}.gridss.somatic.full.vcf.gz
assembly_sv_bam=${assembly_bam}.gridss.working/$(basename ${assembly_bam}).sv.bam
out_dir=$(dirname ${full_vcf})/breakpoint_position_backport
region_bed=${out_dir}/region.bed
corrected_vcf=${out_dir}/$(basename ${raw_somatic_vcf}).breakpoint_position_backport.vcf

if [[ -a ${corrected_vcf}.gz ]]; then
    echo "[WARN] Already applied backport. Exiting."
    exit 1
fi

# check that the assembly actually exists
if [[ ! -f ${assembly_sv_bam} ]]; then
	  echo "Missing $assembly_sv_bam"
	  exit 1
fi

if [[ -z ${original_vcf} ]]; then
	  echo "Unable to locate raw gridss structural variants. Exiting."
	  exit 1
fi

if [[ -d "$out_dir" ]]; then
	  echo "Backport processing directory $out_dir found."
else
	  echo "Creating ${out_dir}"
	  mkdir -p ${out_dir}/tmp
	  chmod 775 ${out_dir}
	  rsync -r --exclude=*.bam --exclude=*.bai --exclude=breakpoint_position_backport --exclude=*vcf* --exclude=jobs --exclude=logs $(dirname ${full_vcf})/ ${out_dir}
fi

normal_bam=${out_dir}/$(basename ${normal_bam})
tumor_bam=${out_dir}/$(basename ${tumor_bam})
assembly_bam=${out_dir}/$(basename ${assembly_bam})
somatic_vcf=${out_dir}/$(basename ${raw_somatic_vcf} .gz)

gridss_jvm_args="
		-ea
		-Dsamjdk.create_index=true
		-Dsamjdk.use_async_io_read_samtools=true
		-Dsamjdk.use_async_io_write_samtools=true
		-Dsamjdk.use_async_io_write_tribble=true
		-Dsamjdk.buffer_size=2097152
		-cp $gridss_jar "

gridss_common_args="
		TMP_DIR=$out_dir/tmp
		WORKING_DIR=$out_dir
		REFERENCE_SEQUENCE=$ref_genome "

# always remake the symlink since an earlier version of this script used absolute paths
# which broke the symlinks when moved datastore as the absolute paths are different
unlink ${normal_bam}
unlink ${tumor_bam}
unlink ${normal_bam}.gridss.working/$(basename ${normal_bam}).sv.bam
unlink ${tumor_bam}.gridss.working/$(basename ${tumor_bam}).sv.bam
ln -s empty.bam ${normal_bam}
ln -s empty.bam ${tumor_bam}
mkdir -p ${normal_bam}.gridss.working/ ${tumor_bam}.gridss.working/
ln -s ../empty.bam ${normal_bam}.gridss.working/$(basename ${normal_bam}).sv.bam
ln -s ../empty.bam ${tumor_bam}.gridss.working/$(basename ${tumor_bam}).sv.bam

if [[ ! -f ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}) ]] ; then
	  # Mock input files because GRIDSS needs these as positional arguments even though the reads are ignored
	  echo "Generating empty bam from $assembly_sv_bam"
	  samtools view -H ${assembly_sv_bam} | samtools view -b - > ${out_dir}/empty.bam
	
	  gunzip -c ${raw_somatic_vcf} | vcf2bed | cut -f 1-3 | bedops --range 2000 --everything /dev/stdin > ${region_bed}

	  java -Xmx2G ${gridss_jvm_args} gridss.ExtractFullReads \
		 I=${assembly_sv_bam} \
		 O=${assembly_bam} \
		 R=${ref_genome} \
		 EXTRACT_SPLITS=true \
		 TMP_DIR=${out_dir} \
		 REGION_BED=${region_bed} | exit 1

	  java -Xmx6G ${gridss_jvm_args} \
        -Dgridss.async.buffersize=16 \
        -Dgridss.output_to_temp_file=true \
        gridss.SoftClipsToSplitReads \
        ${gridss_common_args} \
        I=${assembly_bam} \
        O=${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}) \
        REALIGN_EXISTING_SPLIT_READS=true \
        REALIGN_ENTIRE_READ=true \
        WRITE_OA=false \
        WORKER_THREADS=${threads} | exit 1
fi

if [[ ! -f ${corrected_vcf}.gz ]] ; then
	  if [[ ! -f ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}).full.bam ]]; then
		    mv ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}) ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}).full.bam
		    rm ${out_dir}/$(basename ${assembly_bam}).gridss.working/*.bai
	  fi
    gunzip -c ${raw_somatic_vcf} | tr ';' '\n' | grep BEID= | cut -b 6- | tr ',' '\n' | sort | uniq > ${out_dir}/assembly_ids.txt
    echo "@HD" >> ${out_dir}/assembly_ids.txt
    echo "@SQ" >> ${out_dir}/assembly_ids.txt
    samtools view -h ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam}).full.bam | fgrep -f ${out_dir}/assembly_ids.txt | samtools view -b - > ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam})
    samtools index ${out_dir}/$(basename ${assembly_bam}).gridss.working/$(basename ${assembly_sv_bam})
    unadjusted_vcf=${out_dir}/$(basename ${somatic_vcf}).unadjusted.vcf
    java -Xmx4G ${gridss_jvm_args} gridss.AllocateEvidence \
        ALLOCATE_READS=false \
        I=${normal_bam} \
        I=${tumor_bam} \
        ASSEMBLY=${assembly_bam} \
        INPUT_VCF=${raw_somatic_vcf} \
        OUTPUT_VCF=${unadjusted_vcf} \
        ${gridss_common_args} \
        CONFIGURATION_FILE=${gridss_config_file} \
        WORKER_THREADS=${threads} | exit 1

    # Need to feed back to R to adjust nominal homology call position back to match gridss_somatic_filter
    Rscript ${libgridss}/gridss_adjust_call_positions.R -i ${unadjusted_vcf} -o ${corrected_vcf} -s ${libgridss}
    rm ${unadjusted_vcf}
    mv ${corrected_vcf}.bgz ${corrected_vcf}.gz
    mv ${corrected_vcf}.bgz.tbi ${corrected_vcf}.gz.tbi
fi









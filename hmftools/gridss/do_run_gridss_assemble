#!/bin/bash
#
# Performs GRIDSS assembly
#
source do_run_gridss_lib

if [[ ! -f $assembly_bam ]] ; then
	echo $(date) AssembleBreakends
	/usr/bin/time -o ${log_prefix}.AssembleBreakends.log \
	java -Xmx31G $gridss_jvm_args \
		-Dgridss.output_to_temp_file=true \
		gridss.AssembleBreakends \
		$gridss_common_args \
		INPUT=$normal_bam \
		INPUT=$tumor_bam \
		OUTPUT=$assembly_bam \
		WORKER_THREADS=$threads \
		BLACKLIST=$blacklist \
		CONFIGURATION_FILE=$gridss_config_file ||
		exit 1
fi

if [[ ! -f $assembly_bam.gridss.working/$(basename $assembly_bam).idsv_metrics ]] ; then
	# async metrics
	echo $(date) CollectGridssMetrics
	/usr/bin/time -o ${log_prefix}.assembly.CollectGridssMetrics.log \
	java -Xmx256M $gridss_jvm_args \
		gridss.analysis.CollectGridssMetrics \
		ASSUME_SORTED=true \
		I=$assembly_bam \
		O=$assembly_bam.gridss.working/$(basename $assembly_bam) \
		THRESHOLD_COVERAGE=$gridss_threshold_coverage \
		FILE_EXTENSION=null \
		GRIDSS_PROGRAM=null \
		GRIDSS_PROGRAM=CollectCigarMetrics \
		GRIDSS_PROGRAM=CollectMapqMetrics \
		GRIDSS_PROGRAM=CollectTagMetrics \
		GRIDSS_PROGRAM=CollectIdsvMetrics \
		GRIDSS_PROGRAM=ReportThresholdCoverage \
		PROGRAM=null \
		PROGRAM=CollectInsertSizeMetrics \
		2> $log_prefix.assembly.CollectGridssMetrics.log &
fi

sv_bam=$assembly_bam.gridss.working/$(basename $assembly_bam).sv.bam
if [[ ! -f $sv_bam ]] ; then
	echo $(date) SoftClipsToSplitReads
	/usr/bin/time -o ${log_prefix}.assembly.SoftClipsToSplitReads.log \
	java -Xmx3G $gridss_jvm_args \
		-Dgridss.output_to_temp_file=true \
		gridss.SoftClipsToSplitReads \
		$gridss_common_args \
		I=$assembly_bam \
		O=${sv_bam} \
		REALIGN_ENTIRE_READ=true \
		WORKER_THREADS=$threads
fi
# wait for metrics and indexing to finish
wait


#!/usr/bin/env bash

source message_functions || exit 1
source lims_functions || exit 1

sample=$1 && shift
fail_reason=$1 && shift
correction_comments=$1 && shift

if [[ -z "${sample}" ]]; then
    error "No tumor sample provided. Exiting"
fi

if [[ -z "${fail_reason}" ]]; then
    error "No fail reason provided (insufficient_tcp_shallow_wgs | insufficient_dna | technical_failure). Exiting"
fi

echo ""
echo "--- A pre-pipeline fail report will be created for ${sample}  ---"

if [[ ${correction_comments} != "" ]]; then
    echo "[IMPORTANT] this will be an correction report!"
    echo "[IMPORTANT] the following comments will be used: ${correction_comments}"
fi

if [[ $( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
    gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
    echo '[INPUT] Are you sure you want to continue with making a new report? (all data will be overwritten, except for the report when making a corrected report) Please answer Y or N.'
    read answer
    if [[ $answer != 'Y' ]]; then
        warn "Report will not be created. exiting"
        exit 1
    fi
fi


### create temp folder in VM
temp_folder_path=$( pwd )"/temp_cp_${sample}"
mkdir $temp_folder_path

# create folder for report
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report
output_dir_data_report=${temp_folder_path}/patient_report_prod_data
if [[ ! -d "${output_dir_data_report}" ]]; then
    mkdir ${output_dir_data_report}
fi


## running patient reporter
ref_sample=$(imply_ref_sample_from_tumor_sample ${sample})
ref_sample_barcode=$(find_ref_barcode_for_sample_name ${sample})
barcode=$(find_barcode_for_sample_name ${sample})

if [[ ${correction_comments} != "" ]]; then
    do_run_base_patient_reporter \
            -output_dir_report ${output_dir_report} \
            -output_dir_data ${output_dir_data_report} \
            -qc_fail \
            -qc_fail_reason ${fail_reason} \
            -ref_sample_id ${ref_sample} \
            -ref_sample_barcode ${ref_sample_barcode} \
            -tumor_sample_id ${sample} \
            -tumor_sample_barcode ${barcode} \
            -comments "${correction_comments}" \
            -corrected_report &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
else
    do_run_base_patient_reporter \
            -output_dir_report ${output_dir_report} \
            -output_dir_data ${output_dir_data_report} \
            -qc_fail \
            -qc_fail_reason ${fail_reason} \
            -ref_sample_id ${ref_sample} \
            -ref_sample_barcode ${ref_sample_barcode} \
            -tumor_sample_id ${sample} \
            -tumor_sample_barcode ${barcode} &>> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
fi

#check whether a report has been made
if [[ $( ls ${temp_folder_path}/new_report/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
    info "The report $report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the patient reporter log:"
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
    rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi

#### check log file of making the report
if [[ $( cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread" | wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
    #cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
else
    info "No warnings/errors in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/ and remove temporary run folder
gsutil -q cp -r ${temp_folder_path}/new_report/* gs://patient-reporter-manual-prod-1/
gsutil -q cp -r ${temp_folder_path}/patient_report_prod_data/* gs://patient-reporter-manual-prod-1/
info "The report $report has been created"
rm -r ${temp_folder_path}/ 2>&1
info "The report and the related log + json file can be found in gs://patient-reporter-manual-prod-1/:"
gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}

### upload report to NC
upload_report_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $report &> /dev/null
info "The report $report is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"
echo ""
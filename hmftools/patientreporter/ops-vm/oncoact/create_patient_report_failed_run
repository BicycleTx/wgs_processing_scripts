#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1
source lims_functions || exit 1

set=$1 && shift
correction_comments=$1 && shift
correction_extern=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")
bucket=$( echo $runs_json | jq -r '.[].bucket' )
pipeline_version=$( echo $runs_json | jq -r '.[].version' | cut -d"." -f1,2 )
sample=$( echo $runs_json | jq -r '.[].set.tumor_sample' )
barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${sample}'") | .barcode' | cut -d"_" -f1 )
ref_sample=$( echo $runs_json | jq -r '.[].set.ref_sample' )
ref_sample_barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${ref_sample}'") | .barcode' | cut -d"_" -f1 )


[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

set_url="gs://${bucket}/${set}"

echo ""
echo "--- A fail report will be created for ${sample} from run bucket gs://${bucket}/${set}/ ---"
if [[ ${correction_comments} != "" ]]; then
    echo "[IMPORTANT] this will be an correction report!"
    echo "[IMPORTANT] the following comments will be used: ${correction_comments}"
fi

if [[ $( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
    gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
    echo '[INPUT] Are you sure you want to continue with making a new report? (all data will be overwritten, except for the report when making a corrected report) Please answer Y or N.'
    read answer
    if [[ $answer != 'Y' ]]; then
        warn "Report will not be created. exiting"
        exit 1
    fi
fi


### Copy run data from bucket to local in vm
temp_folder_path=$( pwd )"/temp_cp_${set}"
mkdir $temp_folder_path
gsutil -m cp ${set_url}/pipeline.version $temp_folder_path/ &> $temp_folder_path/copy.log
gsutil -m cp ${set_url}/metadata.json $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/purple/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/peach/ $temp_folder_path/ &>> $temp_folder_path/copy.log

if [[ $( cat $temp_folder_path/copy.log | grep "CommandException:" | wc -l ) > 0 ]]; then
    warn "Making the copy gave errors (see below). Exiting."
    cat $temp_folder_path/copy.log
    rm -r $temp_folder_path/
    exit 1
fi

# create folder for report
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report
output_dir_data_report=${temp_folder_path}/new_report

## running patient reporter
ref_sample_mandatory=1

purple_purity_tsv=$(locate_purple_purity ${temp_folder_path})
purple_qc_file=$(locate_purple_qc ${temp_folder_path})

if [[ $( cat $temp_folder_path/purple/${sample}.purple.qc | grep QCStatus | cut -f2 ) == "FAIL_NO_TUMOR" ]]; then
     fail_reason="insufficient_tcp_deep_wgs"
else
    fail_reason="sufficient_tcp_qc_failure"
fi

pipeline_version_file=${temp_folder_path}/pipeline.version
peach_genotype_tsv=$(locate_peach_prod_genotype ${temp_folder_path})

if [[ ${correction_comments} != "" ]]; then
    #corrected report
    if [[ -z "${correction_extern}" ]]; then
        error "Missing correction extern argument"
    fi

    if [[ ${correction_extern} == "extern" ]]; then
        do_run_qc_fail_patient_reporter ${sample} ${barcode} ${ref_sample} ${ref_sample_barcode} ${fail_reason} ${ref_sample_mandatory} \
                -output_dir_report ${output_dir_report} \
                -output_dir_data ${output_dir_data_report} \
                -pipeline_version_file ${pipeline_version_file} \
                -peach_genotype_tsv ${peach_genotype_tsv} \
                -purple_purity_tsv ${purple_purity_tsv} \
                -purple_qc_file ${purple_qc_file} \
                -comments "${correction_comments}" "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
    fi

    if [[ ${correction_extern} == "intern" ]]; then
            do_run_qc_fail_patient_reporter ${sample} ${barcode} ${ref_sample} ${ref_sample_barcode} ${fail_reason} ${ref_sample_mandatory} \
                    -output_dir_report ${output_dir_report} \
                    -output_dir_data ${output_dir_data_report} \
                    -pipeline_version_file ${pipeline_version_file} \
                    -peach_genotype_tsv ${peach_genotype_tsv} \
                    -purple_purity_tsv ${purple_purity_tsv} \
                    -purple_qc_file ${purple_qc_file} \
                    -comments "${correction_comments}" \
                    -corrected_report "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
        fi

else
    #Normal report
    do_run_qc_fail_patient_reporter ${sample} ${barcode} ${ref_sample} ${ref_sample_barcode} ${fail_reason} ${ref_sample_mandatory} \
        -output_dir_report ${output_dir_report} \
        -output_dir_data ${output_dir_data_report} \
        -pipeline_version_file ${pipeline_version_file} \
        -peach_genotype_tsv ${peach_genotype_tsv} \
        -purple_purity_tsv ${purple_purity_tsv} \
        -purple_qc_file ${purple_qc_file} "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log
fi


#check whether a report has been made
if [[ $( ls ${temp_folder_path}/new_report/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
    json=$( ls ${temp_folder_path}/new_report | grep ${sample} | grep ${barcode} | grep -v "api-update" | grep "oncoact.json" )
    info "The report $report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the patient reporter log:"
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
    rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi

#### check log file of making the report
if [[ $( cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN \|Exception in thread" | grep -v "has already been reported" |  wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
    #cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep "WARN\|ERROR\|Exception in thread"
else
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_patientreporter.log | grep 'WARN ' | grep "has already been reported"
    info "No warnings/errors (except possibly already reported) in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_patientreporter.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/ and remove temporary run folder
gsutil -q cp -r ${temp_folder_path}/new_report/* gs://patient-reporter-manual-prod-1/
rm -r ${temp_folder_path}/ 2>&1
info "The report and the related log + json file can be found in gs://patient-reporter-manual-prod-1/:"
gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}

### upload report to NC
upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $report &> /dev/null
info "The report $report is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"

if [[ "${sample:0:6}" -eq "COREDB01" ]]; then
    upload_file_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $json &> /dev/null
    info "The json file $json is uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"
fi

### Patch reporting created endpoint
api_update_json=$(gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep "api-update.json" | grep -v "report_without_conclusion")
echo '[INPUT] Do you want to update the reporting created endpoint? Please answer Y or N.'
read answer
if [[ $answer == 'Y' ]]; then
  post_api_created_report ${api_update_json} ${sample}
fi

echo ""
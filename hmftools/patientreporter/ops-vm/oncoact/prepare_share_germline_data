#!/usr/bin/env bash

source locate_files || exit 1
source metadata_functions || exit 1
source lims_functions || exit 1
source message_functions || exit 1
source api_functions || exit 1

samplename=$1 && shift
target_dir="gs://hmf-nki-lskg/"
data_dir="gs://diagnostic-pipeline-output-prod-1/"

# Check if sample exists
if [[ -z "${samplename}" ]]; then
    error "No samplename provided. Exiting"
fi

# Get run dit from samplename
run_dir=$(api runs "${samplename}" sample_name | grep "diagnostic-pipeline-output-prod-1" | grep "Validated" | cut -f1)

sample_dir=${data_dir}${run_dir}

# Check if rundir exists
if [[ -z "${run_dir}" ]]; then
    echo "No run dir provided or run dir does not exist due to no Validated diagnostic run available:"
    api runs "${samplename}" sample_name | grep "diagnostic-pipeline-output-prod-1"
    error "Exiting."
fi

# Get sample name from run dir
#samplename=$(gsutil cat ${sample_dir}/metadata.json | jq -r '.tumor.sampleName')
#if [[ -z "${samplename}" ]]; then
#    error "No sample name found. Exiting"
#fi

# Check if samplename is correct (still for NKI)
if [[ $samplename != COREDB01* ]]; then
        error "Samplename not in correct NKI format. Exiting."
fi

echo "## Preparing germline files for transfer for ${samplename}"

# Check if informed consent is available
ic_status=$(curl http://lama.prod-1/api/patients/samples/${samplename} | jq --arg samplename "$samplename" '.tumorSamples[] | select(._id | contains($samplename)) | .patientGermlineChoice')
# Check if only one api response received
if [[ "$ic_status" != "\"Yes\"" ]]; then
	echo ${ic_status}
	echo "IMPORTANT: No informed consent is registered for germline analysis. Make sure you are allowed to share the data."
else
	echo "Informed consent registered for germline reporting."
fi


# Find the germline files
purple_germline=${sample_dir}/purple/${samplename}.purple.germline.vcf.gz
purple_germline_tbi=${sample_dir}/purple/${samplename}.purple.germline.vcf.gz.tbi
mvlh_sage=${sample_dir}/sage_somatic/${samplename}.sage.gene.coverage.tsv
#newer files:
gripss_germline=${sample_dir}/gripss_germline/${samplename}.gripss.filtered.germline.vcf.gz
linx_germline=${sample_dir}/linx_germline/${samplename}.linx.germline.disruption.tsv
purple_driver_catalog_germline=${sample_dir}/purple/${samplename}.driver.catalog.germline.tsv
linx_driver_catalog_germline=${sample_dir}/linx_germline/${samplename}.linx.germline.driver.catalog.tsv

# Check if germline files exist
gsutil -q stat ${purple_germline} || error "Cannot find PURPLE germline file."
gsutil -q stat ${purple_germline_tbi} || error "Cannot find PURPLE germline file index."
gsutil -q stat ${mvlh_sage} || error "Cannot find MVLH file from sage somatic."
#newer files:
gsutil -q stat ${gripss_germline} || error "Cannot find GRIPSS germline file."
gsutil -q stat ${linx_germline} || error "Cannot find LINX germline file."
gsutil -q stat ${purple_driver_catalog_germline} || error "Cannot find PURPLE germline driver catalog file." 
gsutil -q stat ${linx_driver_catalog_germline} || error "Cannot find LINX germline driver catalog file."


# Copy files to target dir
gsutil cp ${purple_germline} ${target_dir}${samplename}/
gsutil cp ${purple_germline_tbi} ${target_dir}${samplename}/
gsutil cp ${mvlh_sage} ${target_dir}${samplename}/
#newer files:
gsutil cp ${gripss_germline} ${target_dir}${samplename}/
gsutil cp ${linx_germline} ${target_dir}${samplename}/
gsutil cp ${purple_driver_catalog_germline} ${target_dir}${samplename}/
gsutil cp ${linx_driver_catalog_germline} ${target_dir}${samplename}/
echo "## Done."

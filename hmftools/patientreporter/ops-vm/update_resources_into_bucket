#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1

colo_log_file=$1 && shift #eg. gs://verification-pipeline-output-pilot-1/results/5_29_2_rc_1_v_5_29_3_rc_1/COLO829v003T/forensics/runs/COLO829v003T-target/run.log

echo '[INPUT] Do you have updated the oncoAct PDF report and oncoPanel PDF report? Please answer Y or N.'
read answer_protect
if [[ $answer_protect == 'N' ]]; then
    exit
fi

echo '[INPUT] Do you have updated the manual files for the report resources (changelist of driver gene panel, changelist of fusion knowledgebase, changelist of peach, readme of OncoAct, readme of oncoPanel? Please answer Y or N.'
read answer_protect
if [[ $answer_protect == 'N' ]]; then
    exit
fi


info "Starting to generate the oncoAct and oncoPanel data to the resources gcp bucket"

currentDate=$(date +'%Y%m%d')
report_resources_dir="/data/resources/report_resources/"
achive_dir="${report_resources_dir}/${currentDate}_patient_report_resources"
archive_dir_oncoact="${achive_dir}/oncoact"
archive_dir_oncopanel="${achive_dir}/oncopanel"
mkdir ${achive_dir}
mkdir ${archive_dir_oncoact}
mkdir ${archive_dir_oncopanel}

## generate image of using pipeline
info "Generating pipeline image data..."
image=$(collect_report_resources_for_pipeline_release -l ${colo_log_file} | grep "Image name found" | awk '{print $NF}' | awk -F "-" '{OFS = "-"; print $1,$2,$3,$4}')
project="hmf-pipeline-development"

git_clone_dir="${report_resources_dir}/common-resources-public"
gcloud --project "${project}" source repos clone common-resources-public ${git_clone_dir}
#git checkout "${git_clone_dir}"
info "Pipeline image data of ${image} is extracted"

info "Extracting peach information to tsv files"
## names of pgx files can be found in the make peach script
make_peach_reporting_summary_tsvs --input ${git_clone_dir}/peach/min_DPYD.json --output_dir ${archive_dir_oncoact}
#
###files oncoact
info "Collecting oncoAct data"
hmf_fusion_panel_changelist_csv="/data/resources/ops/report_resources/fusion_changelist.csv"
hmf_funsion_panel_csv="${git_clone_dir}/fusions/37/known_fusion_data.37.csv"
hmf_gene_panel_changelist_csv="/data/resources/ops/report_resources/DriverGenePanel_changelist.tsv"
hmf_gene_panel_csv="${git_clone_dir}/gene_panel/37/DriverGenePanel.37.tsv"
virus_reporting_db_tsv="${git_clone_dir}/virus_interpreter/virus_reporting_db.tsv"
#oncoact_report_pdf="${report_resources_dir}/hmf_oncoact.pdf"
taxonomy_db_tsv="${git_clone_dir}/virus_interpreter/taxonomy_db.tsv"
germline_reporting_tsv=$(locate_germline_reporting_prod)
onocoact_readme="/data/resources/ops/report_resources/oncoact_readme.txt"
hmf_pgx_haplotypes="${archive_dir_oncoact}/hmf_pgx_haplotypes.tsv"
hmf_pgx_variants_tsv="${archive_dir_oncoact}/hmf_pgx_variants.tsv"
hmf_pgx_drugs_tsv="${archive_dir_oncoact}/hmf_pgx_drugs.tsv"
hmf_pgx_changelist_tsv="/data/resources/ops/report_resources/peach_changelist.tsv"
#gene_transcripts="collect"


if [[ -z "${hmf_fusion_panel_changelist_csv}" ]]; then
        error "Unable to locate fusion panel changelist csv file."
fi

if [[ -z "${hmf_funsion_panel_csv}" ]]; then
        error "Unable to locate funsion panel csv file."
fi

if [[ -z "${hmf_gene_panel_changelist_csv}" ]]; then
        error "Unable to locate gene panel changelist csv file."
fi

if [[ -z "${hmf_gene_panel_csv}" ]]; then
        error "Unable to locate gene panel csv file."
fi
if [[ -z "${virus_reporting_db_tsv}" ]]; then
        error "Unable to locate virus reporting db tsv file."
fi

#if [[ -z "${oncoact_report_pdf}" ]]; then
#        error "Unable to locate oncoact report pdf file."
#fi

if [[ -z "${taxonomy_db_tsv}" ]]; then
        error "Unable to locate taxonomy db tsv file."
fi

if [[ -z "${germline_reporting_tsv}" ]]; then
        error "Unable to locate germline reporting tsv file."
fi

if [[ -z "${hmf_pgx_haplotypes}" ]]; then
        error "Unable to locate pgx haplotypes file."
fi

if [[ -z "${hmf_pgx_variants_tsv}" ]]; then
        error "Unable to locate pgx variants tsv file."
fi

if [[ -z "${hmf_pgx_drugs_tsv}" ]]; then
        error "Unable to locate pgx drugs tsv file."
fi

if [[ -z "${hmf_pgx_changelist_tsv}" ]]; then
        error "Unable to locate pgx change list tsv file."
fi

#if [[ -z "${gene_transcripts}" ]]; then
#        error "Unable to locate gene transcripts tsv file."
#fi

if [[ -z "${onocoact_readme}" ]]; then
        error "Unable to locate onocoact readme file."
fi
#
#
## Copy oncoact data to the archive dir
cp ${hmf_fusion_panel_changelist_csv} "${archive_dir_oncoact}/hmf_fusion_changelist.csv"
cp ${hmf_funsion_panel_csv} "${archive_dir_oncoact}/hmf_fusion_panel.csv"
cp ${hmf_gene_panel_changelist_csv} "${archive_dir_oncoact}/hmf_oncoact_gene_panel_changelist.csv"
cp ${hmf_gene_panel_csv} "${archive_dir_oncoact}/hmf_oncoact_gene_panel.csv"
cp ${virus_reporting_db_tsv} "${archive_dir_oncoact}/hmf_virus_reporting_db.tsv"
#cp ${oncoact_report_pdf} "${archive_dir_oncoact}/hmf_oncoact_report.pdf"
cp ${taxonomy_db_tsv} "${archive_dir_oncoact}/hmf_taxonomy_db.tsv"
cp ${germline_reporting_tsv} "${archive_dir_oncoact}/hmf_germline_reporting.tsv"
cp ${hmf_pgx_changelist_tsv} "${archive_dir_oncoact}/hmf_peach_changelist.tsv"
#cp ${gene_transcripts} "${archive_dir_oncoact}/hmf_canonical_transcripts.tsv"
cp ${onocoact_readme} "${archive_dir_oncoact}/hmf_oncoact_readme.txt"

##files onocpanel
#info "Collecting oncoPanel data"
#
##onco_panel_genes_tsv=
##onco_panel_vcf_header_definitions=
##oncopanel_report_pdf="${report_resources_dir}/hmf_oncoact.pdf"
#oncopanel_readme="/data/resources/ops/report_resources/oncopanel_readme.txt"
#
##if [[ -z "${onco_panel_genes_tsv}" ]]; then
##        error "Unable to locate onco panel genes tsv file."
##fi
##
##if [[ -z "${onco_panel_vcf_header_definitions}" ]]; then
##        error "Unable to locate onco panel vcf header definitions file."
##fi
##
##if [[ -z "${oncopanel_report_pdf}" ]]; then
##        error "Unable to locate oncopanel report pdf file."
##fi
#
#if [[ -z "${oncopanel_readme}" ]]; then
#        error "Unable to locate oncopanel readme file."
#fi
#
### Copy oncopanel data to the archive dir
##cp ${onco_panel_genes_tsv} "${archive_dir_oncopanel}/hmf_oncoact_gene_panel.tsv"
##cp ${onco_panel_vcf_header_definitions} "${archive_dir_oncopanel}/hmf_vcf_header_definitions.tsv"
##cp ${oncopanel_report_pdf} "${archive_dir_oncopanel}/hmf_oncopanel_report.pdf"
#cp ${oncopanel_readme} "${archive_dir_oncopanel}/hmf_oncopanel_readme.txt"
#
### Zipping the dir
info "Zipping the oncoPanel and OncoAct data"
oncoact_zip_date="${report_resources_dir}/${currentDate}_oncoact.zip"
oncoact_zip_latest="${report_resources_dir}/latest_oncoact.zip"
#oncopanel_zip_date="${report_resources_dir}/${currentDate}_oncopanel.zip"
#oncopanel_zip_latest="${report_resources_dir}/latest_oncopanel.zip"
#
zip -r ${oncoact_zip_date} ${archive_dir_oncoact}
zip -r ${oncoact_zip_latest} ${archive_dir_oncoact}
#zip -r ${oncopanel_zip_date} ${archive_dir_oncopanel}
#zip -r ${oncopanel_zip_latest} ${archive_dir_oncopanel}
#
## copy data to bucket
#info "Copy the oncoAct data to the gcp bucket"
#bucket="hmf-public"
#path_oncoact="OncoAct-Resources"
#gcp_url_oncoact="https://storage.googleapis.com/${bucket}/${path_oncoact}"
#gsutil cp ${oncoact_zip_date} ${gcp_url_oncoact}
#gsutil cp ${oncoact_zip_latest} ${gcp_url_oncoact}
#
#info "Copy the oncoPanel data to the gcp bucket"
#path_oncopanel="OncoPanel-Resources"
#gcp_url_oncopanel="https://storage.googleapis.com/${bucket}/${path_oncopanel}"
#gsutil cp ${oncopanel_zip_date} ${gcp_url_oncopanel}
#gsutil cp ${oncopanel_zip_latest} ${gcp_url_oncopanel}
#
##Deleting data
#info "Removing temporarily data"
##rm -rf ${git_clone_dir}
##rm "${report_resources_dir}/hmf_pgx_haplotypes.tsv"
##rm "${report_resources_dir}/hmf_pgx_haplotypes.tsv"
##rm "${report_resources_dir}/hmf_pgx_haplotypes.tsv"

info "Complete"
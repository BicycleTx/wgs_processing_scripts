#!/usr/bin/env bash

source message_functions || exit 1
source locate_files || exit 1
source lims_functions || exit 1

dir=$1 && shift
correction_comments=$1 && shift
correction_extern=$1 && shift

[[ -n "${dir}" ]] || die "No dir provided. Exiting"

#Searching sample information)
dirLocation="/data/experiments/panel_DEV-3023/${dir}"

pipeline_version=$( cat ${dirLocation}/pipeline.version | cut -d"." -f1,2 )
sample=$( cat ${dirLocation}/metadata.json | jq .tumor.sampleName )
barcode=$( cat ${dirLocation}/metadata.json | jq .tumor.barcode )

echo ""
echo "--- A report will be created for ${sample} from run ${dirLocation}, pipeline version ${pipeline_version} ---"
if [[ ${correction_comments} != "" ]]; then
    echo "[IMPORTANT] this will be an correction report!"
    echo "[IMPORTANT] the following comments will be used: ${correction_comments}"
fi

if [[ $( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    warn 'There already exists a patient report for this sample:'
    gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
    echo '[INPUT] Are you sure you want to continue with making a new report? (all data will be overwritten, except for the report when making a corrected report) Please answer Y or N.'
    read answer
    if [[ $answer != 'Y' ]]; then
        warn "Report will not be created. exiting"
        exit 1
    fi
fi

### Copy run data from bucket to local in vm
temp_folder_path=$( pwd )"/temp_cp_${dir}"
mkdir $temp_folder_path
gsutil -m cp ${dirLocation}/pipeline.version $temp_folder_path/ &> $temp_folder_path/copy.log
gsutil -m cp -r ${dirLocation}/purple/ $temp_folder_path/ &>> $temp_folder_path/copy.log

if [[ $( cat $temp_folder_path/copy.log | grep "CommandException:" | wc -l ) > 0 ]]; then
    warn "Making the copy gave errors (see below). Exiting."
    cat $temp_folder_path/copy.log
    rm -r $temp_folder_path/
    exit 1
fi

# create folder for report
temp_folder_path=$( pwd )"/temp_cp_${dir}"
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report
output_dir_data_report=${temp_folder_path}/new_report

if [[ ${correction_comments} != "" ]]; then
    #corrected report
    if [[ -z "${correction_extern}" ]]; then
        error "Missing correction extern argument"
    fi
    if [[ ${correction_extern} == "extern" ]]; then
        do_panel_report_for_run ${temp_folder_path} ${sample} ${barcode}  \
              -output_dir_report ${output_dir_report} \
              -output_dir_data ${output_dir_data_report} \
              -comments "${correction_comments}" \
              -corrected_report_extern \
              -corrected_report "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log
    fi

    if [[ ${correction_extern} == "intern" ]]; then
            do_panel_report_for_run ${temp_folder_path} ${sample} ${barcode}  \
                  -output_dir_report ${output_dir_report} \
                  -output_dir_data ${output_dir_data_report} \
                  -comments "${correction_comments}" \
                  -corrected_report "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log
    fi
else
    #Normal report
    do_panel_report_for_run ${temp_folder_path} ${sample} ${barcode}  \
      -output_dir_report ${output_dir_report} \
      -output_dir_data ${output_dir_data_report} "$@" &> ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log
fi


echo $( ls ${temp_folder_path}/new_report | grep ${sample} | grep .pdf | wc -l )
if [[ $( ls ${temp_folder_path}/new_report | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
    report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
    info "The report $report has been created"
else
    warn "No report has been created. Please see below the warnings/errors in the panel reporter log:"
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log | grep "WARN\|ERROR\|Exception in thread"
   # rm -r ${temp_folder_path}/ 2>&1
    warn "The script will end here. Exiting"
    exit 1
fi


#### check log file of making the report
if [[ $( cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log | grep "WARN \|Exception in thread" | grep -v "has already been reported" |  wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check using: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_panelreporter.log"
else
    cat ${temp_folder_path}/new_report/${sample}_${barcode}_manual_panelreporter.log | grep 'WARN ' | grep "has already been reported"
    info "No warnings/errors (except possibly already reported) in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/${sample}_${barcode}_manual_panelreporter.log"
fi

##### cp report to gs://patient-reporter-manual-prod-1/
#gsutil -q cp -r ${temp_folder_path}/new_report/* gs://patient-reporter-manual-prod-1/
#info "The report and the related json + log file can be found in gs://patient-reporter-manual-prod-1/:"
#gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample}
#
#
#if [[ $( gsutil ls gs://oncopanel-result-files-nki/ | grep ${sample} | grep .pdf | wc -l ) > 0 ]]; then
#    warn 'A patient report for this sample has already been shared in gs://oncopanel-result-files-nki/:'
#    gsutil ls gs://oncopanel-result-files-nki/ | grep ${sample}
#    echo '[INPUT] Are you sure you want to continue sharing a new report and result files? (all data will be overwritten) Please answer Y or N.'
#    read answer
#    if [[ $answer != 'Y' ]]; then
#        warn "Report and result files will not be shared. exiting"
#        rm -r ${temp_folder_path}/ 2>&1
#        exit 1
#    fi
#fi
#
##### cp report to sharing bucket (gs://oncopanel-result-files-nki/ in hmf-share)
#gsutil -q cp -r ${temp_folder_path}/new_report/*.pdf gs://oncopanel-result-files-nki/
##### cp related data to sharing bucket (gs://oncopanel-result-files-nki/ in hmf-share)
## create folder for tar
#mkdir ${temp_folder_path}/new_report/tar
#cp -r ${temp_folder_path}/purple/*.purple.somatic.vcf.gz ${temp_folder_path}/tar
#cp -r ${temp_folder_path}/purple/*.purple.somatic.vcf.gz.tbi ${temp_folder_path}/tar
#cp -r ${temp_folder_path}/purple/*.purple.cnv.gene.tsv ${temp_folder_path}/tar
#cp -r ${temp_folder_path}/purple/*.purple.purity.tsv ${temp_folder_path}/tar
#tar -czf ${temp_folder_path}/new_report/${sample}_${barcode}.tar.gz  -C ${temp_folder_path}/tar .
#info "Tar file created of results. The results that will be shared are:"
#tar -tvf ${temp_folder_path}/new_report/${sample}_${barcode}.tar.gz
## cp
#gsutil -q cp -r ${temp_folder_path}/new_report/${sample}_${barcode}.tar.gz gs://oncopanel-result-files-nki/
#info "The report and the related tar with result files are shared in gs://oncopanel-result-files-nki/:"
#gsutil ls gs://oncopanel-result-files-nki/ | grep ${sample}
#
#### EXTRA: upload report + tar to NC
#upload_file_to_nc_new_reports_viewing  gs://oncopanel-result-files-nki/ $report &> /dev/null
#upload_file_to_nc_new_reports_viewing  gs://oncopanel-result-files-nki/ ${sample}_${barcode}.tar.gz &> /dev/null
#info "The report $report and the accompanying ${sample}_${barcode}.tar.gz are uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing."
#
### remove temporary folder
#rm -r ${temp_folder_path}/ 2>&1
#
#### Patch reporting created endpoint
#api_update_json=$( gsutil ls gs://patient-reporter-manual-prod-1/ | grep ${sample} | grep "api-update.json" | grep -v "report_without_conclusion")
#echo '[INPUT] Do you want to update the reporting created endpoint? Please answer Y or N.'
#read answer
#if [[ $answer == 'Y' ]]; then
#  post_api_created_report ${api_update_json} ${sample}
#fi
#
#
#echo '[INPUT] Do you want to also do the final processing (since the report has been shared) ? Please answer Y or N.'
#read answer
#if [[ $answer == 'Y' ]]; then
#    copy_panel_report_to_final_reports_gcp ${set}
#fi
#
#echo ""
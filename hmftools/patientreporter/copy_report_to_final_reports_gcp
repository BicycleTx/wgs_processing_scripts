#!/usr/bin/env bash

source message_functions || exit 1
source lims_functions || exit 1
source locate_reporting_api || exit 1

set=$1 && shift

[[ -n "${set}" ]] || die "No set or sampleId provided. Exiting"

if [[ "${#set}" < 18 ]]; then
    sample="${set}"
    barcode=$(find_barcode_for_sample_name ${sample})
else
    #Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
    inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
    exc_buckets="research-pipeline-output-prod"
    runs_json=$(
      hmf_api_get "runs?set_name=${set}" | \
      jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
      '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
    )
    run_count=$(jq 'length' <<< "${runs_json}")
    bucket=$( echo $runs_json | jq -r '.[].bucket' )
    pipeline_version=$( echo $runs_json | jq -r '.[].version' | cut -d"." -f1,2 )
    sample=$( echo $runs_json | jq -r '.[].set.tumor_sample' )
    barcode=$( hmf_api_get "sets?name=${set}" | jq -r '.[].samples[] | select(.name=="'${sample}'") | .barcode' | cut -d"_" -f1 )

    [[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

    if [[ ${run_count} == 0 ]]; then
        warn "No run was found for ${set} on gcp."
        exit 1
    fi
fi

####

url_bucket_report_auto="gs://patient-reporter-prod-1/"
url_bucket_report_manual="gs://patient-reporter-manual-prod-1/"
url_bucket_report_final="gs://patient-reporter-final-prod-1/"

echo ""
echo "--- Report for ${sample} has been shared (again; in case of correction) - final processing will start: ---"

report_source="none"

## check whether report exists in auto bucket
if [[ $( gsutil ls ${url_bucket_report_auto} | grep "${sample}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample} in auto bucket ${url_bucket_report_auto}"
else
    info "Report available for ${sample} in auto bucket ${url_bucket_report_auto}"
    report=$( gsutil ls ${url_bucket_report_auto} | grep "${sample}" | grep dna_analysis_report.pdf | head -1 )
    report=$( echo ${report#"${url_bucket_report_auto}"} )
    json=$( gsutil ls ${url_bucket_report_auto} | grep ${sample} | grep ${barcode} | grep ".json")
    json=$( echo ${json#"${url_bucket_report_auto}"} )
    api=$( gsutil ls ${url_bucket_report_auto} | grep ${sample} | grep ${barcode} | grep "api-update.json")
    report_type=$(gsutil cat ${api} | jq '.report_type')
    api=$( echo ${api#"${url_bucket_report_auto}"} )
    report_source="automatic"
fi

## check whether report exists in manual bucket
if [[ $( gsutil ls ${url_bucket_report_manual} | grep "${sample}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample} in manual bucket ${url_bucket_report_manual}"
    if [[ "${report_source}" == "none" ]]; then
        warn "Report does not exist in ${url_bucket_report_auto} or ${url_bucket_report_manual} on gcp so cannot be made final.  Please check. Exiting"
        exit 1
    else
        info "Conclusion: the auto report ${report} will be finalized."
    fi
else
    if [[ $( gsutil ls ${url_bucket_report_manual} | grep "${sample}" | grep .pdf | grep corrected | wc -l ) > 0 ]]; then
        report=$( gsutil ls ${url_bucket_report_manual} | grep "${sample}" | grep .pdf | grep corrected | head -1 )
        report=$( echo ${report#"${url_bucket_report_manual}"} )
        json=$( gsutil ls ${url_bucket_report_manual} | grep ${sample} | grep ${barcode} | grep ".json")
        json=$( echo ${json#"${url_bucket_report_manual}"} )
        api=$( gsutil ls ${url_bucket_report_auto} | grep ${sample} | grep ${barcode} | grep "api-update.json")
        report_type=$(gsutil cat ${api} | jq '.report_type')
        api=$( echo ${api#"${url_bucket_report_auto}"} )
    else
        report=$( gsutil ls ${url_bucket_report_manual} | grep "${sample}" | grep .pdf | head -1 )
        report=$( echo ${report#"${url_bucket_report_manual}"} )
        json=$( gsutil ls ${url_bucket_report_manual} | grep ${sample} | grep ${barcode} | grep ".json")
        json=$( echo ${json#"${url_bucket_report_manual}"} )
        api=$( gsutil ls ${url_bucket_report_auto} | grep ${sample} | grep ${barcode} | grep "api-update.json")
        report_type=$(gsutil cat ${api} | jq '.report_type')
        api=$( echo ${api#"${url_bucket_report_auto}"} )
    fi
    info "Report available for ${sample} in manual bucket ${url_bucket_report_manual}"
    info "Conclusion: the manual report ${report} will be finalized (goes over the auto report)."
    report_source="manual"
fi

echo ${report_type}

reporting_id=$(extract_reporting_id ${barcode} ${report_type} "prod")

echo ${reporting_id}

## check wether report already exists in final bucket
if [[ ${report} == *"corrected"* ]]; then
    if [[ $( gsutil ls ${url_bucket_report_final} | grep "${sample}" | grep .pdf | grep corrected | wc -l ) > 0 ]]; then
        warn "Report already exists in ${url_bucket_report_final} on gcp so probably is already shared. Please check. Exiting"
        warn "See also the record in sharing api:"
        extract_object_created ${barcode}  ${report_type} "prod"
        extract_object_shared ${reporting_id} "prod"
        exit 1
    fi
else
    if [[ $( gsutil ls ${url_bucket_report_final} | grep "${sample}" | grep .pdf | wc -l ) > 0  ]]; then
         warn "Report already exists in ${url_bucket_report_final} on gcp so probably is already shared. Please check. Exiting"
         warn "See also the record in sharing api:"
         extract_object_created ${barcode} ${report_type} "prod"
         extract_object_shared ${reporting_id} "prod"
         exit 1
    fi
fi

## copy report from auto/manual bucket to final

if [[ "${report_source}" == "automatic" ]]; then
    gsutil -q cp ${url_bucket_report_auto}${report} ${url_bucket_report_final}
    gsutil -q cp ${url_bucket_report_auto}${json} ${url_bucket_report_final}
    gsutil -q cp ${url_bucket_report_auto}${api} ${url_bucket_report_final}
else
    gsutil -q cp ${url_bucket_report_manual}${report} ${url_bucket_report_final}
    gsutil -q cp ${url_bucket_report_manual}${json} ${url_bucket_report_final}
    gsutil -q cp ${url_bucket_report_auto}${api} ${url_bucket_report_final}
fi

if [[ $( gsutil ls ${url_bucket_report_final} | grep "${report}" | wc -l ) > 0 ]]; then
    if [[ "${report_source}" == "automatic" ]]; then
        info "Report copied from ${url_bucket_report_auto}${report} to final archive ${url_bucket_report_final} on gcp."
    else
        info "Report copied from ${url_bucket_report_manual}${report} to final archive ${url_bucket_report_final} on gcp."
    fi
    info "Final reports + report jsons + api jsons stored for ${sample}:"
    gsutil ls ${url_bucket_report_final} | grep "${sample}"
else
    warn "Report not correctly moved to final archive ${url_bucket_report_final}. Please check what went wrong. Exiting. "
    exit 1
fi

## add reporting info to registration file

if [[ ${report} == *"corrected"* ]]; then
    if [[ $(extract_object_shared ${reporting_id}  "prod" | wc -l)  == 0 ]]; then
      info "A record has been added for ${sample} to sharing api"
      post_api_sharing_report ${barcode} ${report_type} "prod"
      info "Reports shared registration for ${sample}:"
      extract_object_created ${barcode} ${report_type} "prod"
      extract_object_shared ${reporting_id} "prod"
    else
      warn "The report ${report} is already in the sharing api"
      extract_object_created ${barcode} ${report_type} "prod"
      extract_object_shared ${reporting_id} "prod"
      warn "No new record added."
    fi
else
    if [[ $(extract_object_shared ${reporting_id} "prod" | wc -l)  == 0 ]]; then
         info "A record has been added for ${sample} to sharing api"
         post_api_sharing_report ${barcode} ${report_type} "prod"
         info "Reports shared registration for ${sample}:"
         extract_object_created ${barcode} ${report_type} "prod"
         extract_object_shared ${reporting_id} "prod"
    else
        warn "The report ${report} is already in the sharing api"
        extract_object_created ${barcode} ${report_type} "prod"
        extract_object_shared ${reporting_id} "prod"
        warn "No new record added."
    fi
fi

echo ""
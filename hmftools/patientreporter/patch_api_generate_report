#!/bin/bash

source message_functions || exit 1

api_json=$1 && shift
sample_name=$1 && shift

run_id=$( api runs ${sample_name} sample_name | grep diagnostic-pipeline-output-prod-1 | awk '{print $NF}')
json_file=$( cat ${api_json})
has_reliable_purity=$( echo ${json_file} | jq .has_reliable_purity)
sample_barcode=$(echo ${api_json} | jq .barcode)
report_date=$(echo ${api_json} | jq .report_date)
purity=$(echo ${api_json} | jq .purity)
report_type=$(echo ${api_json} | jq .report_type)
cohort=$(echo ${api_json} | jq .cohort)
has_reliable_quality=$(echo ${api_json} | jq .has_reliable_quality)

## check report is manual or automatically generated
url_bucket_report_auto="gs://patient-reporter-prod-1/"
url_bucket_report_manual="gs://patient-reporter-manual-prod-1/"

if [[ $( gsutil ls ${url_bucket_report_auto} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
else
    info "Report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
    source="automatic"
fi

## check whether report exists in manual bucket
if [[ $( gsutil ls ${url_bucket_report_manual} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in manual bucket ${url_bucket_report_manual}"
else
    source="manual"
fi

## check if it is a failed run

data=$(printf '{"%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s}' "has_reliable_purity" "${has_reliable_purity}" "sample_barcode" "${sample_barcode}" "report_date" "${report_date}" "purity" ${purity} "report_type" "${report_type}" "cohort" "${cohort}" "has_reliable_quality" "${has_reliable_quality}" "source" "${source}" "sample_name" "${sample_name}")
data1=$(printf '{"%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": %s}' "has_reliable_purity" "${has_reliable_purity}" "sample_barcode" "${sample_barcode}" "report_date" "${report_date}" "purity" ${purity} "report_type" "${report_type}" "cohort" "${cohort}" "has_reliable_quality" "${has_reliable_quality}" "source" "${source}" "sample_name" "${sample_name}" "run_id" ${run_id})

info "Adding entry to created API"
curl --silent --show-error \
      -H "Content-Type: application/json" \
      -H "Accept: application/json" \
      -X POST http://api.pilot-1/hmf/v1/reports/created \
      --data "${data}"
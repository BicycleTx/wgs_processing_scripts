#!/usr/bin/env bash

source message_functions || exit 1
source lims_functions || exit 1

set=$1 && shift

[[ -n "${set}" ]] || die "No set provided. Exiting"

#Searching and selecting run (including ${inc_inis} and excluding ${exc_buckets})
inc_inis="Somatic.ini|PipelineV5.ini|CPCT.ini"
exc_buckets="research-pipeline-output-prod"
runs_json=$(
  hmf_api_get "runs?set_name=${set}" | \
  jq --arg inis "$inc_inis" --arg buckets "$exc_buckets" \
  '[.[] | select(.ini | test($inis)) | select(.bucket | test($buckets)|not)]'
)
run_count=$(jq 'length' <<< "${runs_json}")
run_json=$(jq '.[-1]' <<< "${runs_json}")
bucket=$(jq -r '.bucket' <<< "${run_json}")

[[ "${run_count}" -eq 1 ]] || warn "Multiple runs were encountered for this set (${run_count}). Info is from the most recent run!"

if [[ ${run_count} == 0 ]]; then
    warn "No run was found for ${set} on gcp."
    exit 1
fi

set_url="gs://${bucket}/${set}"

info "-- A report will be greated for ${set} --"

### Copy run data from bucket to local in vm
temp_folder_path=$( pwd )"/temp_cp_${set}"
mkdir $temp_folder_path
gsutil -m cp ${set_url}/pipeline.version $temp_folder_path/ &> $temp_folder_path/copy.log
gsutil -m cp ${set_url}/metadata.json $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/purple/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/linx/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/chord/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/cuppa/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/virusbreakend/ $temp_folder_path/ &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/peach/ $temp_folder_path/  &>> $temp_folder_path/copy.log
gsutil -m cp -r ${set_url}/protect/ $temp_folder_path/ &>> $temp_folder_path/copy.log

if [[ $( cat $temp_folder_path/copy.log | grep "CommandException:" | wc -l ) > 0 ]]; then
    warn "Making the copy gave errors (see below). Exiting."
    cat $temp_folder_path/copy.log
    rm -r $temp_folder_path/
    exit 1
fi
# create folder for report
mkdir ${temp_folder_path}/new_report
output_dir_report=${temp_folder_path}/new_report

### doid check (especifally important when rerun of protect)
report_doid=$(get_doids_for_biopsy ${sample_name} | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//')
protect_doid=$( cat ${temp_folder_path}/protect/run.log | grep -w "initial tumor doids" | awk -F '[' '{print $NF}' | head -c -3 | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//')
info "Checking primary tumor doid" &> ${temp_folder_path}/new_report/manual_patientreporter_${set}.log
if [[ ${protect_doid} == "" ]]; then
    warn "Checking primary tumor doid: the doid of protect ${protect_doid} is not known" &>> ${temp_folder_path}/new_report/manual_patientreporter_${set}.log
elif [[ ${protect_doid} == ${report_doid} ]]; then
    info "Checking primary tumor doid: the doid is equal of protect ${protect_doid} and report ${report_doid}" &>> ${temp_folder_path}/new_report/manual_patientreporter_${set}.log
else
    warn "Checking primary tumor doid: the doid is not equal of protect ${protect_doid} and report ${report_doid}" &>> ${temp_folder_path}/new_report/manual_patientreporter_${set}.log
fi


#### create report and add to log file
#Normal report
do_patient_report_for_run ${temp_folder_path} -output_dir_report ${output_dir_report} &>> ${temp_folder_path}/new_report/manual_patientreporter_${set}.log

if [[ $( cat ${temp_folder_path}/new_report/manual_patientreporter_${set}.log | grep "WARN\|ERROR" | wc -l ) > 0 ]]; then
    warn "Running the patient reporter gave warnings/errors, please check:"
    cat ${temp_folder_path}/new_report/manual_patientreporter_${set}.log | grep "WARN\|ERROR"
    info "For further inspection of the log file run: gsutil cat gs://patient-reporter-manual-prod-1/manual_patientreporter_${set}.log"
else
    info "No warnings/errors in running the patient reporter. If you still want to inspect the log file you can run: gsutil cat gs://patient-reporter-manual-prod-1/manual_patientreporter_${set}.log"
fi

#### cp report to gs://patient-reporter-manual-prod-1/ and remove temporary run folder
gsutil cp -r ${temp_folder_path}/new_report/* gs://patient-reporter-manual-prod-1/ 2>&1
report=$( ls ${temp_folder_path}/new_report | grep ".pdf" )
info "The report $report has been created"
rm -r ${temp_folder_path}/ 2>&1
info "The report $report and its log file (manual_patientreporter_${set}.log) can be found in: gs://patient-reporter-manual-prod-1/"

### upload report to NC
info "The report $report will now be uploaded to nextcloud STAGING/New-Reports-Viewing for visual inspection and further processing"
upload_report_to_nc_new_reports_viewing gs://patient-reporter-manual-prod-1/ $report
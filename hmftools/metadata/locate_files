#!/usr/bin/env bash

base_path="/data/common"
if [ -z "$(hostname | grep datastore)" ]; then
    # Common folder does not exist on crunches...
    base_path="/data"
fi

############################# Database Credentials #############################
locate_prod_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/prod
}

locate_pilot_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pilot
}

locate_vicc_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/vicc_db
}

locate_reference_validation_sets_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/reference_validation_sets
}

locate_pipeline_v5_validation_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pipeline_v5_validation
}

locate_pipeline_v5_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pipeline_v5
}

##################################### JARS #####################################
locate_prod_purple() {
    echo ${base_path}/tools/purple_v2.34/purple.jar
}

locate_pilot_purple() {
    echo ${base_path}/tools/purple_pilot/purple.jar
}

locate_prod_bachelor() {
    echo ${base_path}/tools/bachelor_v1.8/bachelor.jar
}

locate_pilot_bachelor() {
    echo ${base_path}/tools/bachelor_pilot/bachelor.jar
}

locate_prod_patient_db() {
    echo ${base_path}/tools/patient-db_v3.28/patient-db.jar
}

locate_pilot_patient_db() {
    echo ${base_path}/tools/patient-db_pilot/patient-db.jar
}

locate_prod_linx() {
    echo ${base_path}/tools/sv-linx_v1.4/sv-linx.jar
}

locate_pilot_linx() {
    echo ${base_path}/tools/sv-linx_pilot/sv-linx.jar
}

locate_prod_patient_reporter() {
    echo ${base_path}/tools/patientreporter_v7.4/patient-reporter.jar
}

locate_pilot_patient_reporter() {
    echo ${base_path}/tools/patientreporter_pilot/patient-reporter.jar
}

locate_pilot_vicc() {
    echo ${base_path}/tools/vicc_knowledgebase_pilot/vicc-knowledgebase-importer.jar
}

#################################### Resources #####################################
locate_hotspot_tsv() {
    echo "/data/common/dbs/sage/KnownHotspots.tsv"
}

################################# Somatic Variants #################################
locate_sage_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/somaticVariants/*/ -type f -name *sage.vcf.gz)
    if [ -z ${somatic_vcf} ]; then
        # TODO: Clean up after sage is rerun for every sample
        somatic_vcf=$(find -L ${run_dir}/somaticVariants/*/ -type f -name *post_processed.vcf.gz)
        if [ -z ${somatic_vcf} ]; then
            somatic_vcf=$(find -L ${run_dir}/somatic_caller/ -type f -name *post_processed.vcf.gz)
            if [ -z ${somatic_vcf} ]; then
                echo "[ERROR] Unable to locate sage somatic variants. Exiting." >&2
                exit 1
            fi
        fi
    fi
    echo ${somatic_vcf}
}

locate_purple_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.somatic.vcf.gz")
    if [ -z ${somatic_vcf} ]; then
        echo "[ERROR] Unable to locate purple somatic variants. Exiting." >&2
        exit 1
    fi
    echo ${somatic_vcf}
}

locate_purple_pilot_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.somatic.vcf.gz")
    if [ -z ${somatic_vcf} ]; then
        echo "[ERROR] Unable to locate purple pilot somatic variants. Exiting." >&2
        exit 1
    fi
    echo ${somatic_vcf}
}

############################################ Purple ##########################################

locate_purple_purity() {
    local run_dir=$1
    local purple_purity_file=$(find -L ${run_dir}/purple/ -type f -name "*.purple.purity.tsv")
    if [ -z ${purple_purity_file} ]; then
        echo "[ERROR] Unable to locate purple purity. Exiting." >&2
        exit 1
    fi
    echo ${purple_purity_file}
}

locate_purple_pilot_purity() {
    local run_dir=$1
    local purple_purity_file=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.purity.tsv")
    if [ -z ${purple_purity_file} ]; then
        echo "[ERROR] Unable to locate purple pilot purity. Exiting." >&2
        exit 1
    fi
    echo ${purple_purity_file}
}

locate_purple_gene_copynumbers() {
    local run_dir=$1
    local purple_gene_copynumbers=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.gene.tsv")
    if [ -z ${purple_gene_copynumbers} ]; then
        echo "[ERROR] Unable to locate purple gene copynumbers. Exiting." >&2
        exit 1
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_pilot_gene_copynumbers() {
    local run_dir=$1
    local purple_gene_copynumbers=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.cnv.gene.tsv")
    if [ -z ${purple_gene_copynumbers} ]; then
        echo "[ERROR] Unable to locate purple pilot gene copynumbers. Exiting." >&2
        exit 1
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_circos_plot() {
    local run_dir=$1
    local circos_plot=$(find -L ${run_dir}/purple/plot/ -type f -name "*.circos.png")
    if [ -z ${circos_plot} ]; then
        echo "[ERROR] Unable to locate purple circos plot. Exiting." >&2
        exit 1
    fi
    echo ${circos_plot}
}

locate_purple_pilot_circos_plot() {
    local run_dir=$1
    local circos_plot=$(find -L ${run_dir}/purple_pilot/plot/ -type f -name "*.circos.png")
    if [ -z ${circos_plot} ]; then
        echo "[ERROR] Unable to locate purple pilot circos plot. Exiting." >&2
        exit 1
    fi
    echo ${circos_plot}
}

##################################### Structural Variants #####################################

locate_purple_structural_variants() {
    local run_dir=$1
    # TODO: Remove the "ann" once annotation is all done pre-purple.
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.ann.vcf.gz")
	  if [ -z ${structural_vcf} ]; then
		    structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
		    if [ -z ${structural_vcf} ]; then
			      echo "[ERROR] Unable to locate purple structural variants. Exiting." >&2
			      exit 1
		    fi
	  fi
    echo ${structural_vcf}
}

locate_purple_pilot_structural_variants() {
    local run_dir=$1
    # TODO: Remove the "ann" once annotation is all done pre-purple.
	  local structural_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.sv.ann.vcf.gz")
	  if [ -z ${structural_vcf} ]; then
		    structural_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.sv.vcf.gz")
		    if [ -z ${structural_vcf} ]; then
			      echo "[ERROR] Unable to locate purple pilot structural variants. Exiting." >&2
			      exit 1
		    fi
    fi
    echo ${structural_vcf}
}

locate_linx_reported_fusions() {
    local run_dir=$1
    local linx_dir=${run_dir}/sv
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for fusions: ${linx_dir}. Exiting" >&2
        exit 1
    fi

    # TODO Remove when linx v1.4 has been run on every sample
	  local fusion_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.fusions.tsv")
	  if [ -z ${fusion_tsv} ]; then
	      fusion_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.reported_fusion.tsv")
	      if [ -z ${fusion_tsv} ]; then
            echo "[ERROR] Unable to locate linx fusions tsv. Exiting." >&2
            exit 1
        fi
    fi
    echo ${fusion_tsv}
}

locate_linx_disruptions() {
    local run_dir=$1
    local linx_dir=${run_dir}/sv
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for disruptions: ${linx_dir}. Exiting" >&2
        exit 1
    fi

	local disruption_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.disruptions.tsv")
	if [ -z ${disruption_tsv} ]; then
        echo "[ERROR] Unable to locate linx disruptions tsv. Exiting." >&2
        exit 1
    fi
    echo ${disruption_tsv}
}

locate_gridss_structural_variants() {
    local run_dir=$1
	# Use the backport VCF if it exists
	local structural_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/breakpoint_position_backport/ -type f -name "*.gridss.somatic.vcf.gz.breakpoint_position_backport.vcf.gz")
    if [ -z ${structural_vcf} ]; then
        structural_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name "*.gridss.somatic.vcf.gz")
		if [ -z ${structural_vcf} ]; then
			structural_vcf=$(find -L ${run_dir}/structural_caller/ -type f -name "*.gridss.somatic.vcf.gz")
			if [ -z ${structural_vcf} ]; then
				echo "[ERROR] Unable to locate GRIDSS structural variants. Exiting." >&2
				exit 1
			fi
		fi
    fi
    echo ${structural_vcf}
}

locate_gridss_recovery_candidates() {
    local run_dir=$1
    local sv_recovery_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name "*.gridss.somatic.full.vcf.gz")
    if [ -z ${sv_recovery_vcf} ]; then
        sv_recovery_vcf=$(find -L ${run_dir}/structural_caller/ -type f -name "*.gridss.somatic.full.vcf.gz")
        if [ -z ${sv_recovery_vcf} ]; then
            echo "[ERROR] Unable to locate GRIDSS sv recovery candidates. Exiting." >&2
            exit 1
        fi
    fi
    echo ${sv_recovery_vcf}
}

########################################### Bachelor ##########################################

locate_bachelor_germline_variants() {
    local run_dir=$1
    local bachelor_csv=$(find -L ${run_dir}/bachelor/ -type f -name "*_germline_variants.csv")
    if [ -z ${bachelor_csv} ]; then
        local bachelor_output=$(find -L ${run_dir}/bachelor/ -type f -name "bachelor_output.csv")
        local bachelor_found_nothing=$(find -L ${run_dir}/bachelor/ -type f -name "bachelor_found_no_variants")
        if [ -z ${bachelor_output} ] && [ -z ${bachelor_found_nothing} ]; then
            echo "[ERROR] Unable to locate any bachelor output. Exiting." >&2
            exit 1
        fi
    fi
    echo ${bachelor_csv}
}

############################################# CHORD ###########################################

locate_chord_prediction_file() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord/ -type f -name "*_chord_prediction.txt")
    if [ -z ${chord_prediction_file} ]; then
        echo "[ERROR] Unable to locate CHORD prediction file. Exiting." >&2
        exit 1
    fi
    echo ${chord_prediction_file}
}

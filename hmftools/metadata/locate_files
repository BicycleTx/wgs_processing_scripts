#!/bin/bash
base_path="/data/common"
if [ -z "`hostname | grep datastore`" ]; then
    # Common folder does not exist on crunches...
    base_path="/data"
fi

############################# Database Credentials #############################
locate_prod_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/prod
}

locate_pilot_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pilot
}


##################################### JARS #####################################
locate_prod_purple() {
    echo ${base_path}/tools/purple_v2.30/purple.jar
}

locate_pilot_purple() {
    echo ${base_path}/tools/purple_pilot/purple.jar
}

locate_prod_patient_db() {
    echo ${base_path}/tools/patient-db_v3.20/patient-db.jar
}

locate_pilot_patient_db() {
    echo ${base_path}/tools/patient-db_pilot/patient-db.jar
}

#################################### Resources #####################################
locate_hotspot_tsv() {
    echo "/data/common/dbs/sage/KnownHotspots.tsv"
}

##################################### Somatics #####################################
locate_sage_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/somaticVariants/*/ -type f -name *sage.vcf.gz)
    if [ -z ${somatic_vcf} ]
    then
        # TODO: Clean up after sage is rerun for every sample
        somatic_vcf=$(find -L ${run_dir}/somaticVariants/*/ -type f -name *post_processed.vcf.gz)
        if [ -z ${somatic_vcf} ]
        then
            echo "[ERROR] Unable to locate somatic variants. Exiting." >&2
            exit 1
        fi
    fi
    echo ${somatic_vcf}
}

locate_purple_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.somatic.vcf.gz")
    if [ -z ${somatic_vcf} ]
    then
        echo "[ERROR] Unable to locate somatic variants. Exiting." >&2
        exit 1
    fi
    echo ${somatic_vcf}
}

locate_purple_pilot_somatics() {
    local run_dir=$1
    local somatic_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.somatic.vcf.gz")
    if [ -z ${somatic_vcf} ]
    then
        echo "[ERROR] Unable to locate somatic variants. Exiting." >&2
        exit 1
    fi
    echo ${somatic_vcf}
}

##################################### Structural Variants #####################################

locate_purple_structural_variants() {
    local run_dir=$1
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.ann.vcf.gz")
	if [ -z ${structural_vcf} ]; then
		structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
		if [ -z ${structural_vcf} ]; then
			echo "[ERROR] Unable to locate PURPLE structural variants. Exiting." >&2
			exit 1
		fi
	fi
    echo ${structural_vcf}
}

locate_purple_pilot_structural_variants() {
    local run_dir=$1
	local structural_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.sv.ann.vcf.gz")
	if [ -z ${structural_vcf} ]; then
		structural_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.sv.vcf.gz")
		if [ -z ${structural_vcf} ]; then
			echo "[ERROR] Unable to locate PURPLE structural variants. Exiting." >&2
			exit 1
		fi
	fi
    echo ${structural_vcf}
}

locate_variant_annotator_fusions() {
    local run_dir=$1
    local variant_annotator_dir=${run_dir}/svAnalysis
    if [ ! -d ${variant_annotator_dir} ]; then
        echo "[ERROR] Unable to locate variant annotator dir for fusions: ${variant_annotator_dir}. Exiting" >& 2
        exit 1
    fi

	local fusion_csv=$(find -L ${variant_annotator_dir}/ -type f -name "*_fusions.csv")
	if [ -z ${fusion_csv} ]; then
        echo "[ERROR] Unable to locate variant annotator fusions csv. Exiting." >& 2
        exit 1
    fi
    echo ${fusion_csv}
}

locate_variant_annotator_disruptions() {
    local run_dir=$1
    local variant_annotator_dir=${run_dir}/svAnalysis
    if [ ! -d ${variant_annotator_dir} ]; then
        echo "[ERROR] Unable to locate variant annotator dir for disruptions: ${variant_annotator_dir}. Exiting" >&2
        exit 1
    fi

	local disruption_csv=$(find -L ${variant_annotator_dir}/ -type f -name "*_disruptions.csv")
	if [ -z ${disruption_csv} ]; then
        echo "[ERROR] Unable to locate variant annotator disruptions csv. Exiting." >&2
        exit 1
    fi
    echo ${disruption_csv}
}

locate_variant_annotator_pilot_fusions() {
    local run_dir=$1
    local variant_annotator_dir=${run_dir}/svAnalysis_pilot
    if [ ! -d ${variant_annotator_dir} ]; then
        echo "[ERROR] Unable to locate variant annotator pilot dir for fusions: ${variant_annotator_dir}. Exiting" >&2
        exit 1
    fi

	local fusion_csv=$(find -L ${variant_annotator_dir}/ -type f -name "*_fusions.csv")
	if [ -z ${fusion_csv} ]; then
        echo "[ERROR] Unable to locate variant annotator pilot fusions csv. Exiting." >&2
        exit 1
    fi
    echo ${fusion_csv}
}

locate_variant_annotator_pilot_disruptions() {
    local run_dir=$1
    local variant_annotator_dir=${run_dir}/svAnalysis_pilot
    if [ ! -d ${variant_annotator_dir} ]; then
        echo "[ERROR] Unable to locate variant annotator pilot dir for disruptions: ${variant_annotator_dir}. Exiting" >&2
        exit 1
    fi

	local disruption_csv=$(find -L ${variant_annotator_dir}/ -type f -name "*_disruptions.csv")
	if [ -z ${disruption_csv} ]; then
        echo "[ERROR] Unable to locate variant annotator pilot disruptions csv. Exiting." >&2
        exit 1
    fi
    echo ${disruption_csv}
}

locate_linx_pilot_fusions() {
    local run_dir=$1
    local linx_dir=${run_dir}/sv
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx pilot dir for fusions: ${linx_dir}. Exiting" >&2
        exit 1
    fi

	local fusion_csv=$(find -L ${linx_dir}/ -type f -name "*.linx.fusions.csv")
	if [ -z ${fusion_csv} ]; then
        echo "[ERROR] Unable to locate linx pilot fusions csv. Exiting." >&2
        exit 1
    fi
    echo ${fusion_csv}
}

locate_linx_pilot_disruptions() {
    local run_dir=$1
    local linx_dir=${run_dir}/sv
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx pilot dir for disruptions: ${linx_dir}. Exiting" >&2
        exit 1
    fi

	local disruption_csv=$(find -L ${linx_dir}/ -type f -name "*.linx.disruptions.csv")
	if [ -z ${disruption_csv} ]; then
        echo "[ERROR] Unable to locate linx pilot disruptions csv. Exiting." >&2
        exit 1
    fi
    echo ${disruption_csv}
}

locate_gridss_structural_variants() {
    local run_dir=$1
	# Use the backport VCF if it exists
	local structural_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/breakpoint_position_backport/ -type f -name "*.gridss.somatic.vcf.gz.breakpoint_position_backport.vcf.gz")
    if [ -z ${structural_vcf} ]; then
        structural_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name "*.gridss.somatic.vcf.gz")
		if [ -z ${structural_vcf} ]; then
			echo "[ERROR] Unable to locate GRIDSS structural variants. Exiting." >&2
			exit 1
		fi
    fi
    echo ${structural_vcf}
}

locate_gridss_recovery_candidates() {
    local run_dir=$1
    local sv_recovery_vcf=$(find -L ${run_dir}/structuralVariants/gridss/*/ -type f -name "*.gridss.somatic.full.vcf.gz")
    if [ -z ${sv_recovery_vcf} ]; then
        echo "[ERROR] Unable to locate GRIDSS sv recovery candidates. Exiting." >&2
        exit 1
    fi
    echo ${sv_recovery_vcf}
}
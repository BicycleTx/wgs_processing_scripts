#!/usr/bin/env bash

base_path="/data/common"
if [ -z "$(hostname | grep datastore)" ]; then
    # Common folder does not exist on crunches...
    base_path="/data"
fi

############################# Database Credentials #############################
locate_prod_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/prod
}

locate_pilot_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pilot
}

locate_vicc_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/vicc_db
}

locate_vicc_pilot_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/vicc_db_pilot
}

locate_reference_validation_sets_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/reference_validation_sets
}

locate_pipeline_v5_validation_database_credentials() {
    echo ${base_path}/dbs/mysql_credentials/pipeline_v5_validation
}

############################# Nextcloud Credentials #############################
locate_nextcloud_upload_reports_credentials() {
    echo ${base_path}/dbs/nextcloud_credentials/nextcloud_credentials
}

##################################### JARS #####################################
locate_prod_sage() {
    echo ${base_path}/tools/sage_v1.1/sage.jar
}

locate_prod_purple() {
    echo ${base_path}/tools/purple_v2.34/purple.jar
}

locate_pilot_purple() {
    echo ${base_path}/tools/purple_pilot/purple.jar
}

locate_prod_bachelor() {
    echo ${base_path}/tools/bachelor_v1.9/bachelor.jar
}

locate_pilot_bachelor() {
    echo ${base_path}/tools/bachelor_pilot/bachelor.jar
}

locate_prod_patient_db() {
    echo ${base_path}/tools/patient-db_v3.37/patient-db.jar
}

locate_pilot_patient_db() {
    echo ${base_path}/tools/patient-db_pilot/patient-db.jar
}

locate_prod_linx() {
    echo ${base_path}/tools/sv-linx_v1.6/sv-linx.jar
}

locate_pilot_linx() {
    echo ${base_path}/tools/sv-linx_pilot/sv-linx.jar
}

locate_prod_patient_reporter() {
    echo ${base_path}/tools/patientreporter_v7.9/patient-reporter.jar
}

locate_pilot_patient_reporter() {
    echo ${base_path}/tools/patientreporter_pilot/patient-reporter.jar
}

locate_pilot_vicc() {
    echo ${base_path}/tools/vicc_knowledgebase_pilot/vicc-knowledgebase-importer.jar
}

locate_prod_cgi_treatment_extractor_knowledgebase() {
    echo ${base_path}/tools/knowledgebase-importer_v1.8/cgi-treatment-extractor.jar
}

locate_pilot_cgi_treatment_extractor_knowledgebase() {
    echo ${base_path}/tools/knowledgebase-importer_pilot/cgi-treatment-extractor.jar
}

locate_prod_knowledgebase() {
    echo ${base_path}/tools/knowledgebase-importer_v1.8/knowledgebase-importer.jar
}

locate_pilot_knowledgebase() {
    echo ${base_path}/tools/knowledgebase-importer_pilot/knowledgebase-importer.jar
}
################################# NON JAVA TOOLS ###################################
locate_pgx_main() {
    echo ${base_path}/repos/scripts/pgx/main.py
}

locate_vcftools() {
    echo ${base_path}/tools/vcftools_v0.1.14/bin/vcftools
}

#################################### Resources #####################################
locate_hotspot_tsv() {
    echo ${base_path}/dbs/sage/KnownHotspots.tsv
}

locate_pgx_resource_dir() {
    echo ${base_path}/dbs/pgx/
}

################################### WGS METRICS ####################################

locate_wgs_metrics() {
    local run_dir=$1 && shift
    local sample=$1 && shift

    local metrics_file=""
    local metrics_dir_pre_v5=${run_dir}/QCStats
    local metrics_dir_v5=${run_dir}/${sample}/bam_metrics

    if [ -d ${metrics_dir_pre_v5} ]; then
        metrics_file=$(find -L ${metrics_dir_pre_v5}/ -type f -name "${sample}*_WGSMetrics.txt")
    elif [ -d ${metrics_dir_v5} ]; then
        metrics_file=$(find -L ${metrics_dir_v5}/ -type f -name "${sample}.wgsmetrics")
    else
        echo "[ERROR] Unable to locate metrics file for ${sample} in run ${run_dir}. Exiting." >& 2
        exit 1
    fi

    echo ${metrics_file}
}

################################# Somatic Variants #################################
locate_sage_somatics() {
    local run_dir=$1
    local somatics_dir_pre_v5=${run_dir}/somaticVariants
    local somatics_dir_v5=${run_dir}/somatic_caller

    local somatic_vcf=""

    if [ -d ${somatics_dir_pre_v5} ]; then
        somatic_vcf=$(find -L ${somatics_dir_pre_v5}/*/ -type f -name *sage.vcf.gz)
        if [ -z ${somatic_vcf} ]; then
            # TODO: Clean up after sage is rerun for every sample
            somatic_vcf=$(find -L ${somatics_dir_pre_v5}/*/ -type f -name *post_processed.vcf.gz)
        fi
    elif [ -d ${somatics_dir_v5} ]; then
        somatic_vcf=$(find -L ${somatics_dir_v5}/ -type f -name *post_processed.vcf.gz)
    fi

    if [ -z ${somatic_vcf} ]; then
        echo "[ERROR] Unable to locate sage somatic variants in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${somatic_vcf}
}

locate_purple_somatics() {
    local run_dir=$1
    local purple_dir=${run_dir}/purple

    local somatic_vcf=""

    if [ -d ${purple_dir} ]; then
        somatic_vcf=$(find -L ${purple_dir} -type f -name "*.purple.somatic.vcf.gz")
    fi

    if [ -z ${somatic_vcf} ]; then
        echo "[ERROR] Unable to locate purple somatic variants in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${somatic_vcf}
}

locate_purple_pilot_somatics() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local somatic_vcf=""

    if [ -d ${purple_pilot_dir} ]; then
        somatic_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.somatic.vcf.gz")
    fi

    if [ -z ${somatic_vcf} ]; then
        echo "[ERROR] Unable to locate purple pilot somatic variants in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${somatic_vcf}
}

############################################ Purple ##########################################

locate_purple_purity() {
    local run_dir=$1
    local purple_purity_file=$(find -L ${run_dir}/purple/ -type f -name "*.purple.purity.tsv")
    if [ -z ${purple_purity_file} ]; then
        echo "[ERROR] Unable to locate purple purity in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${purple_purity_file}
}

locate_purple_pilot_purity() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_purity_file=""

    if [ -d ${purple_pilot_dir} ]; then
        purple_purity_file=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.purity.tsv")
    fi

    if [ -z ${purple_purity_file} ]; then
        echo "[ERROR] Unable to locate purple pilot purity in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${purple_purity_file}
}

locate_purple_qc() {
    local run_dir=$1
    local purple_qc_file=$(find -L ${run_dir}/purple/ -type f -name "*.purple.qc")
    if [ -z ${purple_qc_file} ]; then
        echo "[ERROR] Unable to locate purple qc in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${purple_qc_file}
}

locate_purple_drivers() {
    local run_dir=$1
    local purple_driver_tsv=$(find -L ${run_dir}/purple/ -type f -name "*.driver.catalog.tsv")
    if [ -z ${purple_driver_tsv} ]; then
        echo "[ERROR] Unable to locate purple driver catalog in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${purple_driver_tsv}
}

locate_purple_gene_copynumbers() {
    local run_dir=$1
    local purple_gene_copynumbers=$(find -L ${run_dir}/purple/ -type f -name "*.purple.cnv.gene.tsv")
    if [ -z ${purple_gene_copynumbers} ]; then
        echo "[ERROR] Unable to locate purple gene copynumbers in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${purple_gene_copynumbers}
}

locate_purple_pilot_gene_copynumbers() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local purple_gene_copynumbers=""

    if [ -d ${purple_pilot_dir} ]; then
        purple_gene_copynumbers=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.cnv.gene.tsv")
    fi

    if [ -z ${purple_gene_copynumbers} ]; then
        echo "[ERROR] Unable to locate purple pilot gene copynumbers in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${purple_gene_copynumbers}
}

locate_purple_circos_plot() {
    local run_dir=$1
    local circos_plot=$(find -L ${run_dir}/purple/plot/ -type f -name "*.circos.png")
    if [ -z ${circos_plot} ]; then
        echo "[ERROR] Unable to locate purple circos plot in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${circos_plot}
}

locate_purple_pilot_circos_plot() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local circos_plot=""

    if [ -d ${purple_pilot_dir} ]; then
        circos_plot=$(find -L ${purple_pilot_dir}/plot/ -type f -name "*.circos.png")
    fi

    if [ -z ${circos_plot} ]; then
        echo "[ERROR] Unable to locate purple pilot circos plot in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${circos_plot}
}

##################################### Structural Variants #####################################

locate_purple_structural_variants() {
    local run_dir=$1
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.ann.vcf.gz")
    if [ -z ${structural_vcf} ]; then
        # In pipeline v5.5 we no longer have to annotate purple SVs.
        structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
        if [ -z ${structural_vcf} ]; then
            echo "[ERROR] Unable to locate purple structural variants in ${run_dir}. Exiting." >&2
            exit 1
        fi
    fi
    echo ${structural_vcf}
}

locate_purple_pre_viral_annotate_structural_variants() {
    local run_dir=$1
    local structural_vcf=$(find -L ${run_dir}/purple/ -type f -name "*.purple.sv.vcf.gz")
    if [ -z ${structural_vcf} ]; then
        echo "[ERROR] Unable to locate purple pre-viral-annotate structural variants in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${structural_vcf}
}

locate_purple_pilot_structural_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
	  local structural_vcf=""

	  if [ -d ${purple_pilot_dir} ]; then
	      structural_vcf=$(find -L ${purple_pilot_dir}/ -type f -name "*.purple.sv.ann.vcf.gz")
	  fi

    if [ -z ${structural_vcf} ]; then
        echo "[ERROR] Unable to locate purple pilot structural variants in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${structural_vcf}
}

locate_purple_pilot_pre_viral_annotate_structural_variants() {
    local run_dir=$1
    local purple_pilot_dir=${run_dir}/purple_pilot
    local structural_vcf=""

    if [ -d ${purple_pilot_dir} ]; then
        structural_vcf=$(find -L ${run_dir}/purple_pilot/ -type f -name "*.purple.sv.vcf.gz")
    fi

    if [ -z ${structural_vcf} ]; then
        echo "[ERROR] Unable to locate purple pilot pre-viral-annotate structural variants in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${structural_vcf}
}

locate_gridss_structural_variants() {
    local run_dir=$1
    local gridss_dir_pre_v5=${run_dir}/structuralVariants/gridss
    local gridss_dir_v5=${run_dir}/structural_caller

    local structural_vcf=""
    if [ -d ${gridss_dir_pre_v5} ]; then
	      local gridss_backport_dir=${gridss_dir_pre_v5}/*/breakpoint_position_backport
	      if [ -d ${gridss_backport_dir} ]; then
	          structural_vcf=$(find -L ${gridss_backport_dir}/ -type f -name "*.gridss.somatic.vcf.gz.breakpoint_position_backport.vcf.gz")
        else
            # Fall back to v4 format which did not require the backport.
            structural_vcf=$(find -L ${gridss_dir_pre_v5}/*/ -type f -name "*.gridss.somatic.vcf.gz")
        fi
    elif [ -d ${gridss_dir_v5} ]; then
		    structural_vcf=$(find -L ${gridss_dir_v5}/ -type f -name "*.gridss.somatic.vcf.gz")
    fi

    if [ -z ${structural_vcf} ]; then
        echo "[ERROR] Unable to locate GRIDSS structural variants in ${run_dir}. Exiting." >&2
        exit 1
		fi

    echo ${structural_vcf}
}

locate_gridss_recovery_candidates() {
    local run_dir=$1
    local gridss_dir_pre_v5=${run_dir}/structuralVariants/gridss
    local gridss_dir_v5=${run_dir}/structural_caller

    local sv_recovery_vcf=""
    if [ -d ${gridss_dir_pre_v5} ]; then
        sv_recovery_vcf=$(find -L ${gridss_dir_pre_v5}/*/ -type f -name "*.gridss.somatic.full.vcf.gz")
    elif [ -d ${gridss_dir_v5} ]; then
        sv_recovery_vcf=$(find -L ${gridss_dir_v5}/ -type f -name "*.gridss.somatic.full.vcf.gz")
    fi

    if [ -z ${sv_recovery_vcf} ]; then
        echo "[ERROR] Unable to locate GRIDSS sv recovery candidates in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${sv_recovery_vcf}
}

######################################## LINX ########################################

locate_linx_reported_fusions() {
    local run_dir=$1
    local linx_dir=${run_dir}/linx
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for fusions: ${linx_dir}. Exiting" >&2
        exit 1
    fi
    
    local fusion_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.reported_fusion.tsv")
    if [ -z ${fusion_tsv} ]; then
        # Assume there were no reported fusions found. This can be removed with linx v1.7. See also DEV-1049
        # TODO Revert once linx v1.7+ has been run on all runs
        #echo "[ERROR] Unable to locate linx fusions tsv in ${run_dir}. Exiting." >&2
        #exit 1
        fusion_tsv=/data/common/dbs/sv/empty.linx.reported_fusion.tsv
    fi
    echo ${fusion_tsv}
}

locate_linx_disruptions() {
    local run_dir=$1
    local linx_dir=${run_dir}/linx
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for disruptions: ${linx_dir}. Exiting" >&2
        exit 1
    fi
    
    local disruption_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.disruptions.tsv")
    if [ -z ${disruption_tsv} ]; then
        # Assume there were no disruptions found. This can be removed with linx v1.7. See also DEV-1049
        # TODO Revert once linx v1.7+ has been run on all runs
        #echo "[ERROR] Unable to locate linx disruptions tsv in ${run_dir}. Exiting." >&2
        #exit 1
        disruption_tsv=/data/common/dbs/sv/empty.linx.disruptions.tsv
    fi
    echo ${disruption_tsv}
}

locate_linx_viral_insertions() {
    local run_dir=$1
    local linx_dir=${run_dir}/linx
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for viral insertions: ${linx_dir}. Exiting" >&2
        exit 1
    fi

    local viral_insertion_tsv=$(find -L ${linx_dir}/ -type f -name "*.linx.viral_inserts.tsv")
    if [ -z ${viral_insertion_tsv} ]; then
        echo "[ERROR] Unable to locate viral insertion tsv in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${viral_insertion_tsv}
}

locate_linx_drivers() {
    local run_dir=$1
    local linx_dir=${run_dir}/linx
    if [ ! -d ${linx_dir} ]; then
        echo "[ERROR] Unable to locate linx dir for drivers: ${linx_dir}. Exiting" >&2
        exit 1
    fi

    local drivers_tsv=$(find -L ${linx_dir}/ -type f -name "*.driver.catalog.tsv")
    if [ -z ${drivers_tsv} ]; then
        drivers_tsv=$(locate_purple_drivers ${run_dir})
        if [ -z ${drivers_tsv} ]; then
            echo "[ERROR] Unable to locate either linx drivers catalog tsv or purple driver catalog tsv in ${run_dir}. Exiting." >&2
            exit 1
        fi
    fi
    echo ${drivers_tsv}
}

########################################### Germline ##########################################
locate_germline_variants() {
    local run_dir=$1 && shift
    local ref_sample=$1 && shift

    local germline_vcf=""

    if [ -f ${run_dir}/pipeline.version ]; then
        # >v5 format
        germline_vcf=$(find -L ${run_dir}/${ref_sample}/germline_caller/ -type f -name *.germline.vcf.gz)
    else
        # <v5 format
        germline_vcf=$(find -L ${run_dir}/ -type f -name *.annotated.vcf.gz)
    fi

    if [ -z ${germline_vcf} ]; then
        echo "[ERROR] Unable to locate germline VCF in ${run_dir}. Exiting." >&2
        exit 1
    fi

    echo ${germline_vcf}
}

########################################### Bachelor ##########################################

locate_bachelor_variants() {
    local run_dir=$1
    local bachelor_tsv=$(find -L ${run_dir}/bachelor/ -type f -name "*.bachelor.germline_variant.tsv")
    if [ -z ${bachelor_tsv} ]; then
        # The germline_variant_tsv will only be found for bachelor v1.9 and higher. Since we cannot rerun bachelor on datastore,
        # we just blank out bachelor results for every pre-v1.9 bachelor run.
        echo "[WARN] Cannot find bachelor v1.9+ output. Assuming bachelor has not found any variants for ${run_dir}!" >&2
        bachelor_tsv=/data/common/dbs/bachelor/empty.bachelor.germline_variant.tsv
    fi
    echo ${bachelor_tsv}
}

locate_bachelor_variants_pilot() {
    local run_dir=$1
    local bachelor_tsv=$(find -L ${run_dir}/bachelor_pilot/ -type f -name "*.bachelor.germline_variant.tsv")
    if [ -z ${bachelor_tsv} ]; then
        # The germline_variant_tsv will only be found for bachelor v1.9 and higher. Since we cannot rerun bachelor on datastore,
        # we just blank out bachelor results for every pre-v1.9 bachelor run.
        echo "[WARN] Cannot find bachelor v1.9+ output. Assuming bachelor has not found any variants for ${run_dir}!" >&2
        bachelor_tsv=/data/common/dbs/bachelor/empty.bachelor.germline_variant.tsv
    fi
    echo ${bachelor_tsv}
}

############################################# CHORD ###########################################

locate_chord_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord/ -type f -name "*_chord_prediction.txt")
    if [ -z ${chord_prediction_file} ]; then
        echo "[ERROR] Unable to locate CHORD prediction file in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${chord_prediction_file}
}

locate_chord_pilot_prediction() {
    local run_dir=$1
    local chord_prediction_file=$(find -L ${run_dir}/chord_pilot/ -type f -name "*_chord_prediction.txt")
    if [ -z ${chord_prediction_file} ]; then
        echo "[ERROR] Unable to locate pilot CHORD prediction file in ${run_dir}. Exiting." >&2
        exit 1
    fi
    echo ${chord_prediction_file}
}

############################################# LIMS ###########################################

locate_reporting_db_tsv() {
    local reporting_db_tsv=/data/lims/reporting_db.tsv
    if [ ! -f ${reporting_db_tsv} ]; then
        echo "[ERROR] Unable to locate reporting db TSV. Exiting." >&2
        exit 1
    fi
    echo ${reporting_db_tsv}
}

locate_reporting_db_tsv_pilot() {
    local reporting_db_tsv=/data/lims/reporting_db_pilot.tsv
    if [ ! -f ${reporting_db_tsv} ]; then
        echo "[ERROR] Unable to locate pilot reporting db TSV. Exiting." >&2
        exit 1
    fi
    echo ${reporting_db_tsv}
}


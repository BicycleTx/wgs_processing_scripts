#!/usr/bin/env bash

SUBMISSIONS_DIR="/data/submissions"
HMF_QUERY_SCRIPT="query_lims"
SBP_QUERY_SCRIPT="query_sbp_api"
HMF_LIMS_JSON='/data/lims/lims.json'
submission=$1

## sanity checks
if [[ $# -eq 0 ]] ; then echo "run with eg: $0 HMFreg0000"; exit 1; fi
if [[ -z ${submission+x} ]]; then echo "Missing submission id as input"; exit 1; fi
if [[ ! ${submission} =~ ^HMFreg ]]; then echo "Submission should start with \"HMFreg\""; exit 1; fi

## setting up variables
outPath=${SUBMISSIONS_DIR}'/'${submission}
lmsFile=${outPath}'/lims.txt'
samFile=${outPath}'/samples.txt'
runFile=${outPath}'/runs.txt'
logFile=${outPath}'/log.txt'
bcsFile=${outPath}'/barcodes.txt'
repFile=${outPath}'/report.txt'
subJson=${outPath}'/submission.json'
lmsJson=$(echo ${lmsFile} | sed 's/txt$/json/')
samJson=$(echo ${samFile} | sed 's/txt$/json/')
runJson=$(echo ${runFile} | sed 's/txt$/json/')
dateString=$(date)

## create dirs
if [[ -e ${outPath} ]] ; then echo "[EXIT] Dir exists already (${outPath})"; exit 1; fi
mkdir -p ${outPath} || exit 1

## gather submission info from LAB LIMS
echo "[INFO] Querying HMF LIMS to get submission info"
cat ${HMF_LIMS_JSON} | jq -r ".submissions.${submission}" > ${subJson}
pName=$(cat ${subJson} | jq -r '.project_name')
cName=$(cat ${subJson} | jq -r '.contact_name')
cMail=$(cat ${subJson} | jq -r '.contact_email')
pType=$(cat ${subJson} | jq -r '.analysis_type')
if [[ -z ${pName+x} ]]; then echo "[EXIT] Unable to find project for submission"; exit 1; fi

## get all samples involved from LAB LIMS
echo "[INFO] Querying HMF LIMS to get sample list"
${HMF_QUERY_SCRIPT} -type samples -filter "submission=${submission}" > ${lmsFile}
${HMF_QUERY_SCRIPT} -type samples -filter "submission=${submission}" -json > ${lmsJson}

## get q30/yield data from SBP API
echo "[INFO] Querying SBP API to get sample status"
${SBP_QUERY_SCRIPT} -type samples -filter "submission=${submission}" > ${samFile}
${SBP_QUERY_SCRIPT} -type samples -filter "submission=${submission}" -json > ${samJson}

## get entity/run-status from SBP API
echo "[INFO] Querying SBP API to get run status"
${SBP_QUERY_SCRIPT} -type runs -filter "name=${submission}" > ${runFile}
${SBP_QUERY_SCRIPT} -type runs -filter "name=${submission}" -json > ${runJson}

## get counts to check completeness
hmfCount=$(cat ${lmsFile} | grep -cv "^#")
sbpCount=$(cat ${samFile} | grep -v "^#" | awk '$6 ==  "Ready"' | wc -l )

## setup barcodes file (needed later for fastq file cleanup)
cat ${samFile} | grep -v "^#" | cut -f2 > ${bcsFile}

## setup reporting info
rm -f ${repFile}
echo -e "PROJECT\t${cName}" >> ${repFile}
echo -e "PROJECT\t${cMail}" >> ${repFile}
echo -e "PROJECT\t${pName}" >> ${repFile}
echo -e "PROJECT\t${submission}" >> ${repFile}
echo -e "PROJECT\t${hmfCount}" >> ${repFile}
echo -e "PROJECT\t${pType}" >> ${repFile}

cat ${samFile} | grep -v ^# | while read line; do
    subm=$(echo "${line}" | cut -f1)
    barc=$(echo "${line}" | cut -f2)
    q30=$(echo "${line}" | cut -f3)
    yldR=$(echo "${line}" | cut -f4)
    yld=$(echo "${line}" | cut -f5)
    name=$(echo "${line}" | cut -f7)
    date=$(cat ${lmsJson} | jq -r ".[] | select( .sample_id == \"$barc\" ) | .arrival_date" )
    sops=$(cat ${lmsJson} | jq -r ".[] | select( .sample_id == \"$barc\" ) | .lab_sop_versions" )
    echo -e "SAMPLE\t${subm}\t${barc}\t${q30}\t${yldR}\t${yld}\t${name}\t${date}\t${sops}" >> ${repFile}
done


## logging
echo "#        Date = ${dateString}" >> ${logFile}
echo "#  Submission = ${submission}" >> ${logFile}
echo "#     Project = ${pName}"      >> ${logFile}
echo "# SampleCount = ${hmfCount}"   >> ${logFile}
echo "#   DataCount = ${sbpCount}"   >> ${logFile}

## stdout msg
pdfName="${submission}_${pName}.pdf"
echo "[INFO] View Log:"
echo " cat ${logFile}"
echo "[INFO] Inspect output files:"
echo " cat ${lmsFile}"
echo " cat ${samFile}"
echo " cat ${runFile}"
echo "[INFO] Or get reporting info (for ${pdfName}):"
echo " cat ${repFile} | cut -f1 --complement"
echo "[INFO] If you finish the submission then please also chown:"
echo " sudo chown -R root:root ${outPath}"

## warn if not complete
if [[ ${hmfCount} -ne ${sbpCount} ]]; then 
    echo "[WARNING] There might be missing samples!"
    exit 1
fi

exit 0

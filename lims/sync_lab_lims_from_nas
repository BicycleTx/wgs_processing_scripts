#!/usr/bin/env bash

## setup main variables
DATESTR="$(date '+%y%m%d')"
NAS_DIR="/volume1/sync_from_infracom"
OUT_DIR="/data/ops/lims"
LAB_DIR="${OUT_DIR}/lab_files"
DAY_DIR="${LAB_DIR}/${DATESTR}"
SYM_DIR="${LAB_DIR}/latest"
ACC2CSV="/data/common/tools/access2csv_v190415/target/appassembler/bin/access2csv"

TEST_FILE='LIMS_pilot_be.accdb'
CPCT_FILE='LIMS_v4.5.be.accdb'
SAMP_FILE='HMF-FOR-001 Received Samples 2020 v5.7.xlsx'
PROC_FILE='HMF-FOR-002 Sample in process 2020 v4.2.xlsx'
SAMP_FILE_2019='HMF-FOR-001 Received Samples 2019 v5.5.xlsx'
PROC_FILE_2019='HMF-FOR-002 Sample in process 2019 v4.1.xlsx'

TEST_NAS_PATH="${NAS_DIR}/04 Current backend/${TEST_FILE}"
CPCT_NAS_PATH="${NAS_DIR}/04 Current backend/${CPCT_FILE}"
SAMP_NAS_PATH="${NAS_DIR}/${SAMP_FILE}"
PROC_NAS_PATH="${NAS_DIR}/${PROC_FILE}"
SAMP_NAS_PATH_2019="${NAS_DIR}/${SAMP_FILE_2019}"
PROC_NAS_PATH_2019="${NAS_DIR}/${PROC_FILE_2019}"

## File and dir sanity checks
if ssh nas "[[ ! -d '${NAS_DIR}' ]]"; then echo "[ERROR] Dir does not exist (nas:${NAS_DIR})" && exit 1; fi
for nas_file_path in "${TEST_NAS_PATH}" "${CPCT_NAS_PATH}" "${SAMP_NAS_PATH}" "${PROC_NAS_PATH}" "${SAMP_NAS_PATH_2019}" "${PROC_NAS_PATH_2019}"; do
    if ssh nas "[[ ! -f '${nas_file_path}' ]]"; then echo "[ERROR] File does not exist (nas:${nas_file_path})" && exit 1; fi
done
for dir_to_check in ${OUT_DIR} ${LAB_DIR} ${SYM_DIR}; do
    if [[ ! -d "${dir_to_check}" ]]; then echo "[ERROR] Dir does not exist (${dir_to_check})" && exit 1; fi
    if [[ ! -w "${dir_to_check}" ]]; then echo "[ERROR] No write permission (${dir_to_check})" && exit 1; fi
done
mkdir -p ${DAY_DIR}

## Setup file variables
test_source="${DAY_DIR}/${TEST_FILE}"
test_target="${DAY_DIR}/${DATESTR}_LimsCPCTtrackPilot.accdb"
test_txt="${test_target}.csv"
test_latest="${SYM_DIR}/lims_test"

cpct_source="${DAY_DIR}/${CPCT_FILE}"
cpct_target="${DAY_DIR}/${DATESTR}_LimsCPCTtrack.accdb"
cpct_txt="${cpct_target}.csv"
cpct_latest="${SYM_DIR}/lims_cpct"

samp_source="${DAY_DIR}/${SAMP_FILE}"
samp_target="${DAY_DIR}/${DATESTR}_LimsReceived.xlsx"
samp_txt="${samp_target}_samp.tsv"
samp_latest="${SYM_DIR}/lims_samp"
subm_txt="${samp_target}_subm.tsv"
subm_latest="${SYM_DIR}/lims_subm"
cont_txt="${samp_target}_cont.tsv"
cont_latest="${SYM_DIR}/lims_cont"
proc_source="${DAY_DIR}/${PROC_FILE}"
proc_target="${DAY_DIR}/${DATESTR}_LimsInProcess.xlsx"
proc_txt="${proc_target}.tsv"
proc_latest="${SYM_DIR}/lims_proc"

samp_source_2019="${DAY_DIR}/${SAMP_FILE_2019}"
samp_target_2019="${DAY_DIR}/${DATESTR}_LimsReceived_2019.xlsx"
samp_txt_2019="${samp_target_2019}_samp_2019.tsv"
samp_latest_2019="${SYM_DIR}/2019_samp"
subm_txt_2019="${samp_target_2019}_subm_2019.tsv"
subm_latest_2019="${SYM_DIR}/2019_subm"
proc_source_2019="${DAY_DIR}/${PROC_FILE_2019}"
proc_target_2019="${DAY_DIR}/${DATESTR}_LimsInProcess_2019.xlsx"
proc_txt_2019="${proc_target_2019}.tsv"
proc_latest_2019="${SYM_DIR}/2019_proc"

## Retrieve files from NAS
echo "[INFO] Syncing LIMS files from NAS to DATASTORE"
echo "[INFO]   SourceDir: nas:${NAS_DIR}"
echo "[INFO]   TargetDir: ${DAY_DIR}"
rsync -s "nas:${TEST_NAS_PATH}" ${DAY_DIR}
rsync -s "nas:${CPCT_NAS_PATH}" ${DAY_DIR}
rsync -s "nas:${SAMP_NAS_PATH}" ${DAY_DIR}
rsync -s "nas:${PROC_NAS_PATH}" ${DAY_DIR}
rsync -s "nas:${SAMP_NAS_PATH_2019}" ${DAY_DIR}
rsync -s "nas:${PROC_NAS_PATH_2019}" ${DAY_DIR}

## Make sure all required files are present
if [[ ! $? -eq 0 ]]; then echo "[ERROR] Error with RSYNC from NAS, please check " && exit 1; fi

for input_file in "${test_source}" "${cpct_source}" "${samp_source}" "${proc_source}"; do
    if [[ ! -f "${input_file}" ]]; then
        echo "[ERROR] Input file from NAS not present (${input_file})" && exit 1;
    fi
done

## Symlink LIMS files to create stable naming for downstream work
ln -sfn "${test_source}" "${test_target}"
ln -sfn "${cpct_source}" "${cpct_target}"
ln -sfn "${samp_source}" "${samp_target}"
ln -sfn "${proc_source}" "${proc_target}"

## Symlink LIMS files to create stable naming for downstream work 2019
ln -sfn "${samp_source_2019}" "${samp_target_2019}"
ln -sfn "${proc_source_2019}" "${proc_target_2019}"

## Convert to text format
echo "[INFO] Converting input files to CSV/TSV"

echo "[INFO]   Converting $(basename ${test_target})"
${ACC2CSV} --with-header --input "${test_target}" --output ${DAY_DIR} --table tblSamples --quote-all false
if [[ ! $? -eq 0 ]]; then echo "[ERROR] TEST export to csv FAILED" && exit 1; fi
mv ${DAY_DIR}/tblSamples.csv ${test_txt}
echo "[INFO]   Converting $(basename ${cpct_target})"
${ACC2CSV} --with-header --input "${cpct_target}" --output ${DAY_DIR} --table tblSamples --quote-all false
if [[ ! $? -eq 0 ]]; then echo "[ERROR] CPCT export to csv FAILED" && exit 1; fi
mv ${DAY_DIR}/tblSamples.csv ${cpct_txt}
echo "[INFO]   Converting $(basename ${samp_target}) (sheet submissions)"
xlsx2csv -d "\t" "${samp_target}" -s 1 | tail -n +5 > ${subm_txt}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] SUBM export to csv FAILED" && exit 1; fi
echo "[INFO]   Converting $(basename ${samp_target}) (sheet samples)"
xlsx2csv -d "\t" "${samp_target}" -s 2 | tail -n +2 > ${samp_txt}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] SAMP export to csv FAILED" && exit 1; fi
echo "[INFO]   Converting $(basename ${samp_target}) (sheet Contact)"
xlsx2csv -d "\t" "${samp_target}" -s 3 | tail -n +1 > ${cont_txt}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] CONT export to csv FAILED" && exit 1; fi
echo "[INFO]   Converting $(basename ${proc_target})"
xlsx2csv -d "\t" "${proc_target}" -s 1 | tail -n +5 > ${proc_txt}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] PROC export to csv FAILED" && exit 1; fi

## Convert to text format for 2019 files
echo "[INFO]   Converting $(basename ${samp_target_2019}) (sheet submissions)"
xlsx2csv -d "\t" "${samp_target_2019}" -s 1 | tail -n +5 > ${subm_txt_2019}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] SUBM export to csv FAILED" && exit 1; fi
echo "[INFO]   Converting $(basename ${samp_target_2019}) (sheet samples)"
xlsx2csv -d "\t" "${samp_target_2019}" -s 2 | tail -n +2 > ${samp_txt_2019}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] SAMP export to csv FAILED" && exit 1; fi
echo "[INFO]   Converting $(basename ${proc_target_2019})"
xlsx2csv -d "\t" "${proc_target_2019}" -s 1 | tail -n +5 > ${proc_txt_2019}
if [[ ! $? -eq 0 ]]; then echo "[ERROR] PROC export to csv FAILED" && exit 1; fi

## Create latest symlinks
echo "[INFO] Symlinking to latest files (to ${SYM_DIR})"
echo "[INFO]   ${test_latest}"
ln -sfn ${test_txt} ${test_latest}
echo "[INFO]   ${cpct_latest}"
ln -sfn ${cpct_txt} ${cpct_latest}
echo "[INFO]   ${subm_latest}"
ln -sfn ${subm_txt} ${subm_latest}
echo "[INFO]   ${samp_latest}"
ln -sfn ${samp_txt} ${samp_latest}
echo "[INFO]   ${cont_latest}"
ln -sfn ${cont_txt} ${cont_latest}
echo "[INFO]   ${proc_latest}"
ln -sfn ${proc_txt} ${proc_latest}

## Create latest symlinks for 2019 files
echo "[INFO]   ${subm_latest_2019}"
ln -sfn "${subm_txt_2019}" "${subm_latest_2019}"
echo "[INFO]   ${samp_latest_2019}"
ln -sfn "${samp_txt_2019}" "${samp_latest_2019}"
echo "[INFO]   ${proc_latest_2019}"
ln -sfn "${proc_txt_2019}" "${proc_latest_2019}"

## Gather some metrics
echo "[INFO] Stats:"
for latest_file in ${test_latest} ${cpct_latest} ${subm_latest} ${samp_latest} ${cont_latest} ${proc_latest}; do
    total_lines=$(cat ${latest_file} | wc -l)
    echo "[INFO]   LineCount of ${latest_file} = ${total_lines}"
done

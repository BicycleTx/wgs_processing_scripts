#!/usr/bin/env bash

submission=$1
submissionDir="/data/submissions/${submission}"
sopRegex='QC[0-9]+V[0-9]+-SEQ[0-9]+V[0-9]+'

if [[ -z "${submission}" ]]; then echo "[EXIT] Provide submission (eg HMFreg0001)" && exit 1; fi

lmsSubJsn=$(query_lims.pl -type submissions -filter "submission=${submission}" -json)
lmsSmpJsn=$(query_lims.pl -type samples -filter "submission=${submission}" -json)
apiSmpJsn=$(query_api.pl -type samples -filter "submission=${submission}" -json)
apiRnsJsn=$(query_api.pl -type runs -filter "name=${submission}" -json)

analyType=$(echo "$lmsSubJsn" | jq -r ".[].analysis_type" )
smpLmsTot=$(echo "$lmsSmpJsn" | jq 'length')
smpApiTot=$(echo "$apiSmpJsn" | jq 'length')
rnsApiTot=$(echo "$apiRnsJsn" | jq 'length')

smpLmsErr=$(echo "$lmsSmpJsn" | jq -c '[.[] | select(.lab_status=="Failed")] | length')
smpApiRdy=$(echo "$apiSmpJsn" | jq -c '[.[] | select(.status=="Ready")] | length')
rnsApiRdy=$(echo "$apiRnsJsn" | jq -c '[.[] | select(.status=="Validated" or .status=="Failed" or .status=="SnpCheck")] | length')
rnsApiVal=$(echo "$apiRnsJsn" | jq -c '[.[] | select(.status=="Validated")] | length')

echo "[INFO] Output type for ${submission} in lims is \"${analyType}\""
echo "[INFO] ${smpLmsTot} LMS samples total (of which ${smpLmsErr} failed)"
echo "[INFO] ${smpApiTot} BFX samples total"
echo "[INFO] ${smpApiRdy} BFX samples ready"
echo "[INFO] ${rnsApiTot} BFX runs total"
echo "[INFO] ${rnsApiRdy} BFX runs finished"
echo "[INFO] ${rnsApiVal} BFX runs validated"
echo ""
echo "[INFO] Inspect further:"
echo "  query_lims -type samples -filter submission=${submission}"
echo "  query_api.pl -type samples -filter submission=${submission}"
echo "  query_api.pl -type runs -filter name=${submission}"
echo ""
echo "[INFO] Or gather submission if all is ready and ok:"
echo "  gather_submission ${submission}"
echo ""

## print warnings last
if [[ -d ${submissionDir} ]]; then echo "[WARNING] Submission directory already exists (${submissionDir})"; fi
if [[ ! "${rnsApiVal}" -eq "${rnsApiTot}" ]]; then echo "[WARNING] Not all runs in API are status Validated!"; fi
echo "$lmsSmpJsn" | jq -r '.[].lab_sop_versions' | while read smpSopStr; do
  ## Note to self: no quoted regex since bash 3.2
  if [[ ! "${smpSopStr}" =~ ${sopRegex} ]]; then echo "[WARNING] Found sample with incomplete SOP string (${smpSopStr} does not match ${sopRegex})!"; fi
done

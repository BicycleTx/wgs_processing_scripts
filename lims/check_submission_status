#!/usr/bin/env bash

source message_functions || exit 1

submission=$1

if [[ -z "${submission}" ]]; then
    echo "[ERROR] Provide a submission (eg HMFreg0001). Exiting" && exit 1
fi

submission_dir="/data/submissions/${submission}"
sop_regex='QC[0-9]+V[0-9]+-SEQ[0-9]+V[0-9]+'

lms_sub_jsn=$(query_lims.pl -type submissions -filter "submission=${submission}" -exact -json | jq '.[-1]')
lms_smp_jsn=$(query_lims.pl -type samples -filter "submission=${submission}" -json)
api_smp_jsn=$(query_api.pl -type samples -filter "submission=${submission}" -filter "status!=Unregistered" -json)
api_rns_jsn=$(query_api.pl -type runs -filter "name=${submission}" -json)

analysis_type=$(echo "${lms_sub_jsn}" | jq -r ".analysis_type" )
smp_lms_tot=$(echo "${lms_smp_jsn}" | jq 'length')
smp_api_tot=$(echo "${api_smp_jsn}" | jq 'length')
rns_api_tot=$(echo "${api_rns_jsn}" | jq 'length')

smp_lms_err=$(echo "${lms_smp_jsn}" | jq -c '[.[] | select(.lab_status=="Failed")] | length')
smp_api_rdy=$(echo "${api_smp_jsn}" | jq -c '[.[] | select(.status=="Ready")] | length')
rns_api_rdy=$(echo "${api_rns_jsn}" | jq -c '[.[] | select(.status=="Validated" or .status=="Failed" or .status=="Finished")] | length')
rns_api_val=$(echo "${api_rns_jsn}" | jq -c '[.[] | select(.status=="Validated")] | length')

info "Output type for ${submission} in lims is \"${analysis_type}\""
info "${smp_lms_tot} LMS samples total (of which ${smp_lms_err} failed)"
info "${smp_api_tot} BFX samples total"
info "${smp_api_rdy} BFX samples ready"
info "${rns_api_tot} BFX runs total"
info "${rns_api_rdy} BFX runs finished"
info "${rns_api_val} BFX runs validated"
echo ""

info "Commands for further inspection:"
echo "  query_lims.pl -type samples -filter submission=${submission}"
echo "  query_api.pl -type samples -filter submission=${submission}"
echo "  query_api.pl -type runs -filter name=${submission}"
echo ""

## Sanity checks
info "Performing sanity checks"
warnings_found="FALSE"
if [[ -d "${submission_dir}" ]]; then
    warn "Submission directory already exists (${submission_dir})"
    warnings_found="TRUE"
fi

while read -r smp_sop_str; do
    ## Note to self: no quoted regex since bash 3.2
    if [[ ! "${smp_sop_str}" =~ ${sop_regex} ]]; then
        warn "Found sample with incomplete SOP string (${smp_sop_str} does not match ${sop_regex})!"
        warnings_found="TRUE"
        continue
    fi
done < <(echo "${lms_smp_jsn}" | jq -r '.[] | select( .lab_status != "Failed") | .lab_sop_versions')

required_yield=$(echo "${lms_sub_jsn}" | jq -r '. | if has("total_yield_required") then .total_yield_required else 0 end' )
samples=$(hmf_api_get "samples?submission=${submission}")
measured_yield=$(echo "${samples}" | jq '[.[] | select(.status=="Ready") | .yld] | add')
measured_yield_gbase=$((measured_yield / 1000000000))
if [[ "${measured_yield_gbase}" -lt "${required_yield}" ]]; then
    warn "TOTAL YIELD INSUFFICIENT: Submission requires ${required_yield} GBase but only has ${measured_yield_gbase} GBase!"
    warnings_found="TRUE"
else
    info "Total yield sufficient: required was ${required_yield} GBase and measured is ${measured_yield_gbase} GBase"
fi

if [[ ! "${rns_api_val}" -eq "${rns_api_tot}" ]]; then
    warn "Not all runs in API have status Validated!"
    warnings_found="TRUE"
fi

## If all OK print cmd to process further
if [[ "${warnings_found}" == "TRUE" ]]; then
    warn "Warnings encountered during check. Fix these first!"
else
    info "Gather submission if all is ok:"
    echo "  gather_submission ${submission}"
    echo ""
fi
#!/usr/bin/env bash

source message_functions || exit 1

samplesheet_path=$1

LOG_OUT_LOC="/data/ops/recurrent/flowcell_sample_checks"
NAS_TARGET_DIR="overviews/flowcellsamplechecks"
NAS_TARGET_LOC="/volume1/web/${NAS_TARGET_DIR}"
NAS_PW_LOC="/data/common/dbs/nas_credentials/rsyncuser"

if [[ -z "$samplesheet_path" ]]; then
    info "Run with: $(basename $0) /path/to/SampleSheet.csv"
    exit 1
fi

main() {

    [[ -f "$samplesheet_path" ]] || die "Provided SampleSheet does not exist ($samplesheet_path)"
    fc_dir_name=$(basename "${samplesheet_path}" | sed 's#_SampleSheet.csv##')
    fc_fcid=${fc_dir_name: -9}
    #fc_date=${fc_dir_name:0:6}
    fc_name=$(hmf_api_get "flowcells?flowcell_id=${fc_fcid}" | jq -r '.[-1].name')

    [[ -n "$fc_name" ]] || die "No name defined for flowcell ID (${fc_fcid})"
    [[ "$fc_name" != 'null' ]] || die "No name found for flowcell ID (${fc_fcid})"
    
    info "Checking samples for flowcell ${fc_name}"

    out_log_name="$(date "+%y%m%d")_flowcell_sample_check_${fc_name}.log"
    out_log_path="${LOG_OUT_LOC}/${out_log_name}"

    [[ ! -f "${out_log_path}" ]] || die "File exists (${out_log_path})"
    
    ## find index of Sample_ID column
    idx_id=$(grep Sample_ID "${samplesheet_path}" | tr "," "\n" | grep -n Sample_ID | cut -d":" -f1)

    ## collect all barcodes from SampleSheet
    mapfile -t barcodes < <(sed -e '1,/Sample_ID/d' "${samplesheet_path}" | grep -vP "^[\,\s]+$" | cut -d',' -f"${idx_id}" | sort | uniq)

    info "  Input: ${samplesheet_path}"
    for barcode in ${barcodes[*]}; do

        sample=$(hmf_api_get "samples?barcode=${barcode}" | jq '.[-1]')
        most_recent_run=$(hmf_api_get "runs?barcode=${barcode}" | jq '.[-1]')
        run_info=$(jq -r '[.ini, .status] | @tsv' <<< "${most_recent_run}" | tr "\t" "|")
        sample_info=$(jq -r '[.submission, .barcode, .status, .name] | @tsv' <<< "${sample}" | tr "\t" "|")
        sample_run_info="${sample_info}|${run_info}"

        status=$(jq -r '.status' <<< "${sample}")
        required_yield=$(jq -r '.yld_req' <<< "${sample}")
        measured_yield=$(jq -r '.yld' <<< "${sample}")
        required_gbase=$((required_yield/(10**9)))
        measured_gbase=$((measured_yield/(10**9)))
        result="NA"
        reason="NA"

        if [[ "${status}" == "Unregistered" ]]; then
            result="FAIL"
            reason="Unregistered"
        elif [[ "${status}" == "Ready" ]]; then
            result="OK"
            reason="Ready"
        elif [[ -n "${measured_yield}" && -n "${required_yield}" ]]; then
            bases_needed=$((required_yield-measured_yield));
            if [[ "${bases_needed}" -lt 1 ]]; then
                result="FAIL"
                reason="Yield is sufficient but status not Ready"
            else
                # default is floor not ceil so need to add 1
                result="FAIL"
                reason="Needs $((bases_needed/(10**9) + 1)) GBase extra"
            fi
        else
            result="FAIL"
            reason="Unable to determine yield difference"
        fi
        echo -e "${result}: ${reason} (${measured_gbase} GBase of required ${required_gbase} for ${sample_run_info})"
    done | sort >> "${out_log_path}"
    not_ok_count=$(grep -cv OK "${out_log_path}")
    info "  Output: ${out_log_path}"
    info "  NAS: https://hmf-nas.synology.me/${NAS_TARGET_DIR}/${out_log_name}"
    info "  Amount of samples not OK: $not_ok_count"
    sshpass -p "$(cat "${NAS_PW_LOC}")" rsync -ah "${out_log_path}" "rsyncuser@nas:${NAS_TARGET_LOC}/"
    info "Finished with $(basename $0) for ${fc_name}"
}

function join_by { local IFS="$1"; shift; echo "$*"; }

main

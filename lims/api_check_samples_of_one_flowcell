#!/usr/bin/env bash

source message_functions || exit 1

samplesheet_url=$1
task_name="flowcell sample check"

LOG_OUT_LOC="/data/ops/recurrent/flowcell_sample_checks"
NAS_TARGET_DIR="overviews/flowcellsamplechecks"
NAS_TARGET_LOC="/volume1/web/${NAS_TARGET_DIR}"

if [[ -z "$samplesheet_url" ]]; then
    info "Run with: $(basename "$0") gs://path/to/SampleSheet.csv"
    exit 1
fi

main() {
    info "Starting with ${task_name} for samplesheet ${samplesheet_url}"
    samplesheet_content=$(gsutil cat "${samplesheet_url}") || die "Unable to read sheet (${samplesheet_url})"

    fc_dir_name=$(basename "${samplesheet_url}" | sed 's#_SampleSheet.csv##')
    fc_fcid=${fc_dir_name: -9}
    info "Searching api for flowcell with flowcell_id ${fc_fcid}"
    fc_json=$(hmf_api_get "flowcells?flowcell_id=${fc_fcid}")
    fc_count=$(jq 'length' <<< "${fc_json}")

    if [[ "${fc_count}" -ne 1 ]]; then
        die "Expected exactly one flowcell but found ${fc_count}. Exiting."
    else
        fc_json=$(jq '.[-1]' <<< "${fc_json}")
    fi

    fc_name=$(jq -r '.name' <<< "${fc_json}")
    fc_status=$(jq -r '.status' <<< "${fc_json}")
    fc_qc=$(jq -r '.undet_rds_p_pass' <<< "${fc_json}")

    [[ -n "$fc_name" ]] || die "No name defined for flowcell ID (${fc_fcid})"
    [[ "$fc_name" != 'null' ]] || die "No name found for flowcell ID (${fc_fcid})"

    info "  flowcell ${fc_name} found with status ${fc_status} (qc_pass=${fc_qc})"

    out_log_name="$(date "+%y%m%d")_flowcell_sample_check_${fc_name}.log"
    out_log_path="${LOG_OUT_LOC}/${out_log_name}"

    [[ ! -f "${out_log_path}" ]] || die "File exists (${out_log_path})"
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
    result reason submission barcode name required measured sample_info run_info > "${out_log_path}"
    
    ## find index of Sample_ID column
    idx_id=$(echo "${samplesheet_content}" | grep Sample_ID | tr "," "\n" | grep -n Sample_ID | cut -d":" -f1)

    ## collect all barcodes from SampleSheet
    mapfile -t barcodes < <(echo "${samplesheet_content}" | sed -e '1,/Sample_ID/d' | grep -vP "^[\,\s]+$" | cut -d',' -f"${idx_id}" | sort | uniq)
    barcode_count=${#barcodes[@]}

    info "Checking samples for flowcell ${fc_name}"
    for barcode in ${barcodes[*]}; do

        sample=$(hmf_api_get "samples?barcode=${barcode}" | jq '.[-1]')
        most_recent_run=$(hmf_api_get "runs?barcode=${barcode}" | jq '.[-1]')
        run_info=$(jq -r '[.ini, .status, .id] | @tsv' <<< "${most_recent_run}" | tr "\t" "|")

        submission=$(jq -r '.submission' <<< "${sample}")
        name=$(jq -r '.name' <<< "${sample}")
        status=$(jq -r '.status' <<< "${sample}")
        required_yield=$(jq -r '.yld_req' <<< "${sample}")
        measured_yield=$(jq -r '.yld' <<< "${sample}")
        required_gbase=$((required_yield/(10**9)))
        measured_gbase=$((measured_yield/(10**9)))
        result="NA"
        reason="NA"

        if [[ "${status}" == "Unregistered" ]]; then
            result="FAIL"
            reason="Sample is Unregistered"
        elif [[ "${status}" == "Ready" ]]; then
            result="OK"
            reason="Ready"
        elif [[ -n "${measured_yield}" && -n "${required_yield}" ]]; then
            bases_needed=$((required_yield-measured_yield));
            if [[ "${bases_needed}" -lt 1 ]]; then
                result="FAIL"
                reason="Yield sufficient but not Ready"
            else
                # default is floor not ceil so need to add 1
                result="FAIL"
                reason="Needs $((bases_needed/(10**9) + 1)) GBase extra"
            fi
        else
            result="FAIL"
            reason="Unable to determine yield diff"
        fi
        printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        "${result}" "${reason}" "${submission}" "${barcode}" "${name}" "${required_gbase}" "${measured_gbase}" "${run_info}"

    done | sort >> "${out_log_path}"
    not_ok_count=$(awk '$1 != "OK"' "${out_log_path}" | grep -vc ^#)
    info "  SSheet: ${samplesheet_url} (${barcode_count} samples)"
    info "  Output: ${out_log_path}"
    info "  Report: https://hmf-nas.synology.me/${NAS_TARGET_DIR}/${out_log_name}"
    final_msg="Found $not_ok_count samples that are not OK for flowcell ${fc_name}"
    if [[ "${not_ok_count}" -ne 0 ]]; then
        warn "  ${final_msg}"
    else
        info "  ${final_msg}"
    fi
    copy_file_to_nas "${out_log_path}" "${NAS_TARGET_LOC}"
    info "Finished with ${task_name} for ${fc_name}"
}

function join_by { local IFS="$1"; shift; echo "$*"; }

main

#!/usr/bin/env bash

source message_functions || exit 1

barcode=$1
JSON1=${2:-"/data/ops/lims/prod/lims.json"}
JSON2=${3:-"/data/ops/lims/pilot/lims.json"}
ONLY_IMPORTANT_FIELDS=${4:-"false"}
FAIL_FIELDS=(analysis_type arrival_date biopsy_site cohort conc entity hospital_pa_sample_id hospital_patient_id is_cup
isolation_id isolation_experiment_id isolation_status lab_sop_versions lab_status label
patient prep_id prep_type project_name ptum received_sample_id ref_sample_id
report_germline report_germline_level
sample_name sample_id shallowseq submission yield tumor_perc
)
WARN_FIELDS=(
reporting_id report_pgx report_viral report_conclusion sampling_date
)

EMPTY="<empty>"

main (){
    [[ -n "$barcode" ]] || die "$0 {barcode} [json1 json2 true/false]"
    echo "# Barcode:$barcode json1:${JSON1} json2:${JSON2}"
    diff_barcode "${barcode}"
}

diff_barcode() {
    local barcode=$1 && shift

    one=$(query_lims.pl -lims "${JSON1}" -type "samples" -filter "sample_id=${barcode}" -rna -exact -json) \
      || die "Querying LIMS JSON 1 failed ($barcode)"
    two=$(query_lims.pl -lims "${JSON2}" -type "samples" -filter "sample_id=${barcode}" -rna -exact -json) \
      || die "Querying LIMS JSON 2 failed ($barcode)"

    # Can only compare if we find exactly one sample
    if [[ ! $(jq 'length' <<< "${one}") -eq 1 ]]; then
        echo "# WARNING: Unable to compare ${barcode} (not present in ${JSON1})"
        return 1
    fi
    if [[ ! $(jq 'length' <<< "${two}") -eq 1 ]]; then
        echo "# WARNING: Unable to compare ${barcode} (not present in ${JSON2})"
        return 1
    fi

    if [[ "$ONLY_IMPORTANT_FIELDS" == "true" ]]; then
        partial_diff "$barcode" "$one" "$two"
    else
        complete_diff "$barcode" "$one" "$two"
    fi

}

partial_diff() {
    local barcode=$1 && shift
    local json1=$1 && shift
    local json2=$1 && shift
    for key in "${FAIL_FIELDS[@]}"; do
        compare_two_values "$json1" "$json2" "FAIL" "${barcode}" "${key}"
    done
    for key in "${WARN_FIELDS[@]}"; do
        compare_two_values "$json1" "$json2" "WARN" "${barcode}" "${key}"
    done
}

complete_diff() {
    local barcode=$1 && shift
    local json1=$1 && shift
    local json2=$1 && shift
    diff_count=$(diff -y <(jq -S <<< "${json1}") <(jq -S <<< "${json2}") | wc -l | tr -d " ")
    if [[ "${diff_count}" -eq 0 ]]; then
        info "  DIFF OK (${diff_count} diff for ${barcode})"
    else
        warn "  DIFF FAIL (${diff_count} diff for ${barcode})"
        diff <(jq -S <<< "${json1}") <(jq -S <<< "${json2}")
    fi
}

compare_two_values() {
    local json1=$1 && shift
    local json2=$1 && shift
    local fail_string=$1 && shift
    local barcode=$1 && shift
    local key=$1 && shift
    local outcome="NA"
    val1=$(jq -r --arg key "${key}" '.[-1][$key]' <<< "${json1}")
    val2=$(jq -r --arg key "${key}" '.[-1][$key]' <<< "${json2}")
    [[ "${val1}" == "" ]] && val1="${EMPTY}";
    [[ "${val2}" == "" ]] && val2="${EMPTY}";
    if [[ $(tr '[:lower:]' '[:upper:]' <<< "${val1}") == $(tr '[:lower:]' '[:upper:]' <<< "${val2}") ]]; then
        outcome="OK"
    else
        outcome="${fail_string}"
    fi
    printf "%s\t%s\t%s\t%s\t%s\n" "${barcode}" "${outcome}" "${val1}" "${val2}" "${key}"
}

main
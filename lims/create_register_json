#!/usr/bin/perl
use strict;
use warnings;
use Data::Dumper;
use File::Basename;
use Getopt::Long;
use File::Slurp;
use Time::Piece;
use JSON;
use 5.010.000;

my $YYMMDD = localtime->strftime('%y%m%d');
my $SCRIPT = basename $0;
my $YIELD_FACTOR = 1e9;

my $type;
my $submission;
my $sample;
my $ref_exists = 0;
my $tum_exists = 0;

my %obj = ('set_name'=>undef, 'entity'=>undef, 'ini'=>undef,'priority'=>100);
my %ref = ('barcode'=>undef, 'submission'=>undef, 'yld_req'=>100, 'q30_req'=>75, 'type'=>'ref');
my %tum = ('barcode'=>undef, 'submission'=>undef, 'yld_req'=>300, 'q30_req'=>75, 'type'=>'tumor');

## -----
## Gather input
## -----
my %opt = ();
GetOptions (
  "type=s"        => \$type,
  "submission=s"  => \$submission,
  "sample=s"      => \$sample,
  "set=s"         => \$obj{ 'set_name' },
  "entity=s"      => \$obj{ 'entity' },
  "priority=i"    => \$obj{ 'priority' },
  "ref_barcode=s" => \$ref{ 'barcode' },
  "tum_barcode=s" => \$tum{ 'barcode' },
  "ref_yield=i"   => \$ref{ 'yld_req' },
  "tum_yield=i"   => \$tum{ 'yld_req' },
  "ref_q30=i"     => \$ref{ 'q30_req' },
  "tum_q30=i"     => \$tum{ 'q30_req' },
  "ref_exists"    => \$ref_exists,
  "tum_exists"    => \$tum_exists,
  "debug"         => \$opt{ debug },
  "help|h"        => \$opt{ help }
) or die "Error in command line arguments\n";

my $HELP =<<HELP;

  Description
    Creates one SBP register json from input. 
    Setname for type single: YYMMDD_\${submission}_\${ref_barcode}_\${sample}
    Setname for type somatic: YYMMDD_\${submission}_\${ref_barcode}_\${tum_barcode}_\${sample}
    
  Usage
    $SCRIPT -type single -submission HMFregVAL -entity HMF_EXPERIMENTS -ref_barcode FR111 -sample SampleName
    $SCRIPT -type somatic -submission HMFregVAL -entity HMF_EXPERIMENTS -ref_barcode FR111 -tum_barcode FR222 -sample SampleName
    
  Options
    -set       <s>  Set name
    -ref_yield <i>  Yield in GBase for ref sample
    -tum_yield <i>  Yield in GBase for tumor sample
    -ref_q30   <i>  Q30 for ref sample
    -tum_q30   <i>  Q30 for tumor sample
    -priority  <i>  Default 100 (set lower for higher priority)
    -ref_exist      Adds use_existing_sample flag to ref sample
    -tum_exist      Adds use_existing_sample flag to tumor sample
HELP

say $HELP and exit(1) if $opt{ help };
say $HELP and say "[ERROR] No type provided" and exit(1) unless $type;
say $HELP and say "[ERROR] No submission provided" and exit(1) unless $submission;
say $HELP and say "[ERROR] No sample provided" and exit(1) unless $sample;
say $HELP and say "[ERROR] No entity provided" and exit(1) unless $obj{'entity'};

## -----

if ( $type eq 'single' ){
    $obj{'ini'} = 'SingleSample.ini';
    $ref{'yld_req'} = $ref{'yld_req'} * $YIELD_FACTOR;
    $ref{'submission'} = $submission;
    $ref{'use_existing_sample'} = JSON::true if $ref_exists;
    my $set = join( "_", $YYMMDD, $submission, $ref{'barcode'}, $sample);
    $obj{'set_name'} = $set unless $obj{'set_name'};
    push( @{$obj{'samples'}}, \%ref );
}
elsif ( $type eq 'somatic' ){
    say $HELP and say "[ERROR] Somatic chosen but no tum_barcode provided" and exit(1) unless $tum{'barcode'};
    $obj{'ini'} = 'Somatic.ini';
    $ref{'yld_req'} = $ref{'yld_req'} * $YIELD_FACTOR;
    $tum{'yld_req'} = $tum{'yld_req'} * $YIELD_FACTOR;
    $ref{'submission'} = $submission;
    $tum{'submission'} = $submission;
    $ref{'use_existing_sample'} = JSON::true if $ref_exists;
    $tum{'use_existing_sample'} = JSON::true if $tum_exists;
    my $set = join( "_", $YYMMDD, $submission, $ref{'barcode'}, $tum{'barcode'}, $sample);
    $obj{'set_name'} = $set unless $obj{'set_name'};
    push( @{$obj{'samples'}}, \%ref );
    push( @{$obj{'samples'}}, \%tum );
}
else{
    say "[EXIT] Type not supported ($type)";
}

my $json_file_name = $obj{'set_name'} . '.json';
printSetJson( \%obj,  $json_file_name );

## -----

sub printSetJson{
    my ($data, $out_file_path) = @_;
    my $json_obj = JSON->new->allow_nonref;
    my $json_txt = $json_obj->pretty->encode( $data );
    say "[INFO] Writing json ($out_file_path)";
    open my $fh, '>', $out_file_path or die "Unable to open output file ($out_file_path): $!\n";
        print $fh $json_txt;
    close $fh;
}

#/bin/bash

config=$1
source ${config}

normalbam=${out}/${normalsample}.bam
tumorbam=${out}/${tumorsample}.bam

strelkavcf=${out}/strelka.passed.somatic.merged.final.vcf
if [ ${RUN_STRELKA} == true ]; then
    echo -e "\nRunning Strelka\n"
    strelkaoutput=${out}/strelka

    if [ -d "${strelkaoutput}" ]; then
        rm -r ${strelkaoutput}
    fi

    abspath=`dirname $(readlink $0 || echo $0)`
    strelkaconfig=${abspath}/config/strelka.ini
    strelka --tumor ${tumorbam} --normal ${normalbam} --ref ${ref} --config ${strelkaconfig} --output-dir ${strelkaoutput};
    make -C ${strelkaoutput}

    gatk -T CombineVariants -R ${ref} --genotypemergeoption unsorted -o ${out}/strelka.passed.somatic.merged.vcf -V ${strelkaoutput}/results/passed.somatic.snvs.vcf -V ${strelkaoutput}/results/passed.somatic.indels.vcf
    perl -p -e 's/\t([A-Z][A-Z]:)/\tGT:$1/g' ${out}/strelka.passed.somatic.merged.vcf | perl -p -e 's/(:T[UO]R?)\t/$1\t0\/0:/g' | perl -p -e 's/(:\d+,\d+)\t/$1\t0\/1:/g' | perl -p -e 's/(#CHROM.*)/##StrelkaGATKCompatibility=Added GT fields to strelka calls for gatk compatibility.\n$1/g' > ${tmp}/temp.vcf
    mv ${tmp}/temp.vcf ${strelkavcf}
fi

varscanvcf=${out}/varscan.merged.Somatic.hc.vcf
if [ ${RUN_VARSCAN} == true ]; then
	echo -e "\nRunning pileup to prepare input for varscan\n"
	normalpileup=${out}/${normalsample}.pileup
	# KODU: In production we pipe the pileup to tabix/bgzip and then uncompress it when feeding to varscan.
	# We don't do that here since we don't run varscan per chromosome  and the pileup file isn't large for test data
	#sambamba mpileup --tmpdir=${tmp} ${normalbam} --samtools "-q 1 -f ${ref}" > ${normalpileup}

	# TEMPORARILY DISABLE PILEUP TO SAVE TIME
	samtools mpileup -q 1 -f ${ref} ${normalbam} > ${normalpileup}
    tabix -s 1 -b 2 -e 2 ${normalpileup}

    tumorpileup=${out}/${tumorsample}.pileup
    # KODU: In production we pipe the pileup to tabix/bgzip and then uncompress it when feeding to varscan.
    # We don't do that here since we don't run varscan per chromosome  and the pileup file isn't large for test data
    #sambamba mpileup --tmpdir=${tmp} ${tumorbam} --samtools "-q 1 -f ${ref}" > ${tumorpileup}

    # TEMPORARILY DISABLE PILEUP TO SAVE TIME
    samtools mpileup -q 1 -f ${ref} ${tumorbam} > ${tumorpileup}
    tabix -s 1 -b 2 -e 2 ${tumorpileup}

	echo -e "\nRunning varscan\n"
	varscanoutput=${out}/varscan

	# EXPT
	varscan somatic ${normalpileup} ${tumorpileup} ${varscanoutput} --min-var-freq 0.1 --output-vcf 1

	#PROD
	#varscan processSomatic ${varscanoutput}.snp.vcf -max-normal-freq 0.02 --p-value 0.05
	#varscan processSomatic ${varscanoutput}.indel.vcf -max-normal-freq 0.02 --p-value 0.05
    #EXPT
	varscan processSomatic ${varscanoutput}.snp.vcf
	varscan processSomatic ${varscanoutput}.indel.vcf

    gatk -T CombineVariants -R ${ref} --genotypemergeoption unsorted -o ${varscanvcf} -V ${varscanoutput}.snp.Somatic.hc.vcf -V ${varscanoutput}.indel.Somatic.hc.vcf
    # KODU: For mac OS, the backup extension (".bak") is mandatory when calling sed
    # This find-and-replace is supposedly done to differentiate varscan from freebayes eventually.
    sed -i .bak 's/SSC/VS_SSC/' ${varscanvcf}
fi

freebayesvcf=${out}/freebayes.filtered.somatic.vcf
if [ ${RUN_FREEBAYES} == true ]; then
    echo -e "\nRunning freebayes\n"
    # KODU: Below command is run per CHR in production
    #freebayes -f ${ref} -C 3 --pooled-discrete --genotype-qualities --min-coverage 5 --no-mnps --no-complex ${normalbam} ${tumorbam} > ${out}/freebayes.raw.vcf
    #freebayes -f ${ref} --min-alternate-fraction 0.1 -C 2 --min-repeat-entropy 1 --no-partial-observation --pooled-continuous --report-genotype-likelihood-max --allele-balance-priors-off --pooled-discrete --genotype-qualities --min-coverage 5 --no-mnps --no-complex ${normalbam} ${tumorbam} > ${out}/freebayes.raw.vcf
    freebayes -f ${ref} --min-alternate-fraction 0.1 -C 2 --min-repeat-entropy 1 --no-partial-observation --pooled-continuous --report-genotype-likelihood-max --allele-balance-priors-off --pooled-discrete --genotype-qualities --min-coverage 5 --no-mnps --no-complex ${normalbam} ${tumorbam} > ${out}/freebayes.raw.vcf
    vcftools vcf-sort -c -t ${tmp} ${out}/freebayes.raw.vcf | vcflib vcfuniq > ${out}/freebayes.sorted_uniq.vcf

    # KODU: This command is run on the merged vcfs in production.
    uniq ${out}/freebayes.sorted_uniq.vcf > ${out}/freebayes.vcf

    #sampleR=`grep -P "^#CHROM" ${out}/freebayes.vcf | cut -f 10`
	#sampleT=`grep -P "^#CHROM" ${out}/freebayes.vcf | cut -f 11`

	#vcflib vcfsamplediff VT ${sampleR} ${sampleT} ${out}/freebayes.vcf > ${out}/freebayes.VTannot.vcf
	#sed -i .bak 's/SSC/FB_SSC/' ${out}/freebayes.VTannot.vcf
	#grep -P "^#" ${out}/freebayes.VTannot.vcf > ${out}/freebayes.germline.vcf
	#grep -P "^#" ${out}/freebayes.VTannot.vcf > ${out}/freebayes.somatic.vcf
	#grep -P "^#" ${out}/freebayes.VTannot.vcf > ${out}/freebayes.somatic.vcf
	#grep -i "VT=germline" ${out}/freebayes.VTannot.vcf >> ${out}/freebayes.germline.vcf
	#grep -i "VT=somatic" ${out}/freebayes.VTannot.vcf >> ${out}/freebayes.somatic.vcf

    abspath=`dirname $(readlink $0 || echo $0)`
    python ${abspath}/code/filterFreebayes.py -v ${out}/freebayes.vcf > ${freebayesvcf}
    #python ${abspath}/code/filterFreebayes.py -v ${out}/freebayes.somatic.vcf > ${freebayesvcf}
	#cat ${out}/freebayes.somatic.vcf | snpsift filter "(GEN[ALL].DP>=20) & (GEN[ALL].GQ>=15) & (QUAL>=10) & (FB_SSC>=20)" > ${freebayesvcf}
	#cat ${out}/freebayes.germline.vcf | snpsift filter "(GEN[ALL].DP>=20) & (GEN[ALL].GQ>=15) & (QUAL>=10)" > ${out}/freebayes.filtered.germline.vcf
fi

mutectvcf=${out}/mutect_passed.vcf
if [ ${RUN_MUTECT} == true ]; then
    echo -e "\nRunning MuTect\n"
    cosmic=${dbspath}/cosmic_v76/CosmicCodingMuts_v76.vcf.gz
    dbsnp=${dbspath}/GATK_bundle_v2.8/dbsnp_137.b37.vcf

    export JAVA_HOME=$(/usr/libexec/java_home -v 1.7)
    #PROD
    mutect -T MuTect -R ${ref} --intervals 17 --dbsnp ${dbsnp} --input_file:normal ${normalbam} --input_file:tumor ${tumorbam} --out ${out}/mutect.out --vcf ${out}/mutect.vcf
    #EXPT
    #mutect -T MuTect -R ${ref}  --intervals 17 --max_alt_alleles_in_normal_qscore_sum 33 --dbsnp ${dbsnp} --input_file:normal ${normalbam} --input_file:tumor ${tumorbam} --out ${out}/mutect.out --vcf ${out}/mutect.vcf

    export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
    
    cat ${out}/mutect.vcf | snpsift filter "( na FILTER ) | (FILTER = 'PASS')"  > ${mutectvcf}
fi

if [ ${RUN_SOMATIC_POSTPROCESS} == true ]; then
    echo -e "\nRunning somatic postprocessing (merge & annotate)\n"

    #gatk -T CombineVariants -R ${ref} -o ${out}/somatics.merged.vcf --genotypemergeoption uniquify -V:strelka ${strelkavcf} -V:varscan ${varscanvcf} -V:freebayes ${freebayesvcf} -V:mutect ${mutectvcf}
    gatk -T CombineVariants -R ${ref} -o ${out}/somatics.merged.vcf --genotypemergeoption uniquify -V:varscan ${varscanvcf} -V:freebayes ${freebayesvcf} -V:mutect ${mutectvcf}

    #TEMP DISABLE FOR EXPERIMENTS TO SAVE TIME
    #cosmic=${dbspath}/cosmic_v76/CosmicCodingMuts_v76.vcf.gz
    #dbsnp=${dbspath}/GATK_bundle_v2.8/dbsnp_137.b37.vcf

    #snpeff GRCh37.74 -s ${out}/somatics_snpEff_summary.html -v ${out}/somatics.merged.vcf -hgvs -lof -no-downstream -no-upstream -no-intergenic > ${out}/somatics.merged.snpEff.vcf
    #gatk -T VariantAnnotator -R ${ref} -o ${out}/somatics.merged.snpEff.dbSNP.vcf --variant ${out}/somatics.merged.snpEff.vcf --dbsnp ${dbsnp} --alwaysAppendDbsnpId
    #gatk -T VariantAnnotator -R ${ref} -o ${out}/somatics.merged.snpEff.dbSNP.Cosmicv76.vcf --variant ${out}/somatics.merged.snpEff.dbSNP.vcf --dbsnp ${cosmic} --alwaysAppendDbsnpId

    #abspath=`dirname $(readlink $0 || echo $0)`
    #python ${abspath}/code/melt_somatic_vcf.py -t ${tumorsample} -v ${out}/somatics.merged.snpEff.dbSNP.Cosmicv76.vcf > ${out}/somatics.merged.snpEff.dbSNP.Cosmicv76.melted.vcf
fi

if [ ${RUN_FREEC} == true ]; then
    freecoutput=${out}/copyNumber
    if [ ! -d "${freecoutput}" ]; then
        mkdir ${freecoutput}
    fi

    abspath=`dirname $(readlink $0 || echo $0)`
    freecconfig=${abspath}/config/${freecconfigfile}

    freec -conf ${freecconfig}

    cat ${abspath}/code/assess_significance.R | R --slave --args ${freecoutput}/${tumorsample}.bam_CNVs ${freecoutput}/${tumorsample}.bam_ratio.txt
    cat ${abspath}/code/makeGraph.R | R --slave --args 2 ${freecoutput}/${tumorsample}.bam_ratio.txt
    cat ${abspath}/code/makeKaryotype.R | R --slave --args 2 24 4 500000 ${freecoutput}/${tumorsample}.bam_ratio.txt
fi


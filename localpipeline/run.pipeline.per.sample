#!/bin/bash
# Script to run all pipeline jobs for a single sample

# Control parameters
RUN_PIPELINE_PER_LANE=false
RUN_MARKDUP=false
RUN_INDEL_REALIGN=false
RUN_POSTSTATS=false
RUN_VARIANT_CALLING=false
RUN_VARIANT_FILTER=false
RUN_VARIANT_ANNOTATION=true

# Reading params from input arguments
fastqpath=$1
dbspath=$2
ref=$3
out=$4
qc=$5

sample=$6
flowcell=$7
index=$8

# Actual pipeline starts now!

if [ ${RUN_PIPELINE_PER_LANE} == true ]; then
	# Expected output: ${out}/{sample}_{lane}.bam
	run.pipeline.per.lane ${fastqpath} ${ref} ${out} ${qc} ${sample} ${flowcell} ${index} L001
fi

if [ ${RUN_MARKDUP} == true ]; then
	echo -e "\nMark duplicates\n"
	sambamba markdup -p ${out}/${sample}_L001.bam ${out}/sambamba_markdup_${sample}.bam
	echo -e "\nRun flagstat on markdup'ed BAM file\n"
	sambamba flagstat -p ${out}/sambamba_markdup_${sample}.bam
fi

if [ ${RUN_INDEL_REALIGN} == true ]; then
	known_indel_vcf1=${dbspath}/GATK_bundle_v2.8/1000G_phase1.indels.b37.vcf
	known_indel_vcf2=${dbspath}/GATK_bundle_v2.8/Mills_and_1000G_gold_standard.indels.b37.vcf

	echo -e "\nRunning GATK Indel-Realignment\n"
	targetIntervals=${out}/forIndelRealignment.intervals.list
	gatk -T RealignerTargetCreator -R ${ref} -I ${out}/sambamba_markdup_${sample}.bam -known ${known_indel_vcf1} -known ${known_indel_vcf2} -o ${targetIntervals}
	gatk -T IndelRealigner -R ${ref} -I ${out}/sambamba_markdup_${sample}.bam -targetIntervals ${targetIntervals} -o ${out}/gatk_indel_realign_${sample}.bam
	
	echo -e "\nRun flagstat on realigned BAM file\n"
	sambamba flagstat -p ${out}/gatk_indel_realign_${sample}.bam
	
	cp ${out}/gatk_indel_realign_${sample}.bam ${out}/${sample}.bam
	cp ${out}/gatk_indel_realign_${sample}.bai ${out}/${sample}.bai
fi

bam=${out}/${sample}.bam

if [ ${RUN_POSTSTATS} == true ]; then
	echo -e "\nRunning PostStats\n"
	picard CollectMultipleMetrics R=${ref} INPUT=${bam} OUTPUT=${qc}/metrics PROGRAM=CollectAlignmentSummaryMetrics PROGRAM=CollectInsertSizeMetrics PROGRAM=QualityScoreDistribution PROGRAM=CollectGcBiasMetrics
	picard EstimateLibraryComplexity INPUT=${bam} OUTPUT=${qc}/library_complexity.txt
	picard CollectWgsMetrics R=${ref} INPUT=${bam} OUTPUT=${qc}/wgs_metrics.txt MINIMUM_MAPPING_QUALITY=20 MINIMUM_BASE_QUALITY=10 COVERAGE_CAP=250
fi

if [ ${RUN_VARIANT_CALLING} == true ]; then
	calling_dbsnp=${dbspath}/GATK_bundle_v2.8/dbsnp_137.b37.vcf
	gatk -T HaplotypeCaller -R ${ref} -I ${bam} -o ${out}/haplotype_call.g.vcf --dbsnp ${calling_dbsnp} --emitRefConfidence GVCF -stand_call_conf 30 -stand_emit_conf 15 -ploidy 2
	gatk -T GenotypeGVCFs -R ${ref} --variant ${out}/haplotype_call.g.vcf -o ${out}/variants_raw.vcf --dbsnp ${calling_dbsnp}
fi

if [ ${RUN_VARIANT_FILTER} == true ]; then
	gatk -T SelectVariants -R ${ref} -V ${out}/variants_raw.vcf -o ${out}/variants_raw_snp.vcf -selectType SNP -selectType NO_VARIATION
	gatk -T VariantFiltration -R ${ref} -V ${out}/variants_raw_snp.vcf -o ${out}/variants_filtered_snp.vcf --filterName LowQualityDepth --filterExpression "QD < 2.0" --filterName MappingQuality --filterExpression "MQ < 40.0" --filterName StrandBias --filterExpression "FS > 60.0" --filterName HaplotypeScoreHigh --filterExpression "HaplotypeScore > 13.0" --filterName MQRankSumLow --filterExpression "MQRankSum < -12.5" --filterName ReadPosRankSumLow --filterExpression "ReadPosRankSum < -8.0" -cluster 3 -window 35
	gatk -T SelectVariants -R ${ref} -V ${out}/variants_raw.vcf -o ${out}/variants_raw_indel.vcf -selectType INDEL
	gatk -T VariantFiltration -R ${ref} -V ${out}/variants_raw_indel.vcf -o ${out}/variants_filtered_indel.vcf --filterName LowQualityDepth --filterExpression "QD < 2.0" --filterName StrandBias --filterExpression "FS > 200.0" --filterName ReadPosRankSumLow --filterExpression "ReadPosRankSum < -20.0"
    gatk -T CombineVariants -R ${ref} -V ${out}/variants_filtered_snp.vcf -V ${out}/variants_filtered_indel.vcf -o ${out}/variants_filtered.vcf --assumeIdenticalSamples
fi

if [ ${RUN_VARIANT_ANNOTATION} == true ]; then
    echo -e "\nRunning SnpEff Annotation\n"
    snpeff GRCh37.74 -v ${out}/variants_filtered.vcf -hgvs -lof -no-downstream -no-upstream -no-intergenic > ${out}/variants_filtered_snpEff.vcf
    igvtools index ${out}/variants_filtered_snpEff.vcf

    echo -e "\nRunning SnpSift Annotation\n"
    snpsiftfields=hg38_chr,hg38_pos,genename,Uniprot_acc,Uniprot_id,Uniprot_aapos,Interpro_domain,cds_strand,refcodon,SLR_test_statistic,codonpos,fold-degenerate,Ancestral_allele,Ensembl_geneid,Ensembl_transcriptid,aapos,aapos_SIFT,aapos_FATHMM,SIFT_score,SIFT_converted_rankscore,SIFT_pred,Polyphen2_HDIV_score,Polyphen2_HDIV_rankscore,Polyphen2_HDIV_pred,Polyphen2_HVAR_score,Polyphen2_HVAR_rankscore,Polyphen2_HVAR_pred,LRT_score,LRT_converted_rankscore,LRT_pred,MutationTaster_score,MutationTaster_converted_rankscore,MutationTaster_pred,MutationAssessor_score,MutationAssessor_rankscore,MutationAssessor_pred,FATHMM_score,FATHMM_rankscore,FATHMM_pred,MetaSVM_score,MetaSVM_rankscore,MetaSVM_pred,MetaLR_score,MetaLR_rankscore,MetaLR_pred,Reliability_index,VEST3_score,VEST3_rankscore,PROVEAN_score,PROVEAN_converted_rankscore,PROVEAN_pred,CADD_raw,CADD_raw_rankscore,CADD_phred,GERP++_NR,GERP++_RS,GERP++_RS_rankscore,phyloP46way_primate,phyloP46way_primate_rankscore,phyloP46way_placental,phyloP46way_placental_rankscore,phyloP100way_vertebrate,phyloP100way_vertebrate_rankscore,phastCons46way_primate,phastCons46way_primate_rankscore,phastCons46way_placental,phastCons46way_placental_rankscore,phastCons100way_vertebrate,phastCons100way_vertebrate_rankscore,SiPhy_29way_pi,SiPhy_29way_logOdds,SiPhy_29way_logOdds_rankscore,LRT_Omega,UniSNP_ids,1000Gp1_AC,1000Gp1_AF,1000Gp1_AFR_AC,1000Gp1_AFR_AF,1000Gp1_EUR_AC,1000Gp1_EUR_AF,1000Gp1_AMR_AC,1000Gp1_AMR_AF,1000Gp1_ASN_AC,1000Gp1_ASN_AF,ESP6500_AA_AF,ESP6500_EA_AF,ARIC5606_AA_AC,ARIC5606_AA_AF,ARIC5606_EA_AC,ARIC5606_EA_AF,ExAC_AC,ExAC_AF,ExAC_Adj_AC,ExAC_Adj_AF,ExAC_AFR_AC,ExAC_AFR_AF,ExAC_AMR_AC,ExAC_AMR_AF,ExAC_EAS_AC,ExAC_EAS_AF,ExAC_FIN_AC,ExAC_FIN_AF,ExAC_NFE_AC,ExAC_NFE_AF,ExAC_SAS_AC,ExAC_SAS_AF,clinvar_rs,clinvar_clnsig,clinvar_trait,COSMIC_ID,COSMIC_CNT
    snpsiftdb=${dbspath}/dbNSFP_v2.9/dbNSFP2.9.txt.gz
    snpsift dbnsfp -v -f ${snpsiftfields} -db ${snpsiftdb} ${out}/variants_filtered_snpEff.vcf > ${out}/variants_filtered_snpSift.vcf
    igvtools index ${out}/variants_filtered_snpSift.vcf

    echo -e "\nAnnotating on ID field\n"
    dnsbp=${dbspath}/cosmic_v76/CosmicCodingMuts_v76.vcf.gz
    gatk -T VariantAnnotator -R ${ref} -o ${out}/variants_filtered_cosmicv76.vcf --variant ${out}/variants_filtered_snpSift.vcf --dbsnp ${dnsbp} --alwaysAppendDbsnpId

    echo -e "\nAnnotating frequencies\n"
    freqb=${dbspath}/GoNL_v5/gonl.snps_indels.r5.sorted.vcf.gz
    snpsift annotate -tabix -name GoNLv5_ -info AF,AN,AC ${freqdb} ${out}/variants_filtered_cosmicv76.vcf > ${out}/variants_filtered_GoNLv5.vcf
    igvtools index ${out}/variants_filtered_GoNLv5.vcf
fi
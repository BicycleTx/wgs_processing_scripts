#!/usr/bin/env bash

source locate_files || exit 1
source message_functions || exit 1
source metadata_functions || exit 1

info "Start running PGX pilot script"

run_dir=$1 && shift

if [[ $# -eq 0 ]]; then
  venv_dir=$(locate_pgx_venv_dir)
else
  venv_dir=$1 && shift
fi

# START VIRTUAL ENV
source "${venv_dir}/bin/activate" || die "Could not activate PGX venv"

output_dir=${run_dir}/pgx_pilot

version_pgx_tool=$(echo "pilot" | tr "_" " " | tr "v" " "| awk '{print $1}')

ref_sample=$(load_ref_sample_from_metadata "${run_dir}") || die "Could not get ref sample from metadata"
tumor_sample=$(load_tumor_sample_from_metadata "${run_dir}") || die "Could not get tumor sample from metadata"

if [[ -d "${output_dir}" ]]; then
    info "PGX pilot dir exist. PGX dir will first be removed and then be replaced"
    rm -r "${output_dir}" || die "Could not remove existing PGX pilot dir"
fi

germline_vcf=$(locate_germline_variants "${run_dir}" "${ref_sample}") || die "Could not get germline vcf path"
# germline_vcf=$(locate_purple_germline_variants "${run_dir}") || die "Could not get purple germline vcf path"

# REFERENCES
pgx_tool=$(locate_pgx_main)
# pgx_tool=$HOME/repos/scripts/pgx/src/main.py
pgx_resource_dir=$(locate_pgx_resource_dir)
vcftools_tool=$(locate_vcftools)

export PYTHONPATH="${PYTHONPATH}:${pgx_tool}/../"

# RUN
python "${pgx_tool}" "${germline_vcf}" "${tumor_sample}" "${ref_sample}" "${version_pgx_tool}" "${output_dir}"  \
    "${pgx_resource_dir}/panelfiles/DPYD.json" "${vcftools_tool}" \
    --sourcedir "${pgx_resource_dir}" || die "PGX pilot failed"

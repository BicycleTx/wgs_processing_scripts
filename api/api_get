#!/usr/bin/env bash

source message_functions || exit 1

class=$1
filter_input=$2 # optional
filter_field=$3 # optional
json=""

if [[ -z "$class" || $1 == "-h" || $1 == "--help" ]]; then
    script=$(basename "$0")
    echo "---"
    echo "Usage: $script <class> [<filter-value> <filter-key>]"
    echo "Examples:"
    echo "  $script inis"
    echo "  $script entities"
    echo "  $script flowcells"
    echo "  $script flowcells NS21-0064"
    echo "  $script flowcells HG3NHBGXF flowcell_id"
    echo "  $script samples COREDB010110T"
    echo "  $script samples FR30729512 barcode"
    echo "  $script runs 210409_HMFregCORE_FR30729505_FR30729512_COREDB010110"
    echo "  $script sets 210409_HMFregCORE_FR30729505_FR30729512_COREDB010110"
    echo "  (in case no filter-key is provided 'name' is used by default)"
    echo "---"
    exit 1
fi

# Setup filter variables
if [[ -n "${filter_field}" ]]; then
    filter_field="${filter_field}"
elif [[ "${class}" == "runs" ]]; then
    filter_field="set_name"
elif [[ "${class}" =~ ^(sets|samples|flowcells|platforms|sequencers|inis|entities|biopsies)$ ]]; then
    filter_field="name"
else
    die "Class ${class} is not supported."
fi

# Retrieve json
if [[ -n "${filter_input}" ]]; then
    json=$(hmf_api_get "${class}?${filter_field}=${filter_input}") || die "Unable to get json (with filter)"
else
    json=$(hmf_api_get "${class}") || die "Unable to get json (without filter)"
fi

# Print results
if [[ "${class}" == "flowcells" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\n" flowcell_id name q30 yld undet_yld status qc id
    jq -r '.[] | [.flowcell_id, .name, .q30, .yld, .undet_rds_p, .status, .undet_rds_p_pass, .id] | @tsv' <<< "${json}" \
    | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.0f",$4/1e9); $5=sprintf("%.0f",$5/1e9) }1'
elif [[ "${class}" == "samples" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" submission barcode q30 yld_req yld status name type id
    jq -r '.[] | [.submission, .barcode, .q30, .yld_req, .yld, .status, .name, .type, .id] | @tsv' <<< "${json}" \
    | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.0f",$4/1e9); $5=sprintf("%.0f",$5/1e9) }1'
elif [[ "${class}" == "runs" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name entity_id ini status version bucket id
    jq -r '.[] | [.set.name, .set.entity_id, .ini, .status, .version, .bucket, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "platforms" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\n" name max_undet min_q30 min_sample_yield id
    jq -r '.[] | [.name, .undetermined_reads_perc_cutoff, .q30_cutoff, .sample_yield_cutoff, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "sets" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\n" name entity_id ref_sample tumor_sample id
    jq -r '.[] | [.name, .entity_id, .ref_sample, .tumor_sample, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "entities" ]]; then
    printf "#%s\t%s\t%s\t%s\n" name bucket add_to_db id
    jq -r '.[] | [.name, .bucket, .add_to_db, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "inis" ]]; then
    printf "#%s\t%s\n" name id
    jq -r '.[] | [.name, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "sequencers" ]]; then
    printf "#%s\t%s\t%s\n" name platform id
    jq -r '.[] | [.name, .platform, .id] | @tsv' <<< "${json}"
elif [[ "${class}" == "biopsies" ]]; then
    printf "#%s\t%s\n" name id
    jq -r '.[] | [.name, .id] | @tsv' <<< "${json}"
else
    die "Class ${class} is not supported"
fi
#!/usr/bin/env bash

source message_functions || exit 1

print_usage(){
    self=$(basename "$0")
    echo ""
    echo "Descr: Runs a GET query against HMF API"
    echo "Usage: $self [-t] \${query}"
    echo "Exmpl: $self 'samples?name=GIAB12878'"
    echo "       $self 'samples?barcode=FR17758478-200806'"
    echo "       $self 'samples?name=name&type=tumor'"
    echo "       $self 'runs/63961'"
    echo "       $self 'runs?ini=ShallowSeq.ini'"
    echo "       $self -t 'samples'"
    echo "       $self -l 'cohorts'"
    echo "       $self -l 'patients/tumorsamples/COREDBxxxxxx'"
    echo "       $self -l 'statuses/frbarcodes/FRxxxxxx'"
    echo "Options:"
    echo "   -t  Use testing/pilot environment instead of production"
    echo "   -l  Use lama as source instead of hmfapi"
    echo ""
    exit 1
}

environment='prod' # or pilot
source='hmfapi' # or lama

while getopts ':tl' flag; do
    case "${flag}" in
        t) environment='pilot' && shift ;;
        l) source='lama' && shift ;;
        *) print_usage >&2
        exit 1 ;;
    esac
done
query=$1 && shift

if [[ "${source}" == "hmfapi" && "${environment}" == "prod" ]]; then
    api_url="http://api.prod-1/hmf/v1"
elif [[ "${source}" == "hmfapi" && "${environment}" == "pilot" ]]; then
    api_url="http://api.pilot-1/hmf/v1"
elif [[ "${source}" == "lama" && "${environment}" == "prod" ]]; then
    api_url="http://lama.prod-1/api"
elif [[ "${source}" == "lama" && "${environment}" == "pilot" ]]; then
    #api_url="http://lama.pilot-1/api"
    die "LAMA API has no pilot environment yet. Exiting."
else
    die "Unknown combination of source (${source}) environment (${environment}). Exiting."
fi

main () {
    [[ -n "${query}" ]] || print_usage
    request="${api_url}/${query}"

    # first try
    if ! api_curl "${request}" 2>/dev/null
    then
        # first try not ok: try again writing stderr to tmp file for later inspection
        tmp_err="/tmp/$(basename "$0")_fail_$(date '+%Y%m%d_%H%M%S').err"
        if ! api_curl "${request}" 2>"${tmp_err}"
        then
            # second try also not ok: append failing request to error log and quit
            err_msg=$(cat "${tmp_err}")
            info "API request that failed: ${request}" >>"${tmp_err}"
            die "GET query '${query}' failed on '${err_msg}' (see also ${tmp_err})"
        else
            # second try ok: remove error log and done
            rm "${tmp_err}"
            exit 0
        fi
    else
        # first try ok: done
        exit 0
    fi
}

api_curl () {
    local url=$1 && shift
    curl --fail --silent --show-error -H "Content-Type: application/json" -X GET "${url}"
}

main

#!/bin/bash

source message_functions

api_url() {
  environment=$1 && shift

  if [[ "${environment}" == "prod" ]]; then
      echo "http://api.prod-1/hmf/v1"
  elif [[ "${environment}" == "pilot" ]]; then
      echo "http://api.pilot-1/hmf/v1"
  else
      error "Environment should be either prod or pilot"
      exit 1
  fi
}

api_curl_post () {
    request=$1 && shift
    data=$1 && shift
    environment=$1 && shift

    api_url=$(api_url "${environment}")
    url="${api_url}/${request}"
    curl --silent --show-error \
          -H "Content-Type: application/json" \
          -H "Accept: application/json" \
          -X POST "${url}" \
          --data "${data}"
}

retrieve_wrapper_api() {
    url=$1 && shift
    environment=$1 && shift

    if [[ ${environment} == "pilot" ]]; then
        sample_object=$(hmf_api_get -t "${url}")
    else
        sample_object=$(hmf_api_get "${url}")
    fi
    size_object=$(echo ${sample_object} | jq '. | length')
    if [[ ${size_object} -eq 1 ]]; then
      echo ${sample_object} | jq .[]
    elif [[ ${size_object} -gt 1 ]]; then
      ## if more entries and all are equals we assume last one is the one which is shared
      echo ${sample_object} | jq .[-1]
    fi
}

extract_reporting_id() {
    sample_barcode=$1 && shift
    report_type=$1 && shift
    report_source=$1 && shift
    environment=$1 && shift

    sample_object=$(retrieve_wrapper_api "reports/created?barcode=${sample_barcode}&report_type=${report_type}&source=${report_source}" "${environment}")
    echo ${sample_object} | jq .id
}

extract_reporting_id_on_barcode() {
    sample_barcode=$1 && shift
    environment=$1 && shift

    sample_object=$(retrieve_wrapper_api "reports/created?barcode=${sample_barcode}" "${environment}")
    echo ${sample_object} | jq .id
}

extract_cohort_on_created_object() {
    sample_barcode=$1 && shift
        report_type=$1 && shift
        report_source=$1 && shift
        environment=$1 && shift

        sample_object=$(retrieve_wrapper_api "reports/created?barcode=${sample_barcode}&report_type=${report_type}&source=${report_source}" "${environment}")
        echo ${sample_object} | jq .cohort
}

extract_most_recent_reporting_id_on_barcode() {
    sample_barcode=$1 && shift

    reporting_json=$( for reporting_id in $( hmf_api_get reports/created?barcode=${sample_barcode} | jq .[].id ); do hmf_api_get reports/shared?report_created_id=${reporting_id} | jq .[] ; done )
    reporting_json=$( echo ${reporting_json} | jq -s '.' )
    echo ${reporting_json} | jq 'sort_by(.share_time)[-1].report_created_id'
}

extract_object_created_on_reporting_id() {
    id=$1 && shift
    environment=$1 && shift

    sample_object=$(retrieve_wrapper_api "reports/created?id=${id}" "${environment}")
    echo ${sample_object} | jq .
}

extract_object_created() {
    sample_barcode=$1 && shift
    report_type=$1 && shift
    report_source=$1 && shift
    environment=$1 && shift

    sample_object=$(retrieve_wrapper_api "reports/created?barcode=${sample_barcode}&report_type=${report_type}&source=${report_source}" "${environment}")
    echo ${sample_object} | jq .
}

extract_object_shared() {
    reporting_id=$1 && shift
    environment=$1 && shift

    sample_object=$(retrieve_wrapper_api "reports/shared?report_created_id=${reporting_id}" "${environment}")
    echo ${sample_object} | jq .
}
#!/bin/bash

source message_functions || exit 1
source locate_reporting_api || exit 1

api_json=$1 && shift
sample_name=$1 && shift

json_file=$( gsutil cat ${api_json})
has_reliable_purity=$( echo ${json_file} | jq .has_reliable_purity)
sample_barcode=$(echo ${json_file} | jq .barcode)

purity=$(echo ${json_file} | jq .purity)
report_type=$(echo ${json_file} | jq .report_type)
cohort=$(echo ${json_file} | jq .cohort)
has_reliable_quality=$(echo ${json_file} | jq .has_reliable_quality)

if [[ ${cohort} == '"CPCT"' || ${cohort} == '"CPCTpancreas"' || ${cohort} == '"CPCTBLINC"' || ${cohort} == '"DRUP"' ||  ${cohort} == '"DRUPstage3"'
||  ${cohort} == '"WIDE"' ||  ${cohort} == '"COREDB"' ||  ${cohort} == '"COREDB11"' ||  ${cohort} == '"ACTIN"' ||  ${cohort} == '"SHERPA"'  ||
${cohort} == '"GENAYA"' ||  ${cohort} == '"OPTIC"'  ||  ${cohort} == '"GLOW"' ]]; then
  if [[ ${report_type} == '"dna_analysis_report"'* ]]; then
    run_id=$( hmf_api_get "runs?sample_name=${sample_name}&bucket=diagnostic-pipeline-output-prod-1&ini=Somatic.ini" | jq '.[-1].id')
  else
    run_id=null
  fi
elif [[ ${cohort} == '"CORE"' || ${cohort} == '"CORELR02"' || ${cohort} == '"CORERI02"' || ${cohort} == '"CORELR11"' || ${cohort} == '"CORESC11"' ]]; then
  if [[ ${report_type} == '"dna_analysis_report"'* ]]; then
    run_id=$( hmf_api_get "runs?sample_name=${sample_name}&bucket=services-pipeline-output-prod-1&ini=Somatic.ini" | jq '.[-1].id')
  else
    run_id=$( hmf_api_get "runs?sample_name=${sample_name}&bucket=diagnostic-pipeline-output-prod-1&ini=ShallowSeq.ini" | jq '.[-1].id')
    fi
else
    warn "Cohort of sample isn't assigned"
fi

if [[ ${purity} == '"N/A"' ]]; then
  purity="N/A"
fi

## check report is manual or automatically generated
url_bucket_report_auto="gs://patient-reporter-prod-1/"
url_bucket_report_manual="gs://patient-reporter-manual-prod-1/"

## check whether report exists in manual/auto bucket
source_report="none"
if [[ $( gsutil ls ${url_bucket_report_auto} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
else
    info "Report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
    source_report="automatic"
fi

if [[ $( gsutil ls ${url_bucket_report_manual} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in manual bucket ${url_bucket_report_manual}"
else
    source_report="manual"
fi

if [[ ${source_report} == "none" ]]; then
  warn "No report exist for ${sample_name}"
  exit 1
fi

data=$(printf '{"%s": %s, "%s": %s, "%s": %s, "%s": "%s", "%s": "%s", "%s": "%s"'  "barcode" "${sample_barcode}" "report_type" "${report_type}" "cohort" "${cohort}" "source" "${source_report}" "sample_name" "${sample_name}" "create_time" "2022-10-03T14:51:36")
## check if it is a failed run
if [[ ${purity} != "N/A" ]];then
    purityQualityData=$(printf ',"%s": %s,"%s": %s, "%s": %s' "purity" "${purity}" "has_reliable_purity" "${has_reliable_purity}" "has_reliable_quality" "${has_reliable_quality}")
    data=$(echo ${data} ${purityQualityData})
fi

if [[ -z ${run_id} ]];then
  data=$(echo ${data} "}")
else
  run_id_format=$(printf ',"%s": %s}' "run_id" "${run_id}")
  data=$(echo ${data} ${run_id_format})
fi

### Execute patch reporting created endpoint
info "Adding entry to created API"
api_curl_post "reports/created" "${data}" "prod"
extract_object_created ${sample_barcode} ${report_type} ${source_report} "prod"
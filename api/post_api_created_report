#!/bin/bash

source message_functions || exit 1
source locate_reporting_api || exit 1

api_json=$1 && shift
sample_name=$1 && shift

run_id=$( api runs ${sample_name} sample_name | grep diagnostic-pipeline-output-prod-1 | awk '{print $NF}')
json_file=$( cat ${api_json})
has_reliable_purity=$( echo ${json_file} | jq .has_reliable_purity)
sample_barcode=$(echo ${json_file} | jq .barcode)

purity=$(echo ${json_file} | jq .purity)
report_type=$(echo ${json_file} | jq .report_type)
cohort=$(echo ${json_file} | jq .cohort)
has_reliable_quality=$(echo ${json_file} | jq .has_reliable_quality)

## check report is manual or automatically generated
url_bucket_report_auto="gs://patient-reporter-prod-1/"
url_bucket_report_manual="gs://patient-reporter-manual-prod-1/"

## check whether report exists in manual/auto bucket
source_report="none"
if [[ $( gsutil ls ${url_bucket_report_auto} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
else
    info "Report available for ${sample_name} in auto bucket ${url_bucket_report_auto}"
    source_report="automatic"
fi

if [[ $( gsutil ls ${url_bucket_report_manual} | grep "${sample_name}" | grep .pdf | wc -l ) == 0 ]]; then
    info "No report available for ${sample_name} in manual bucket ${url_bucket_report_manual}"
else
    source_report="manual"
fi

if [[ ${source_report} == "none" ]]; then
  warn "No report exist for ${sample_name}"
  exit 1
fi

data=$(printf '{"%s": %s, "%s": "%s", "%s": %s, "%s": %s, "%s": %s, "%s": %s, "%s": "%s", "%s": "%s", "%s": %s' "has_reliable_purity" "${has_reliable_purity}" "barcode" "${sample_barcode}" "purity" "${purity}" "report_type" "${report_type}" "cohort" "${cohort}" "has_reliable_quality" "${has_reliable_quality}" "source" "${source_report}" "sample_name" "${sample_name}", "run_id" "${run_id}")
## check if it is a failed run
if [[ -z ${run_id} ]];then
  data=$(echo ${data} "}")
else
  run_id_format=$(printf '"%s": %s}' "run_id" "${run_id}")
  data=$(echo ${data} ${run_id_format})
fi

### Execute patch reporting created endpoint
info "Adding entry to created API"
api_curl_post "reports/created" "${data}" "prod"
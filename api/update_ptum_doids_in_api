#!/usr/bin/env bash

source message_functions || exit 1

if [[ ! -z "${1}" || "${1}" == "-h" || "${1}" == "--help" ]]; then
    echo "-----"
    echo " Descr: Creates a job file with API patches for samples DIODs"
    echo " Usage: $(basename $0)"
    echo "-----"
    exit 1
fi

out_dir="/data/ops/recurrent/ptum_doid_update"
doid_file="/data/common/dbs/clinical_data/curated_primary_tumor.tsv"
field_idx='7'

yymmdd=$(date +'%y%m%d')
job_file="${out_dir}/${yymmdd}_update_doids_in_api.job"
log_file="${out_dir}/${yymmdd}_update_doids_in_api.log"

main () {
    # sanity checks
    doid_file_is_ok || exit 1
    [[ ! -f "${job_file}" ]] || die "File exists: ${job_file}"
    [[ ! -f "${log_file}" ]] || die "File exists: ${log_file}"

    samples_visited=0
    samples_to_update=0

    # action: visit each target sample in API and check for potential updates in doid file
    samples_json=$(query_api.pl -type samples -json -filter "type=tumor" -filter "name=^(CPCT|DRUP|WIDE|CORE)")

    while read line; do
        api_barcode=$(echo "${line}" | cut -f1)
        api_name=$(echo "${line}" | cut -f2)
        api_id=$(echo "${line}" | cut -f3)
        api_doids=$(sort_csv_string "$(echo "${line}" | cut -f4)")

        # API also contains some test samples that should be skipped
        if [[ "${api_name}" == "CPCT12345678T" || "${api_name}" == "CPCT11111111T" ]]; then
            continue
        fi

        patient=${api_name:0:12}
        count=$(grep -cP "^${patient}" "${doid_file}")
        sample_info="${api_barcode} (name:${api_name} id:${api_id})"
        samples_visited=$((samples_visited+1))

        if [[ "${count}" -eq 0 ]]; then
            warn "SKIPPING: patient ID missing in file (${doid_file}) for ${sample_info}"
        elif [[ "${count}" -gt 1 ]]; then
            warn "SKIPPING: multiple matches in doid file (${doid_file}) for ${sample_info}"
        elif [[ "${count}" -eq 1 ]]; then
            file_doids=$(get_doids "${patient}")
            file_doids=$(sort_csv_string "${file_doids}")
            if [[ "${file_doids}" == "" ]]; then
                warn "SKIPPING: no doids present in file (${doid_file}) for ${sample_info}"
            elif [[ "${file_doids}" == "${api_doids}" ]]; then
                info "SKIPPING: identical doids for ${sample_info}"
            else
                info "OK: doid update possible ('${api_doids}' to '${file_doids}') for ${sample_info}"
                echo "echo '[INFO] Updating ${sample_info}'" >> "${job_file}"
                # The -e allows execution without pressing a key
                echo "hmf_api_patch -e -c samples -o '${api_id}' -f primary_tumor_doids -v '${file_doids}'" >> "${job_file}"
                samples_to_update=$((samples_to_update+1))
            fi
        else
            die "Impossible state reached in if/else: check conditions!"
        fi
    done < <(echo "$samples_json" | jq -cr '.[] | [.barcode,.name,.id,(.primary_tumor_doids | join(","))] | @tsv')

    info "${samples_to_update} samples found to be updated of total ${samples_visited} visited"
    if [[ "${samples_to_update}" -gt 0 ]]; then
        echo "echo '[INFO] Finished with patching primary_tumor_doids'" >> "${job_file}"
        info "Making job file executable (${job_file})"
        chmod +x "${job_file}"
        info "TODO: Check ${job_file} and execute patches with:"
        info "  nohup ${job_file} > ${log_file} &"
    fi
}

sort_csv_string () {
    local string=$1 && shift
    echo "${string}" | sed -e $'s/,/\\\n/g' | sort -n | tr '\n' ',' | sed 's/.$//'
}

doid_file_is_ok () {
    local expected="doids"
    local name=""
    name=$(head -1 "${doid_file}" | cut -f"${field_idx}")
    if [[ "${name}" != "${expected}" ]]; then
        die "Input file ${doid_file} does not have correct header (expected:${expected} found:${name})"
    fi
}

get_doids () {
    local patient=$1 && shift
    doids=$(cat "${doid_file}" | grep -P ^${patient} | cut -f7 | sed 's/;/,/g')
    echo "${doids}"
}

main

#!/usr/bin/env bash

source message_functions || exit 1

classes='accounts|biopsies|entities|fastq|flowcells|groups|inis|platforms|runs|samples|sets|sequencers'

# allows autocomplete of script commands
complete -W "$(echo "${classes}" | tr "|" " ")" "$(basename "$0")"

print_usage(){
    script=$(basename "$0")
    echo "---"
    echo "Usage: $script [-j] <class> [<filter-value> <filter-key>]"
    echo "Examples:"
    echo " $script platforms"
    echo " $script -j platforms"
    echo " $script flowcells | tail"
    echo " $script flowcells NS21-0064"
    echo " $script samples CPCT02460007T"
    echo " $script samples FR17455547 barcode"
    echo " $script runs 210409_HMFregCORE_FR30729505_FR30729512_COREDB010110"
    echo " $script runs FR30729512 barcode"
    echo " $script fastq 37510 sample_id"
    echo " $script -j datasets 'CPCT02010325T?pipeline_type=rna' id"
    echo "Notes:"
    echo " - Default filter-key is 'name'"
    echo " - Add option -j to output raw json instead of parsed TSV table"
    echo " - Classes: ${classes}"
    echo "---"
    exit 1
}

output_json='FALSE'
while getopts ':j' flag; do
    case "${flag}" in
        j) output_json='TRUE' && shift ;;
        *) print_usage >&2
        exit 1 ;;
    esac
done

class=$1
filter_input=$2 # optional
filter_field=$3 # optional

if [[ -z "$class" || $1 == "-h" || $1 == "--help" ]]; then
    print_usage >&2
fi

# Sanity checks
[[ "${class}" =~ ${classes} ]] || die "Class '${class}' is not supported."

# Filter variable setup
if [[ -n "${filter_field}" ]]; then
    filter_field="${filter_field}"
elif [[ "${class}" == "runs" ]]; then
    filter_field="set_name"
else
    filter_field="name"
fi

# Retrieve API result
json_result=""
if [[ -n "${filter_input}" ]]; then
    if [[ "${filter_field}" == "id" ]]; then
        json_result=$(hmf_api_get "${class}/${filter_input}") || die "Unable to get result from API (selecting by id ${filter_input})"
        # In case one object is queried by id the result is not an array so wrap to allow downstream print
        json_result=$(jq '[.]' <<< "${json_result}")
    else
        json_result=$(hmf_api_get "${class}?${filter_field}=${filter_input}") || die "Unable to get result from API (with filter on field ${filter_field})"
    fi
else
    json_result=$(hmf_api_get "${class}") || die "Unable to get result from API (without filter)"
fi

# Print results
if [[ "${output_json}" == "TRUE" ]]; then
    jq <<< "${json_result}"
elif [[ "${class}" == "fastq" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name_r1 name_r2 q30 yld sample_id qc_pass bucket id
    jq -r '.[] | [.name_r1, .name_r2, .q30, .yld, .sample_id, .qc_pass, .bucket, .id] | @tsv' <<< "${json_result}" \
    | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.0f",$4/1e9) }1'
elif [[ "${class}" == "flowcells" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" flowcell_id name q30 yield undet_yield status qc id
    jq -r '.[] | [.flowcell_id, .name, .q30, .yld, .undet_rds, .status, .undet_rds_p_pass, .id] | @tsv' <<< "${json_result}" \
    | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.0f",$4/1e9); $5=sprintf("%.0f",$5/1e9) }1'
elif [[ "${class}" == "samples" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" submission barcode q30 yld_req yld status name type id
    jq -r '.[] | [.submission, .barcode, .q30, .yld_req, .yld, .status, .name, .type, .id] | @tsv' <<< "${json_result}" \
    | awk 'BEGIN{ FS=OFS="\t" }NR>0{ $3=sprintf("%.1f",$3); $4=sprintf("%.0f",$4/1e9); $5=sprintf("%.0f",$5/1e9) }1'
elif [[ "${class}" == "runs" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\t%s\t%s\n" name entity_id ini status version bucket id
    jq -r '.[] | [.set.name, .set.entity_id, .ini, .status, .version, .bucket, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "platforms" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\n" name max_undet min_q30 min_sample_yield id
    jq -r '.[] | [.name, .undetermined_reads_perc_cutoff, .q30_cutoff, .sample_yield_cutoff, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "sets" ]]; then
    printf "#%s\t%s\t%s\t%s\t%s\n" name entity_id ref_sample tumor_sample id
    jq -r '.[] | [.name, .entity_id, .ref_sample, .tumor_sample, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "entities" ]]; then
    printf "#%s\t%s\t%s\t%s\n" name bucket add_to_db id
    jq -r '.[] | [.name, .bucket, .add_to_db, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "inis" ]]; then
    printf "#%s\t%s\n" name id
    jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "sequencers" ]]; then
    printf "#%s\t%s\t%s\n" name platform_id id
    jq -r '.[] | [.name, .platform_id, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "biopsies" ]]; then
    printf "#%s\t%s\n" name id
    jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "accounts" ]]; then
    printf "#%s\t%s\n" email id
    jq -r '.[] | [.email, .id] | @tsv' <<< "${json_result}"
elif [[ "${class}" == "groups" ]]; then
    printf "#%s\t%s\n" name id
    jq -r '.[] | [.name, .id] | @tsv' <<< "${json_result}"
else
    die "Table print for class ${class} is not supported"
fi
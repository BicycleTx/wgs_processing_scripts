#!/usr/bin/env bash

source message_functions || exit 1

HOSTNAME=$(hostname)
PARSE_SCRIPT="check_bcl2fastq_conversion.pl"
ERRLOG_FILE="conversionError.txt"
SSHEET_FILE="SampleSheet.csv"
REPORT_ROOT="Fastq"

if [[ ! $1 || $1 == "-h" || $1 == "--help" ]]; then
    script=$(basename "$0")
    echo "-----"
    echo " Usage: $script <SeqRunDir> [<SeqRunDir2> <SeqRunDirN>]"
    echo "        $script /path/to/171117_ST-E00287_0115_AHCFL5CCXY"
    echo "        $script 171117_ST-E00287_0115_AHCFL5CCXY 171117_ST-E00287_0116_BHCCVKCCXY"
    echo "-----"
    exit 1
fi

seq_runs=("$@")
seq_dirs=()

function printHeader() {
    local field_title=$1 && shift
    echo -e "\n## ----------\n## ${field_title}:\n## ----------"
}

## make sure all are absolute paths
for seq_run in "${seq_runs[@]}"; do
    ## remove potential trailing slash
    seq_run=${seq_run%/}
    if [[ ${seq_run} =~ ^\/ ]]; then
        seq_dirs+=("${seq_run}")
    else
        seq_dirs+=("${PWD}/${seq_run}" )
    fi
done

## some checking before we start
cmds_to_execute=()
for seq_dir in "${seq_dirs[@]}"; do
    ssheet_path="${seq_dir}/${SSHEET_FILE}"
    errlog_path="${seq_dir}/${ERRLOG_FILE}"
    report_path="${seq_dir}/${REPORT_ROOT}"
    seqdir_name="$(basename "${seq_dir}" | tr -d '\r')"
    hmfrun_name="$(grep -P '^Experiment' "${ssheet_path}" | cut -d',' -f 2 | tr -d '\r')"
    nasrun_name="${hmfrun_name}__${seqdir_name}"
    
    ## If anything not ok: exit
    if [[ ! -d "${seq_dir}" ]]; then
        error "dir does not exist (${seq_dir})"
    elif [[ ! -f "${errlog_path}" ]]; then
        error "Errlog does not exist (${errlog_path})"
    elif [[ $(tail -1 "${errlog_path}" | grep -c "with 0 errors and") -eq 0 ]]; then
        error "Errlog does not say 0 errors (${errlog_path})"
    elif [[ -z "${hmfrun_name}" ]]; then
        error "Have not been able to parse hmfrun_name from sheet (${ssheet_path})"
    fi
    
    ## store further cmds so we can print all together at the end
    cmds_to_execute+=("rsync -ah ${report_path}/Reports nas:/volume1/web/qc/conversion/${nasrun_name}/")
    cmds_to_execute+=("rsync -ah ${report_path}/Stats/conversion_metrics_table.txt nas:/volume1/web/qc/conversion/${nasrun_name}/hmf_report.txt")
done

printHeader "SAMPLE info"
for seq_dir in "${seq_dirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir "${seq_dir}" | grep ^SAMPLE | while read -r line; do
        yld_seq=$(echo "${line}" | cut -f3)
        yld_seq=$((yld_seq/1000))
        q30_seq=$(echo "${line}" | cut -f4)
        submission=$(echo "${line}" | cut -f11)
        sample_id=$(echo "${line}" | cut -f9)
        sample_nm=$(echo "${line}" | cut -f10)
        api_samples_json=$(hmf_api_get "samples?barcode=${sample_id}")
        if [[ "${api_samples_json}" == "[]" ]]; then
            status_info="q=${q30_seq} y=${yld_seq} (no sample found in API by barcode!)"
        else
            sample=$(jq -cr '.[-1]' <<< "${api_samples_json}")
            sample_tsv=$(echo "${sample}" | jq -r '[.status,.yld,.yld_req] | @tsv')
            # Note: last cut shortens "Insufficient Quality" to "Insufficient"
            smp_status=$(echo "${sample_tsv}" | cut -f1 | cut -d" " -f1)
            yld=$(echo "${sample_tsv}" | cut -f2)
            req=$(echo "${sample_tsv}" | cut -f3)

            yld=$((yld/1000000000))
            if [[ $req -eq 1 ]]; then
              # A req of 1 base is used when there is no req, but 0 would cause the sample to incorrectly be 'Validated' before being sequenced
              req=0
            else
              # The requirement in GBase is rounded up to an integer
              req=$(((req+999999999)/1000000000))
            fi
            # Note: Samples-for-database have two runs (diagnostic and research). We can ignore the research one.
            # Note: Only specific inis: 2=CPCT.ini 4=SingleSample.ini 6=Somatic.ini 8=KG.ini 10=Fastq.ini 38=ShallowSeq.ini 51=Rna.ini
            api_run=$(
              hmf_api_get "runs?barcode=${sample_id}" | \
              jq '[.[] | select(.bucket//"NA"|test("research-pipeline")|not)]' | \
              jq '[.[] | select(.ini_id==2 or .ini_id==4 or .ini_id==6 or .ini_id==8 or .ini_id==10 or .ini_id==38 or .ini_id==51)]' | \
              jq -r '.[] | [.status,.ini,.set.name] | @tsv' | \
              tail -1
            )
            api_run_tsv=$(cut -f1,2 <<< "${api_run}")
            set_name=$(cut -f3 <<< "${api_run}")

            if [[ "${api_run_tsv}" == "" ]]; then
                status_info="q=${q30_seq} y=${yld_seq}+${yld}/${req} ${smp_status} (sample found in API but no run!)"
            else
                run_status=$(echo "${api_run_tsv}" | cut -f1)
                ini=$(echo "${api_run_tsv}" | cut -f2)
                ini=${ini/.ini/}
                status_info="q=${q30_seq} y=${yld_seq}+${yld}/${req} ${smp_status}|${run_status}|${ini}\t$set_name"
            fi
        fi
        echo -e "${submission}\t${sample_id}\t${sample_nm}\t${status_info}"
   done | sort -k1,1 -k3,3
done

printHeader "RUN info"
for seq_dir in "${seq_dirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir "${seq_dir}" -summary | grep -P "^## RunOverview" | sed 's#\#\#\ RunOverviewInfoLine\:\ ##g'
done | sort -r

if [[ ${HOSTNAME} != "datastore" ]]; then
    for seq_run in "${seq_runs[@]}"; do
        cmds_to_execute+=("archive_flowcell_to_datastore ${seq_run}")
    done
fi

printHeader "Extra actions"
for cmd in "${cmds_to_execute[@]}"; do
    echo "${cmd}"
done

echo ""

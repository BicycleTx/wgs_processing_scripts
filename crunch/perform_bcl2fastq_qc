#!/usr/bin/env bash

CURR_HOST=$(hostname)
PARSE_SCRIPT="check_bcl2fastq_conversion.pl"
ERRLOG_FILE="conversionError.txt"
SSHEET_FILE="SampleSheet.csv"
REPORT_ROOT="Data/Intensities/BaseCalls"

if [[ ! $1 || $1 == "-h" || $1 == "--help" ]]; then 
    echo "-----"
    echo " Usage: $(basename $0) <SeqRunDir> [<SeqRunDir2> <SeqRunDirN>]"
    echo "        $(basename $0) /path/to/171117_ST-E00287_0115_AHCFL5CCXY"
    echo "        $(basename $0) 171117_ST-E00287_0115_AHCFL5CCXY 171117_ST-E00287_0116_BHCCVKCCXY"
    echo "-----"
    exit 1
fi

seqRuns=("$@")
seqDirs=()

function printHeader() {
    local fieldTitle=$1 && shift
    echo -e "\n## ----------\n## ${fieldTitle}:\n## ----------"
}

## make sure all are absolute paths
for seqRun in "${seqRuns[@]}"; do
    ## remove trailing slash if present
    seqRun=$(echo ${seqRun%/})

    if [[ $seqRun =~ ^\/ ]]; then
        seqDirs+=(${seqRun})
    else
        seqDirs+=("$PWD/${seqRun}" )
    fi
    
done

## some checking before we start
cmdsToExecute=()
for seqDir in "${seqDirs[@]}"; do
    ssheet_path="${seqDir}/${SSHEET_FILE}"
    errlog_path="${seqDir}/${ERRLOG_FILE}"
    report_path="${seqDir}/${REPORT_ROOT}/{Reports,Stats}"
    seqdir_name="$( basename $seqDir | tr -d '\r' )"
    hmfrun_name="$( cat ${ssheet_path} | grep -P '^Experiment' | cut -d',' -f 2 | tr -d '\r' )"
    nasrun_name="${hmfrun_name}__${seqdir_name}"
    
    ## anything wrong with any seqrun: exit the whole thing
    if [[ ! -d ${seqDir} ]]; then
        echo "[ERROR] dir does not exist ($seqDir)" && exit 1; 
    elif [[ ! $( cat ${errlog_path} | tail -1 | grep "with 0 errors and" ) ]]; then 
        echo "[ERROR] Errlog does not say 0 errors (${errlog_path})" && exit 1; 
    elif [[ -z ${hmfrun_name} ]]; then
        echo "[ERROR] Have not been able to parse hmfrun_name from sheet ($ssheet_path)" && exit 1; 
    fi
    
    ## store further cmds so we can print all together at the end
    rsync_cmd="rsync -ah ${report_path} nas:/volume1/web/qc/conversion/${nasrun_name}/"
    cmdsToExecute+=("${rsync_cmd}")
done

## get QC
printHeader "RUN QC"
for seqDir in "${seqDirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir ${seqDir} -summary | grep -P "^## (Flowcell|FINAL QC)"
done

## get info for RunOverview
printHeader "RUN Info"
for seqDir in "${seqDirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir ${seqDir} -summary | grep -P "^## RunOverview" | sed 's#\#\#\ RunOverviewInfoLine\:\ ##g'
done | sort -r

## get info for SampleOverview
printHeader "Sample Info"
for seqDir in "${seqDirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir ${seqDir} -summary | grep -v "^#"
done | sort -k1,1 -k3,3

## get info for SampleOverview
printHeader "SampleOverview Table (CPCT02/DRUP01/WIDE01 R samples are removed)"
echo -e "Submission\tSampleID\tSampleName\tYieldGBase\tDescription"
for seqDir in "${seqDirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir ${seqDir} | grep ^SAMPLE | grep -Pv "(CPCT02|DRUP01|WIDE01|CORE.{2})\d{6}R" | while read line; do
        yldMBase=$( echo ${line} | cut -d" " -f3 )
        yld=$((yldMBase/1000))
        sub=$( echo ${line} | cut -d" " -f11 )
        sid=$( echo ${line} | cut -d" " -f9 )
        snm=$( echo ${line} | cut -d" " -f10 )
        dsc=$( echo ${line} | cut -d" " -f12 )
        echo -e "$sub\t$sid\t$snm\t$yld\t$dsc"
   done | sort -k1,1 -k3,3
done

## Print further actions
printHeader "Extra actions"
for cmd in "${cmdsToExecute[@]}"; do
    echo ${cmd}
done

## add flowcell rsync cmd
if [[ ${CURR_HOST} != "datastore" ]]; then
    printHeader "Get Rsync code for partial sync to datastore"
    rsync_cmd="rsync_seqruns_to_datastore ${seqDirs[@]}"
    echo ${rsync_cmd}
fi

echo ""

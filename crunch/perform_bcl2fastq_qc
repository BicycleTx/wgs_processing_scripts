#!/usr/bin/env bash

HOSTNAME=$(hostname)
PARSE_SCRIPT="check_bcl2fastq_conversion.pl"
ERRLOG_FILE="conversionError.txt"
SSHEET_FILE="SampleSheet.csv"
REPORT_ROOT="Fastq"
API_DIR="/data/ops/api/prod"
API_SAMP_JSON="${API_DIR}/database/samples.json"
API_RUNS_JSON="${API_DIR}/database/runs.json"
API_INIS_JSON="${API_DIR}/database/inis.json"
REGISTERED_DIR="${API_DIR}/jsons/registered"

if [[ ! $1 || $1 == "-h" || $1 == "--help" ]]; then 
    echo "-----"
    echo " Usage: $(basename $0) <SeqRunDir> [<SeqRunDir2> <SeqRunDirN>]"
    echo "        $(basename $0) /path/to/171117_ST-E00287_0115_AHCFL5CCXY"
    echo "        $(basename $0) 171117_ST-E00287_0115_AHCFL5CCXY 171117_ST-E00287_0116_BHCCVKCCXY"
    echo "-----"
    exit 1
fi

seq_runs=("$@")
seq_dirs=()

function printHeader() {
    local field_title=$1 && shift
    echo -e "\n## ----------\n## ${field_title}:\n## ----------"
}

## make sure all are absolute paths
for seq_run in "${seq_runs[@]}"; do
    ## remove trailing slash if present
    seq_run=$(echo ${seq_run%/})
    if [[ ${seq_run} =~ ^\/ ]]; then
        seq_dirs+=(${seq_run})
    else
        seq_dirs+=("${PWD}/${seq_run}" )
    fi
done

## some checking before we start
cmds_to_execute=()
for seq_dir in "${seq_dirs[@]}"; do
    ssheet_path="${seq_dir}/${SSHEET_FILE}"
    errlog_path="${seq_dir}/${ERRLOG_FILE}"
    report_path="${seq_dir}/${REPORT_ROOT}/{Reports,Stats}"
    seqdir_name="$(basename ${seq_dir} | tr -d '\r')"
    hmfrun_name="$(cat ${ssheet_path} | grep -P '^Experiment' | cut -d',' -f 2 | tr -d '\r')"
    nasrun_name="${hmfrun_name}__${seqdir_name}"
    
    ## anything wrong with any seqrun: exit the whole thing
    if [[ ! -d "${seq_dir}" ]]; then
        echo "[ERROR] dir does not exist (${seq_dir})" && exit 1; 
    elif [[ ! $(cat ${errlog_path} | tail -1 | grep "with 0 errors and") ]]; then 
        echo "[ERROR] Errlog does not say 0 errors (${errlog_path})" && exit 1; 
    elif [[ -z "${hmfrun_name}" ]]; then
        echo "[ERROR] Have not been able to parse hmfrun_name from sheet (${ssheet_path})" && exit 1; 
    fi
    
    ## store further cmds so we can print all together at the end
    rsync_cmd="rsync -ah ${report_path} nas:/volume1/web/qc/conversion/${nasrun_name}/"
    cmds_to_execute+=("${rsync_cmd}")
done

printHeader "RUN info"
for seq_dir in "${seq_dirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir "${seq_dir}" -summary | grep -P "^## RunOverview" | sed 's#\#\#\ RunOverviewInfoLine\:\ ##g'
done | sort -r

printHeader "SAMPLE info"
for seq_dir in "${seq_dirs[@]}"; do
    ${PARSE_SCRIPT} -run_dir "${seq_dir}" | grep ^SAMPLE | while read line; do
        yld_seq=$(echo ${line} | cut -d" " -f3)
        yld_seq=$((yld_seq/1000))
        q30_seq=$(echo ${line} | cut -d" " -f4)
        submission=$(echo ${line} | cut -d" " -f11)
        sample_id=$(echo ${line} | cut -d" " -f9)
        sample_nm=$(echo ${line} | cut -d" " -f10)
        status_info="y=${yld_seq} q=${q30_seq} (rerun at datastore to add API info)"
        if [[ "${HOSTNAME}" == "datastore" ]]; then 
            api_sample=$(cat "${API_SAMP_JSON}" | jq -r --arg barcode "${sample_id}" '.[] | select(.barcode == $barcode)')
            smp_status=$(echo "${api_sample}" | jq -r ".status" | cut -d" " -f1)
            yld=$(echo "${api_sample}" | jq -r ".yld")
            req=$(echo "${api_sample}" | jq -r ".yld_req")
            yld=$((yld/1000000000))
            req=$((req/1000000000))
            set_name=$(find ${REGISTERED_DIR} -name "*_${sample_id}_*.json" -exec basename {} \; | sort | tail -1 | sed 's#.json##')
            api_run=$(cat "${API_RUNS_JSON}" | jq -r --arg set_name "${set_name}" '.[] | select(.set.name == $set_name)')
            run_status=$(echo "${api_run}" | jq -r ".status")
            ini_id=$(echo "${api_run}" | jq -r ".ini_id")
            ini=$(cat $API_INIS_JSON | jq -r --arg ini_id "${ini_id}" '.[] | select(.id == ($ini_id|tonumber)) | .name' | sed 's/\.ini//')
            status_info="q=${q30_seq} y=${yld_seq}+${yld}/${req} ${smp_status}|${run_status}|${ini}\t$set_name"
        fi
        echo -e "${submission}\t${sample_id}\t${sample_nm}\t${status_info}"
   done | sort -k1,1 -k3,3
done

printHeader "Extra actions"
for cmd in "${cmds_to_execute[@]}"; do
    echo ${cmd}
done

if [[ ${HOSTNAME} != "datastore" ]]; then
    rsync_cmd=$(rsync_seqruns_to_datastore ${seq_dirs[@]} | grep -v 'INFO')
    echo ${rsync_cmd}
fi

echo ""

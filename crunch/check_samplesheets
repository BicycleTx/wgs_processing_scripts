#!/usr/bin/env bash

run=$1
run_root="/data1/illumina_data/"

function join_by { local IFS="$1"; shift; echo "$*"; }

if [[ ! ${run} == "" ]]; then
    sheets="${run}/SampleSheet.csv"
else
    sheets=$(find ${run_root} -mindepth 2 -maxdepth 2 -name "SampleSheet.csv" | sort | tr "\n" " ")
fi
    
for sheet in ${sheets}; do
    curr_host=$(hostname)
    curr_host_short=$(echo ${curr_host} | sed 's/crunch00/c/g')
    run_base=$(dirname ${sheet})
    fastq_out_dir=${run_base}"/Fastq"
    run_name=$(basename ${run_base})
    run_status="Sequencing"
    readme_file=${run_base}"/README"
    conversion_log_file=${run_base}"/conversionLog.txt"
    sample_sheet_file=${run_base}"/SampleSheet.csv"
    experiment_name=$(cat ${sheet} | grep "ExperimentName" | cut -d',' --output-delimiter ": " -f 2)
    idx_id=$(cat ${sheet} | grep Sample_ID | tr "," "\n" | grep -n Sample_ID | cut -d":" -f1)
    idx_name=$(cat ${sheet} | grep Sample_ID | tr "," "\n" | grep -n Sample_Name | cut -d":" -f1)
    idx_proj=$(cat ${sheet} | grep Sample_ID | tr "," "\n" | grep -n Project | cut -d":" -f1)
    all_projects=$(join_by "," $(cat ${sheet} | sed -e '1,/Sample_ID/d' | grep -vP "^[\,\s]+$" | cut -d"," -f ${idx_proj} | sort | uniq | tr "\n" " "))

    ## parse RunInfo file
    run_info_file=${run_base}"/RunInfo.xml"
    expected_cycle_count="NA"
    if [[ -f "${run_info_file}" ]]; then
        expected_cycle_count=$(cat ${run_info_file} | xml2json | jq -r '.RunInfo.Run.Reads.Read[].NumCycles' | jq -s add)
    fi

    echo ""
    echo "# "${curr_host};
    echo "# [Rund] "${run_base};
    echo "# [Samp] "${sample_sheet_file};
    
    ## check cycle status
    if [[ ${experiment_name} =~ ^NS ]]; then 
        ## Nextseq runs do not have the same cycle logs as Hiseq and Novaseq
        if [[ -d "${run_base}/Data/Intensities/BaseCalls/L001/" ]]; then
            cycle_count=$(ls ${run_base}/Data/Intensities/BaseCalls/L001/*.bgzf | wc -l)
        else
            cycle_count=0
        fi
    else
        ## every platform does things slightly different so need some nasty grepping
        cycle_count=$(ls "${run_base}/Logs/" | grep -Po "(Cycle[\W\_]{1})|(Cycle\d+)" | grep -v "Cycle0" | sort | uniq | wc -l)
    fi
    echo "# [NOTE] CYCLE log count: ${cycle_count} (expected:${expected_cycle_count})"
    if [[ "${expected_cycle_count}" =~ ^[0-9]+$ && "${cycle_count}" -ge "${expected_cycle_count}" ]]; then
        run_status="ReadyForConversion"
    else
        run_status="Sequencing (${cycle_count} of ${expected_cycle_count})"
    fi

    ## check conversion status
    if [[ ! -e "${conversion_log_file}" ]]; then
        echo "# [NOTE] CONVERSION not started yet";
    elif [[ "$(tail -1 ${conversion_log_file})" =~ "Finished" ]]; then
        echo "# [NOTE] CONVERSION appears to be FINISHED";
        run_status="Converted"
    else
        curr_lane=$(find "${fastq_out_dir}" -name "*fastq.gz" | grep -Po "_L\d{3}" | sort | uniq | tail -1 | sed 's/_//')
        echo "# [NOTE] CONVERSION appears to be RUNNING (${curr_lane})";
        run_status="Converting (${curr_lane})"
    fi

    ## check images presence
    if [[ -d "${run_base}/Thumbnail_Images/L001" ]]; then
        echo "# [NOTE] IMAGES are still present";
    fi

    ## print readme file path if present
    if [[ -e "${readme_file}" ]]; then
        echo "# [README] ${readme_file}";
    fi

    ## print status
    echo "# [Stat] ${run_status}";

    all_projects_noHMFreg=$(echo "${all_projects}" | sed 's/HMFreg//g')

    ## print line that can be pasted directly into RunOverview sheet
    echo -e "# ${experiment_name}\t${run_name}\t${all_projects_noHMFreg}\t${curr_host_short}\tHMF=${run_status}";

    ## print sample-id, sample_name, submission-id, description
    cat ${sheet} | \
        sed -e '1,/Sample_ID/d' | \
        grep -vP "^[\,\s]+$" | \
        cut -d',' --output-delimiter " " -f"${idx_id},${idx_name},${idx_proj}" | \
        sort -k2,2 -k1,1 | \
        uniq
done

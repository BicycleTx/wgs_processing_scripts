#!/bin/bash

scriptName=$( basename $0 )
runPaths=( "$@" )
na="na"

if [[ ${#runPaths[@]} -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
  echo "---"
  echo " Usage: $scriptName <RunPath1> [<RunPath2> <RunPathN>]"
  echo "---"
  exit 1
fi

echo -e "#SetName\tTumSample\tPipeline\tPurple\tQC\tPurity\tStatus\
\tRefCov\tTumCov\tRefReads\tTumReads\tRefMapPerc\
\tTumMapPerc\tRefExcl\tTumExcl\tRefDup\tTumDup"

for runPath in "${runPaths[@]}"; do 

  ## init
  pipVsn=$na; setName=$na; refSample=$na; tumsample=$na
  refCov=$na; refRds=$na; refMap=$na; refExc=$na; refDup=$na
  tumCov=$na; tumRds=$na; tumMap=$na; tumExc=$na; tumDup=$na
  purity=$na; status=$na; qcStat=$na; purVsn=$na

  ## retrieve metadata
  setName=$( basename "${runPath}")
  metaFile="${runPath}/metadata"
  if [[ ! -f $metaFile ]]; then echo "[EXIT] File does not exist ($metaFile)" && exit 1; fi
  refSample=$( cat ${metaFile} | jq -r '.ref_sample' )
  tumSample=$( cat ${metaFile} | jq -r '.tumor_sample' )

  ## SingleSample or Somatic
  if [[ ${tumSample} == "null" ]]; then mode="single"; tumSample=$na; else mode="somatic"; fi

  ## main paths, files and settings
  purpleDir="${runPath}/purple/"
  pqcFile="${purpleDir}/${tumSample}.purple.qc"
  ppuFile="${purpleDir}/${tumSample}.purple.purity"
  vsnFile="${purpleDir}/purple.version"
  wgsFile="${runPath}/QCStats/WGSMetrics_summary.transposed.txt"
  chkFile="${runPath}/logs/PipelineCheck.log"
  if [[ ! -d $purpleDir ]]; then echo "[EXIT] Dir does not exist ($purpleDir)" && exit 1; fi
  if [[ ! -f $wgsFile ]]; then echo "[EXIT] File does not exist ($wgsFile)" && exit 1; fi

  ## gahter general info
  pipVsn=$( cat $chkFile | grep "Pipeline version" | cut -d":" -f2 | grep -Po "[\d\.]+" )

  if [[ $mode == "somatic" ]]; then
    ## gather WgsMetrics for TUM
    tumIdx=$( cat $wgsFile | sed -n "1 s/${tumSample}.*//p"| sed 's/[^\t*]//g' | wc -c )
    tumRds=$( cat $wgsFile | grep "Total number of reads" | cut -f${tumIdx} ) 
    tumMap=$( cat $wgsFile | grep "Percentage reads mapped" | cut -f${tumIdx} )
    tumCov=$( cat $wgsFile | grep "MEAN_COVERAGE" | cut -f${tumIdx} )
    tumExc=$( cat $wgsFile | grep "PCT_EXC_TOTAL" | cut -f${tumIdx} )
    tumDup=$( cat $wgsFile | grep "PCT_EXC_DUP" | cut -f${tumIdx} )
    
    ## gather Purple info
    if [[ ! -f $pqcFile ]]; then echo "[EXIT] File does not exist ($pqcFile)" && exit 1; fi
    if [[ ! -f $ppuFile ]]; then echo "[EXIT] File does not exist ($ppuFile)" && exit 1; fi
    if [[ ! -f $vsnFile ]]; then echo "[EXIT] File does not exist ($vsnFile)" && exit 1; fi
    purity=$( cat $ppuFile | tail -1 | cut -f1 )
    status=$( cat $ppuFile | tail -1 | cut -f7 )
    qcStat=$( cat $pqcFile | grep QCStatus | cut -f2 )
    purVsn=$( cat $vsnFile | grep version | cut -d"=" -f2 )
  fi

  ## get ref and tum WgsMetrics column index
  if [[ ! -f $wgsFile ]]; then echo "[EXIT] File does not exist ($wgsFile)" && exit 1; fi
  refColIdx=$( cat $wgsFile | sed -n "1 s/${refSample}.*//p"| sed 's/[^\t*]//g' | wc -c )

  ## gather WgsMetrics for REF
  colIdx=${refColIdx}
  refRds=$( cat $wgsFile | grep "Total number of reads" | cut -f${refColIdx} ) 
  refMap=$( cat $wgsFile | grep "Percentage reads mapped" | cut -f${refColIdx} )
  refCov=$( cat $wgsFile | grep "MEAN_COVERAGE" | cut -f${colIdx} )
  refExc=$( cat $wgsFile | grep "PCT_EXC_TOTAL" | cut -f${colIdx} )
  refDup=$( cat $wgsFile | grep "PCT_EXC_DUP" | cut -f${colIdx} )
  
  ## output to screen
  printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
    ${setName} ${tumSample} ${pipVsn} ${purVsn} \
    ${qcStat} ${purity} ${status} ${refCov} ${tumCov} \
    ${refRds} ${tumRds} ${refMap} ${tumMap} \
    ${refExc} ${tumExc} ${refDup} ${tumDup}

done

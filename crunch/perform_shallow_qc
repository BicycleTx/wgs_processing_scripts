#!/usr/bin/env bash

runPaths=("$@")

if [[ ${#runPaths[@]} -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo "---"
    echo " Usage: $(basename $0) <RunPath1> [<RunPath2> <RunPathN>]"
    echo "---"
    exit 1
fi

na="na"

echo -e "#SetName\tTumSample\tPurpleQC\tPurity\tStatus\tAmberQC\tPipelineVsn\tPurpleVsn\
\tRefCov\tTumCov\tRefReads\tTumReads\tRefMapPerc\
\tTumMapPerc\tRefExcl\tTumExcl\tRefDup\tTumDup"

for runDir in "${runPaths[@]}"; do
  ## init variables
  pipVsn=$na; setName=$na; refSample=$na
  refCov=$na; refRds=$na; refMap=$na; refExc=$na; refDup=$na
  tumCov=$na; tumRds=$na; tumMap=$na; tumExc=$na; tumDup=$na
  purity=$na; status=$na; qcStat=$na; ambQC=$na; purVsn=$na
  
  setName=$( basename "${runDir}")
  isPv5=$(find $runDir -maxdepth 1 -name "pipeline.version")
  
  ## get metadata for constructing file paths
  metaFile=""
  if [[ "${isPv5}" ]]; then
    metaFile="${runDir}/metadata.json"
    pipFile="${runDir}/pipeline.version"
    refSample=$(cat ${metaFile} | jq -r '.reference.sampleName')
    tumSample=$(cat ${metaFile} | jq -r '.tumor.sampleName')
    pipVsn=$(cat ${pipFile})
  else
    chkFile="${runDir}/logs/PipelineCheck.log"
    pipVsn=$(cat $chkFile | grep "Pipeline version" | cut -d":" -f2 | grep -Po "[\d\.]+")
    metaFile="${runDir}/metadata"
    refSample=$(cat ${metaFile} | jq -r '.ref_sample')
    tumSample=$(cat ${metaFile} | jq -r '.tumor_sample')
  fi
  
  ## init rest of paths and files
  ambDir="${runDir}/amber/"
  purDir="${runDir}/purple/"
  refDir="${runDir}/${refSample}"
  tumDir="${runDir}/${tumSample}"

  wgsFileR="${runDir}/QCStats/${refSample}_dedup/${refSample}_dedup_WGSMetrics.txt"
  wgsFileT="${runDir}/QCStats/${tumSample}_dedup/${tumSample}_dedup_WGSMetrics.txt"
  flgFileR="${refDir}/mapping/${refSample}_dedup.flagstat"
  flgFileT="${tumDir}/mapping/${tumSample}_dedup.flagstat"
   aqcFile="${ambDir}/${tumSample}.amber.qc"
   vsnFile="${purDir}/purple.version"
   pqcFile="${purDir}/${tumSample}.purple.qc"
   ppuFile="${purDir}/${tumSample}.purple.purity"

  ## adjust paths if Pv5
  if [[ "$isPv5" ]]; then 
     ppuFile="${ppuFile}.tsv"
    wgsFileR="${refDir}/bam_metrics/${refSample}.wgsmetrics"
    wgsFileT="${tumDir}/bam_metrics/${tumSample}.wgsmetrics"
    flgFileR="${refDir}/flagstat/${refSample}.flagstat"
    flgFileT="${tumDir}/flagstat/${tumSample}.flagstat"
  fi

  ## all paths/files are set so check that all is ok
  allFilesOk="yes"
  for requiredFile in "$aqcFile" "$pqcFile" "$ppuFile" "$vsnFile" "$wgsFileR"; do
    if [[ -z "$requiredFile" ]]; then 
      echo "[WARN] One of the required file variables is empty!!"
      allFilesOk="no"
    elif [[ ! -f $requiredFile ]]; then 
      echo "[WARN] File does not exist ($requiredFile)"
      allFilesOk="no"
    fi
  done
  if [[ ! $allFilesOk == "yes" ]]; then echo "[ERROR] Something wrong with required files" && exit 1; fi

  ## gather WgsMetrics
    head=$( cat $wgsFileR | grep GENOME_T )
  refVal=$( cat $wgsFileR | grep -A1 GENOME_T | tail -1 )
  tumVal=$( cat $wgsFileT | grep -A1 GENOME_T | tail -1 )
  refJsn=$( perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${refVal}\"); %m = (); @m{@h} = @v; print encode_json \%m;" )
  tumJsn=$( perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${tumVal}\"); %m = (); @m{@h} = @v; print encode_json \%m;" )
  
  refCov=$( echo "${refJsn}" | jq -r '.MEAN_COVERAGE' )
  refExc=$( echo "${refJsn}" | jq -r '.PCT_EXC_TOTAL' )
  refDup=$( echo "${refJsn}" | jq -r '.PCT_EXC_DUPE' )
  tumCov=$( echo "${tumJsn}" | jq -r '.MEAN_COVERAGE' )
  tumExc=$( echo "${tumJsn}" | jq -r '.PCT_EXC_TOTAL' )
  tumDup=$( echo "${tumJsn}" | jq -r '.PCT_EXC_DUPE' )
  
  ## gather Flagstat info
  refRds=$( cat $flgFileR | grep 'total ('  | cut -d ' ' -f1 )
  tumRds=$( cat $flgFileT | grep 'total ('  | cut -d ' ' -f1 )
  refMap=$( cat $flgFileR | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1 )
  tumMap=$( cat $flgFileT | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1 )
 
  ## gather Amber info
  ambQC=$( cat $aqcFile | grep QCStatus | cut -f2 )
  
  ## gather Purple info
  purVsn=$( cat $vsnFile | grep version | cut -d"=" -f2 )
  purity=$( cat $ppuFile | tail -1 | cut -f1 )
  status=$( cat $ppuFile | tail -1 | cut -f7 )
  qcStat=$( cat $pqcFile | grep QCStatus | cut -f2 )
  
  ## output
  printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
    ${setName} ${tumSample} ${qcStat} ${purity} \
    ${status} ${ambQC} ${pipVsn} ${purVsn} ${refCov} ${tumCov} \
    ${refRds} ${tumRds} ${refMap} ${tumMap} \
    ${refExc} ${tumExc} ${refDup} ${tumDup}

done

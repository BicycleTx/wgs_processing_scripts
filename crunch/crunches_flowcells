#!/usr/bin/env bash

source message_functions || exit 1

command -v hmf_api_get > /dev/null || die "Dependency not found [hmf_api_get]"

[[ "$(hostname)" =~ ^crunch|sts ]] && die "Not supposed to check SampleSheets from crunch/sts directly"

main () {
    declare -a all_stdout
    for server in crunch1.prod-1 crunch2.prod-1 sts1.prod-1 sts2.prod-1; do
        if [[ "${server}" =~ ^sts ]]; then
            info "Checking flowcells on ${server} [/data/flowcells]"
            mapfile -t stdout < <(process_server "$server" "/data/flowcells")
            all_stdout=( "${all_stdout[@]}" "${stdout[@]}" )
        elif [[ "${server}" =~ ^crunch ]]; then
            info "Checking flowcells on ${server} [/data1/illumina_data]"
            mapfile -t stdout < <(process_server "$server" "/data1/illumina_data")
            all_stdout=( "${all_stdout[@]}" "${stdout[@]}" )
        else
            warn "Cannot process server ${server} because of unknown type!"
        fi
    done
    # sort but do not print first column (YYMMDD)
    info "Printing sorted output:"
    printf '%s\n' "${all_stdout[@]}" | sort -r -k1 -k2 | cut -f2-
}

function process_server () {
    local server=$1 && shift
    local flowcells_dir=$1 && shift
    local sheets=()
    while IFS=  read -r -d $'\0'; do
        sheets+=("$REPLY")
    done < <(ssh "${server}" find "${flowcells_dir}" -mindepth 2 -maxdepth 2 -name "SampleSheet.csv" -print0)
    for sheet in "${sheets[@]}"; do
        process_flowcell "$server" "$sheet"
    done
}

function process_flowcell () {
    local server=$1 && shift
    local sheet=$1 && shift
    server_short="${server}"
    server_short="${server_short/crunch00/c}"
    server_short="${server_short/crunch/c}"
    server_short="${server_short/\.prod-1/}"

    # shellcheck disable=SC2029
    sheet_content=$(ssh "$server" cat "$sheet")
    sheet_header=$(sed -n '/Sample_ID/q;p' <<< "$sheet_content")
    sheet_samples=$(sed -n '/Sample_ID/,$p' <<< "$sheet_content" | awk '$0 ~ /[a-zA-Z0-9]+/')

    run_base=$(dirname "${sheet}")
    run_name=$(basename "${run_base}")
    run_status="Sequencing"
    exp_name=$(grep "ExperimentName" <<< "${sheet_header}" | cut -d',' -f 2)

    # Parse RunInfo file
    run_info_file="${run_base}/RunInfo.xml"
    # shellcheck disable=SC2029
    run_info_file_content=$(ssh "$server" cat "$run_info_file")

    expected_cycle_count="NA"
    if [[ "${run_info_file_content}" != "" ]]; then
        expected_cycle_count=$(xmllint --xpath 'sum(//RunInfo/Run/Reads/Read/@NumCycles)' <(echo "${run_info_file_content}"))
    fi

    # Check cycle status
    if [[ "${exp_name}" =~ ^NS ]]; then
        # Nextseq runs do not have the same cycle logs as Hiseq and Novaseq
        lane1_dir="${run_base}/Data/Intensities/BaseCalls/L001/"
        if [[ $(ssh "$server" ls -d "${lane1_dir}" 2> /dev/null) ]]; then
            cycle_count=$(ssh "$server" find "${lane1_dir}" -maxdepth 1 -name "*.bgzf" | wc -l | tr -d " ")
        else
            cycle_count=0
        fi
    else
        # Every platform does things slightly different so need some nasty grepping
        grep='(Cycle[\W\_]{1})|(Cycle[[:digit:]]+)'
        cycle_count=$(ssh "$server" find "${run_base}/Logs/" -maxdepth 1 -type f | grep -Eo "${grep}" | grep -v "Cycle0" | sort | uniq | wc -l | tr -d " ")
    fi

    if [[ "${expected_cycle_count}" =~ ^[0-9]+$ && "${cycle_count}" -eq "${expected_cycle_count}" ]]; then
        run_status="Sequenced(${cycle_count}/${expected_cycle_count})"
    else
        run_status="Sequencing(${cycle_count}/${expected_cycle_count})"
    fi

    project_column_index=$(grep Sample_ID <<< "${sheet_samples}" | tr "," "\n" | grep -n Project | cut -d":" -f1)
    projects=$(echo "$sheet_samples" | grep -v Sample_ID | cut -d, -f"${project_column_index}" | sort | uniq | tr '\n' ',' | sed 's/,$//')
    projects="${projects//HMFreg/}"

    # Print line that can be pasted directly into RunOverview sheet
    query="flowcells?name=${exp_name}"
    response=$(hmf_api_get "${query}")
    gcp_info="GCP=Unknown"
    if [[ $(echo "${response}" | jq length) -eq 1 ]]; then
        gcp_status=$(echo "${response}" | jq -r '.[-1].status')
        gcp_qc=$(echo "${response}" | jq -r '.[-1].undet_rds_p_pass')
        gcp_info="${gcp_status}(qc=${gcp_qc})"
    fi

    run_date=$(echo "${run_name}" | cut -d"_" -f1)
    printf "%s\t%s\t%s\t%s\t%s\t%s\n" "$run_date" "$exp_name" "$run_name" "$projects" "$server_short" "HMF=${run_status},GCP=${gcp_info}"
}

function retrieve_gcp_flowcell_info () {
    local flowcell_name=$1 && shift
    response=$(hmf_api_get "flowcells?name=${flowcell_name}")
    if [[ $(echo "${response}" | jq length) -eq 1 ]]; then
        gcp_status=$(echo "${response}" | jq -r '.[-1].status')
        gcp_qc=$(echo "${response}" | jq -r '.[-1].undet_rds_p_pass')
        echo "${gcp_status}(qc=${gcp_qc})"
    else
        echo "Unknown"
    fi
}

function join_by { local IFS="$1"; shift; echo "$*"; }

main
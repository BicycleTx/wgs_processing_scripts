#!/usr/bin/env bash

max_find_depth=1

dir_path=${PWD} # directory that contains fastq files
old_name='' # string of current sample name
new_name='' # string of new sample name
do_rename_files=''
do_symlink_files=''
command_line=$(basename ${0})" $@"

if [[ $# -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo "---"
    echo " Description: Renames (or symlinks to) fastq files."
    echo "              Searches for <oldname>_*fastq.gz"
    echo " Usage:"
    echo "   $(basename ${0}) -o <oldname> -n <newname>"
    echo "   $(basename ${0}) -o CPCT12345678R -n DRUP12345678R"
    echo ""
    echo " Options:"
    echo "   -r      Perform actual renaming"
    echo "   -s      Symlink instead of rename"
    echo "   -d <s>  Directory with fastq files [${dir_path}]"
    echo "   -f <i>  Max depth for find to search [${max_find_depth}]"
    echo "---"
    exit 1
fi

while getopts ":o:n:d:rsf:" opt; do
  case ${opt} in
    o)
      old_name=${OPTARG}
      ;;
    n)
      new_name=${OPTARG}
      ;;
    d)
      dir_path=${OPTARG}
      ;;
    r)
      do_rename_files='true'
      ;;
    s)
      do_symlink_files='true'
      ;;
    f)
      max_find_depth=${OPTARG}
      ;;
    \?)
      echo "Invalid option: -${OPTARG}" >&2
      exit 1
      ;;
    :)
      echo "Option -${OPTARG} requires an argument." >&2
      exit 1
      ;;
  esac
done

## store rest of params as files to rename
files_to_rename=()
while IFS=  read -r -d $'\0'; do
    files_to_rename+=("${REPLY}")
done < <(find "${dir_path}" -maxdepth ${max_find_depth} -name "${old_name}*.fastq.gz" -print0)

## sanity checks
if [[ ${#files_to_rename[@]} -lt 1 ]]; then echo "[ERROR] No fastq files found (with find-depth ${max_find_depth})" && exit 1; fi
if [[ -z "${old_name}" ]]; then echo "[ERROR] Param old_name (-o) not set" && exit 1; fi
if [[ -z "${new_name}" ]]; then echo "[ERROR] Param new_name (-n) not set" && exit 1; fi
if [[ -z "${dir_path}" ]]; then echo "[ERROR] Param dir_path (-d) not set" && exit 1; fi
if [[ ! -d "${dir_path}" ]]; then echo "[ERROR] dir_path (${dir_path}) does not exist?" && exit 1; fi

## print info
echo "[INFO] Setting FastqDirectory: ${dir_path}"
echo "[INFO] Setting OldName: \"${old_name}\""
echo "[INFO] Setting NewName: \"${new_name}\""

## renaming action
for old_file in "${files_to_rename[@]}"; do
    file_dir=$(dirname ${old_file})
    old_base=$(basename ${old_file})
    new_base=$(echo ${old_base} | sed "s/${old_name}/${new_name}/")
    new_file="${file_dir}/${new_base}" 

    if [[ ${do_symlink_files} ]]; then
        echo "[INFO] Symlinking ${old_base} to ${new_base} )"
        ln -s ${old_file} ${new_base}
    elif [[ ${do_rename_files} ]]; then
        echo "[INFO] Renaming ${old_base} to ${new_base} in ${file_dir}"
        mv ${old_file} ${new_file} 
    else
        echo "[INFO] Would rename ${old_base} to ${new_base} in ${file_dir}"
    fi
done

if [[ ! ${do_rename_files} ]]; then
    log_file_path="${dir_path}/fastqrename.log"
    echo "[INFO] Option -r not set so only printed the potential rename actions"
    echo "[INFO] Cmd to rename: ${command_line} -r > ${log_file_path}"
    if [[ -f "${log_file_path}" ]]; then echo "[WARN] Logfile (${log_file_path}) already exists!"; fi
fi


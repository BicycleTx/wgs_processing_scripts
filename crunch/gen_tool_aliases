#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

function main() {
    local tool_dir=${1:-/data/tools}
    if [[ "$tool_dir" == "-f" ]]; then
           local force=true
           shift
           tool_dir=${1:-/data/tools}
    fi
    local alias_file=${2:-~/tool_aliases}

    if [[ ! -d "${tool_dir}" ]]; then
        echo "ERROR: ${tool_dir} is not a directory"
        exit 1
    fi

    local temp_file="${alias_file}.tmp"
    while IFS= read -r -d '' tool_bin; do
        local tool_name
        tool_name=$(basename "${tool_bin}")
        if [[ ${tool_name} == "configure" ]]; then
            echo "INFO: ignoring ${tool_bin}"
        else
            echo "alias ${tool_name}='${tool_bin}'" >> "${temp_file}"
        fi
    done < <(find "${tool_dir}" -maxdepth 3 -type f -executable -printf '%T@\t%p\0' | sort -zk 1nr | awk 'BEGIN { RS = "\0"; ORS = "\0" } { print $2 }')

    if [[ -s "${temp_file}" ]]; then
        local dups
        dups=$(cut -d= -f1 "${temp_file}" | sort | uniq -d)
        if [[ -z "${force:-}" && -n "${dups}" ]]; then
            echo "WARN: duplicate tools found (not replacing ${alias_file}):"
            echo
            echo "$dups"
            echo
            echo "INFO: supply -f as first argument to force most recently modified file to be used"
        else
            mv "${temp_file}" "${alias_file}"
        fi
        rm -f "${temp_file}"
    else
        echo "WARN: no tools found"
    fi
}

main "$@"

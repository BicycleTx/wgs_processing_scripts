#!/usr/bin/env bash

source message_functions || exit 1

REF_TARGET_YIELD=100
TUM_TARGET_YIELD=300
BASES_PER_READ=150
BASES_PER_GBASE=1000000000

run_paths=("$@")

if [[ ${#run_paths[@]} -eq 0 || $1 == "-h" || $1 == "--help" ]]; then
    echo "---"
    echo " Usage: $(basename $0) <RunPath1> [<RunPath2> <RunPathN>]"
    echo "---"
    exit 1
fi

get_add_yield() {
    local target_yield=$1 && shift
    local reads=$1 && shift
    local exc=$1 && shift

    if [[ -z ${exc} ]]; then
        die "Not enough arguments for ${FUNCNAME[0]}: ${target_yield}, ${reads}, ${exc}"
    fi

    if [[ ${exc:0:2} != "0." ]]; then
        die "Calculation only works if exc is between 0 and 1: exc=${exc}"
    fi

    # Calculation of current yield is ((1-exc) * reads * BASES_PER_READ / BASES_PER_GBASE)
    # However, bash doesn't do floating point math and exc is a fraction.
    # Since exc is between 0 and 1 we can avoid the floating point math as follows:
    exc_decimals="${exc#*.}"
    exc_decimals_length="${#exc_decimals}"
    exc_decimals_factor=$(( 10**exc_decimals_length ))
    # We know that exc == exc_decimals/exc_decimals_factor.
    # This implies that 1-exc == (exc_decimals_factor - exc_decimals) / exc_decimals_factor
    # As an example, if exc=0.217 then exc_decimals=217, exc_decimals_factor=1000. In this case
    # 1-exc=1-0.217=0.783=783/1000=(1000-217)/1000=(exc_decimals_factor-exc_decimals)/exc_decimals_factor
    #
    # We can then write
    # current_yield=(((exc_decimals_factor - exc_decimals) / exc_decimals_factor to write) * reads * BASES_PER_READ / BASES_PER_GBASE)
    # To avoid the multiple roundings (from the divisions), the final formula is as follows:
    # current_yield=((exc_decimals_factor-exc_decimals)*reads*BASES_PER_READ) / (exc_decimals_factor*BASES_PER_GBASE)
    # Note that the result is rounded down to an integer.
    current_yield=$(( ((exc_decimals_factor-exc_decimals)*reads*BASES_PER_READ) / (exc_decimals_factor*BASES_PER_GBASE) ))

    add_yield=$(( target_yield-current_yield ))

    if [[ ${add_yield} -lt 0 ]]; then
        # Already has enough yield
        add_yield="NA"
    fi

    echo "${add_yield}"
}

na="na"

echo -e "#AddR\tAddT\tSetName\tTumSample\tPurpleQC\tPurity\tStatus\tAmberQC\tPipelineVsn\tPurpleVsn\
\tRefCov\tTumCov\tRefReads\tTumReads\tRefMapPerc\tTumMapPerc\tRefExcl\tTumExcl\tRefDup\tTumDup"

for run_dir in "${run_paths[@]}"; do
    ## init variables
    pip_vsn=${na}; set_name=${na}; ref_sample=${na}
    ref_cov=${na}; ref_rds=${na}; ref_map=${na}; ref_exc=${na}; ref_dup=${na}
    tum_cov=${na}; tum_rds=${na}; tum_map=${na}; tum_exc=${na}; tum_dup=${na}
    purity=${na}; status=${na}; qc_stat=${na}; amb_qc=${na}; pur_vsn=${na}
  
    set_name=$(basename "${run_dir}")
    is_pv5=$(find ${run_dir} -maxdepth 1 -name "pipeline.version")
  
    ## get metadata for constructing file paths
    meta_file=""
    if [[ "${is_pv5}" ]]; then
        meta_file="${run_dir}/metadata.json"
        pip_file="${run_dir}/pipeline.version"
        ref_sample=$(cat ${meta_file} | jq -r '.reference.sampleName')
        tum_sample=$(cat ${meta_file} | jq -r '.tumor.sampleName')
        pip_vsn=$(cat ${pip_file})
    else
        chk_file="${run_dir}/logs/PipelineCheck.log"
        pip_vsn=$(cat ${chk_file} | grep "Pipeline version" | cut -d":" -f2 | grep -Po "[\d\.]+")
        meta_file="${run_dir}/metadata"
        ref_sample=$(cat ${meta_file} | jq -r '.ref_sample')
        tum_sample=$(cat ${meta_file} | jq -r '.tumor_sample')
    fi
  
    ## init rest of paths and files
    amb_dir="${run_dir}/amber/"
    pur_dir="${run_dir}/purple/"
    ref_dir="${run_dir}/${ref_sample}"
    tum_dir="${run_dir}/${tum_sample}"

    wgs_file_r="${run_dir}/QCStats/${ref_sample}_dedup/${ref_sample}_dedup_WGSMetrics.txt"
    wgs_file_t="${run_dir}/QCStats/${tum_sample}_dedup/${tum_sample}_dedup_WGSMetrics.txt"
    flg_file_r="${ref_dir}/mapping/${ref_sample}_dedup.flagstat"
    flg_file_t="${tum_dir}/mapping/${tum_sample}_dedup.flagstat"
    aqc_file="${amb_dir}/${tum_sample}.amber.qc"
    vsn_file="${pur_dir}/purple.version"
    pqc_file="${pur_dir}/${tum_sample}.purple.qc"
    ppu_file="${pur_dir}/${tum_sample}.purple.purity.tsv"

    ## adjust paths if Pv5
    if [[ "${is_pv5}" ]]; then
        wgs_file_r="${ref_dir}/bam_metrics/${ref_sample}.wgsmetrics"
        wgs_file_t="${tum_dir}/bam_metrics/${tum_sample}.wgsmetrics"
        flg_file_r="${ref_dir}/flagstat/${ref_sample}.flagstat"
        flg_file_t="${tum_dir}/flagstat/${tum_sample}.flagstat"
    fi

    ## all paths/files are set so check that all is ok
    all_files_ok="yes"
    for required_file in "${aqc_file}" "${pqc_file}" "${ppu_file}" "${vsn_file}" "${wgs_file_r}"; do
        if [[ -z "${required_file}" ]]; then
            warn "One of the required file variables is empty!!"
            all_files_ok="no"
        elif [[ ! -f "${required_file}" ]]; then
            warn "File does not exist (${required_file})"
            all_files_ok="no"
        fi
    done
    if [[ ! ${all_files_ok} == "yes" ]]; then error "Something wrong with required files"; fi

    ## gather WgsMetrics
    head=$(cat ${wgs_file_r} | grep GENOME_T)
    ref_val=$(cat ${wgs_file_r} | grep -A1 GENOME_T | tail -1)
    tum_val=$(cat ${wgs_file_t} | grep -A1 GENOME_T | tail -1)
    ref_jsn=$(perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${ref_val}\"); %m = (); @m{@h} = @v; print encode_json \%m;")
    tum_jsn=$(perl -e "use JSON::XS; @h = split(' ', \"${head}\"); @v = split(' ', \"${tum_val}\"); %m = (); @m{@h} = @v; print encode_json \%m;")
  
    ref_cov=$(echo "${ref_jsn}" | jq -r '.MEAN_COVERAGE')
    ref_exc=$(echo "${ref_jsn}" | jq -r '.PCT_EXC_TOTAL')
    ref_dup=$(echo "${ref_jsn}" | jq -r '.PCT_EXC_DUPE')
    tum_cov=$(echo "${tum_jsn}" | jq -r '.MEAN_COVERAGE')
    tum_exc=$(echo "${tum_jsn}" | jq -r '.PCT_EXC_TOTAL')
    tum_dup=$(echo "${tum_jsn}" | jq -r '.PCT_EXC_DUPE')
  
    ## gather Flagstat info
    ref_rds=$(cat ${flg_file_r} | grep 'total ('  | cut -d ' ' -f1)
    tum_rds=$(cat ${flg_file_t} | grep 'total ('  | cut -d ' ' -f1)
    ref_map=$(cat ${flg_file_r} | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1)
    tum_map=$(cat ${flg_file_t} | grep 'mapped (' | cut -d '(' -f2 | cut -d":" -f1)
 
    ## gather Amber info
    amb_qc=$(cat ${aqc_file} | grep QCStatus | cut -f2)
  
    ## gather Purple info
    pur_vsn=$(cat ${vsn_file} | grep version | cut -d"=" -f2)
    purity=$(cat ${ppu_file} | tail -1 | cut -f1)
    status=$(cat ${ppu_file} | tail -1 | cut -f7)
    qc_stat=$(cat ${pqc_file} | grep QCStatus | cut -f2)

    ## calculate yield to add in GBase
    ref_add_yield=$(get_add_yield "${REF_TARGET_YIELD}" "${ref_rds}" "${ref_exc}")
    tum_add_yield=$(get_add_yield "${TUM_TARGET_YIELD}" "${tum_rds}" "${tum_exc}")
  
    ## output
    printf "%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n" \
        ${ref_add_yield} ${tum_add_yield} \
        ${set_name} ${tum_sample} ${qc_stat} ${purity} \
        ${status} ${amb_qc} ${pip_vsn} ${pur_vsn} ${ref_cov} ${tum_cov} \
        ${ref_rds} ${tum_rds} ${ref_map} ${tum_map} \
        ${ref_exc} ${tum_exc} ${ref_dup} ${tum_dup}
done

#!/usr/bin/env bash

source locate_files

print_usage(){
    echo "-----"
    echo " Descr: Constructs bash command for datarequest tool"
    echo " Usage: $(basename $0) -i <dr_name> -s <dr_suffix> -m <run_mode> -e <gcp_mail>"
    echo " Exmpl: $(basename $0) -i 'DR-001' -s 'update1' -m 'dna' -e 'john@doe.com,jaap@doe.com'"
    echo "-----"
    exit 1
}

while getopts ':i:s:m:e:' flag; do
    case "${flag}" in
        i) dr_name=${OPTARG} ;;
        s) dr_suffix=${OPTARG} ;;
        m) run_mode=${OPTARG} ;;
        e) gcp_mail=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done

if [[ -z "${dr_name}" || -z "${run_mode}" || -z "${gcp_mail}" ]]; then
    print_usage
fi

api_url="http://api.prod-1"
tool_jar_symlink="$(locate_prod_datarequest)"
tool_jar="$(readlink -f "${tool_jar_symlink}")"
api_keystore="/data/common/dbs/api_credentials/api.jks"
api_keystore_pw="/data/common/dbs/api_credentials/api.jks.pw" # pw of api.jks file encryption

main() {
    info "Starting with $(basename $0)"
    
    ## quick input checks
    #[[ ! -z "${dr_name}" && "${dr_name}" =~ ^DR ]] || die "dr-id incorrect (${dr_name})?"
    [[ ! -z "${run_mode}" && "${run_mode}" =~ (dna|rna|upload_only|dna_rna) ]] || die "run-mode incorrect (${run_mode})?"
    [[ ! -z "${gcp_mail}" && "${gcp_mail}" =~ \@.+\. ]] || die "gcp_mail incorrect (${gcp_mail})"

    ## we need the index of DR
    local dr_index=$( echo "${dr_name}" | sed 's/^DR\-//')
    local request_name="${dr_name}"
    local request_index="${dr_index}"

    ## reset release/request ids to include suffix if given
    if [[ "${dr_suffix}" != "" ]]; then
        request_name="${dr_name}-${dr_suffix}"
        request_index="${dr_index}-${dr_suffix}"
    fi
    
    ## setup path/file variables
    local base_path="/data/data_archive/datarequests"
    local dr_base_path="${base_path}/${dr_name}"
    local dr_path="${dr_base_path}/${request_name}"
    local metadata_tsv="${dr_path}/metadata/metadata.tsv"
    local uploads_array=()
    local output_cmd_file="${dr_path}/logs/run_datarequest_tool.sh"
    local bucket_name="hmf-dr-${request_index}"
    local answer='$answer'
    local exitcode='$?'

    ## find files to upload
    for i in ${dr_base_path}/${request_name}.*.tar; do
        [ -f "$i" ] || break
        info "Found tar file ${i}, adding to command..."
        tar_file=$(basename "$i" .tar)
        tar_type="${tar_file##*.}"
        uploads_array+=("${i}:${tar_type}:tar")
    done

    uploads_single_line=$(join_array , ${uploads_array[@]})

    ## check input file existance
    input_files=(
        "${metadata_tsv}"
        "${api_keystore}"
        "${api_keystore_pw}"
        "${tool_jar}"
    )

    for f in "${input_files[@]}"; do
        if [[ ! -f "${f}" ]]; then
            die "File does not exist (${f})"
        fi
    done

    ## strip potential spaces from email addresses (should be comma separated)
    gcp_mail=$(echo ${gcp_mail} | sed 's/ //g')

    ## some last sanity checks
    [[ -w "${dr_path}" ]] || die "DR release dir not writeable (${dr_path})"
    [[ ! -f "${output_cmd_file}" ]] || die "Output file already exists (${output_cmd_file})"
    if [[ "${run_mode}" == "upload_only" && "${uploads_single_line}" = "" ]]; then
        die "Run-mode upload_only, but no tar files specified?"
    fi

    info "Metadata TSV: ${metadata_tsv}"
    info "Tar files selected for upload: ${uploads_single_line}"
    info "Datarequest JAR: ${tool_jar}"
    info "Run Mode: ${run_mode}"
    info "GCP Mail: ${gcp_mail}"
    
    ## create the magic
    cmd_array=("java11")
    cmd_array+=("-Djavax.net.ssl.keyStore='${api_keystore}'")
    cmd_array+=("-Djavax.net.ssl.keyStorePassword=\"\$(cat ${api_keystore_pw})\"")
    cmd_array+=("-jar '${tool_jar}'")
    cmd_array+=("-sbp_api_url '${api_url}'")
    cmd_array+=("-request_id '${request_index}'")
    cmd_array+=("-accounts '${gcp_mail}'")
    cmd_array+=("-metadata_tsv '${metadata_tsv}'")
    if [[ ! "${uploads_single_line}" == "" ]]; then
        cmd_array+=("-uploads '${uploads_single_line}'")
    fi
    cmd_array+=("-mode '${run_mode}'")
    #cmd_array+=("-skip_login")

    cmd_single_line=$(echo "${cmd_array[@]}")

    #info "Constructed cmd: ${cmd_single_line}"
    info "Writing cmd to cmd file ${output_cmd_file}"

    echo "# [INFO] date cmd created: $(date +"%y%m%d (%T)")" > "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "echo ''" >> "${output_cmd_file}"
    echo "echo ''" >> "${output_cmd_file}"
    echo "echo '[START] Select project hmf-share and login as yourself.'" >> "${output_cmd_file}"
    echo "gcloud config set project hmf-share" >> "${output_cmd_file}"
    echo "echo '[INPUT] Please provide your hmf GCP account address.. '" >> "${output_cmd_file}"
    echo "read answer" >> "${output_cmd_file}"
    echo "gcloud config set account $answer" >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check numbers of patients & samples is metadata file:"  >> "${output_cmd_file}"
    echo "check_numbers_metadata -m '${metadata_tsv}' " >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check patients with blacklisted patients:"  >> "${output_cmd_file}"
    echo "check_patients_blacklisted -m '${metadata_tsv}' " >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check logs of data request job (where the tertiary analyses data is prepared):"  >> "${output_cmd_file}"
    echo "check_logs_datarequest_job -m '${metadata_tsv}' -p '${dr_path}/logs/' " >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check wether GCP account(s) of requestor(s) exist:"  >> "${output_cmd_file}"
    echo "check_whether_GCPaccount_exists -e '${gcp_mail}' " >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "echo '[INPUT] Are you sure you want to continue with making the data available on GCP? Please answer Y or N.'" >> "${output_cmd_file}"
    echo "read answer" >> "${output_cmd_file}"
    echo "echo $answer" >> "${output_cmd_file}"
    echo "if [[ $answer != 'Y' ]]; then" >> "${output_cmd_file}"
    echo "     echo '[INFO] Data will not be made available on GCP. Script will end here.'" >> "${output_cmd_file}"
    echo "     exit" >> "${output_cmd_file}"
    echo "fi" >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [TOOL] Tool to make data available on GCP:"  >> "${output_cmd_file}"
    for cmd_line in "${cmd_array[@]}"; do 
        echo "${cmd_line} \\" >> "${output_cmd_file}"
    done
    echo ""  >> "${output_cmd_file}"
    echo "if [[ $exitcode -ne 0 ]]; then" >> "${output_cmd_file}"
    echo "  echo 'Running the Data Request tool failed. Please check what went wrong!'" >> "${output_cmd_file}"
    echo "  exit 1" >> "${output_cmd_file}"
    echo "fi" >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check GCP created bucket:"  >> "${output_cmd_file}"
    echo "check_gcp_hmf_dr_bucket -b '${bucket_name}' -e '${gcp_mail}'" >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [DOWNLOAD] Download GCP manifest:"  >> "${output_cmd_file}"
    echo "gsutil -q cp gs://${bucket_name}/manifest.json ${dr_path}/manifest.json"  >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"
    echo "# [CHECK] Check GCP manifest:"  >> "${output_cmd_file}"
    if [[ ${run_mode} == "upload_only" ]];then
        echo "check_gcp_manifest_with_metadata -m '${metadata_tsv}' -j '${dr_path}/manifest.json' -e '${gcp_mail}' -d 0 -r 0" >> "${output_cmd_file}"
    fi
    if [[ ${run_mode} == "dna" ]];then
        echo "check_gcp_manifest_with_metadata -m '${metadata_tsv}' -j '${dr_path}/manifest.json' -e '${gcp_mail}' -d 1 -r 0" >> "${output_cmd_file}"
    fi
    if [[ ${run_mode} == "rna" ]];then
        echo "check_gcp_manifest_with_metadata -m '${metadata_tsv}' -j '${dr_path}/manifest.json' -e '${gcp_mail}' -d 0 -r 1" >> "${output_cmd_file}"
    fi
    if [[ ${run_mode} == "dna_rna" ]];then
        echo "check_gcp_manifest_with_metadata -m '${metadata_tsv}' -j '${dr_path}/manifest.json' -e '${gcp_mail}' -d 1 -r 1" >> "${output_cmd_file}"
    fi

    echo ""  >> "${output_cmd_file}"
    echo "# [WRITE] create email that the data has been made available:"  >> "${output_cmd_file}"
    echo "write_email_data_available -i '${dr_name}' -s '${dr_suffix}' -m '${run_mode}' -e '${gcp_mail}'" >> "${output_cmd_file}"

    echo ""  >> "${output_cmd_file}"

    info "Making cmd file executable"
    chmod +x "${output_cmd_file}"

    info "TODO:"
    info " 1) Inspect cmd file: cat ${output_cmd_file}"
    #info " 2) Make sure you are logged in at GCP with correct credentials!"
    info " 2) And then run cmd with: ${output_cmd_file} | tee -a ${dr_path}/logs/run_datarequest_tool.sh.log"
    info "Finished with $(basename $0)"

}

join_array() {
    local IFS="$1";
    shift;
    echo "$*";
}

die() { 
    echo "[ERROR] $(date +"%y%m%d %T") $@" >&2
    exit 1 
}
warn() { 
    echo "[WARN] $(date +"%y%m%d %T") $@" >&2
}
info() { 
    echo "[INFO] $(date +"%y%m%d %T") $@"
}

main

#!/usr/bin/env bash

source message_functions || exit 1

print_usage() {
    echo "-----"
    echo " Descr: Revokes access to data on GCP for a specific DR"
    echo " Usage: $(basename $0) -i <dr-id> -s <suffix> -e <email>"
    echo " Exmpl: $(basename $0) -i 'DR-001' -s 'update1' -e 'john@doe.com,jaap@doe.com'"
    echo "-----"
    exit 1
}

while getopts ':i:s:e:' flag; do
    case "${flag}" in
        i) dr_id=${OPTARG} ;;
        s) dr_suffix=${OPTARG} ;;
        e) gcp_mail=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done

if [[ -z "${dr_id}" || -z "${gcp_mail}" ]]; then
    warn "script revoke_acces_data_gcp did not run, check usage below:"
    print_usage
fi

api_url=$"http://api.prod-1"
api_url_spec=$"${api_url}/hmf/v1"

## quick input checks
[[ ! -z "${dr_id}" && "${dr_id}" =~ ^DR ]] || die "dr-id incorrect (${dr_id})?"
[[ ! -z "${gcp_mail}" && "${gcp_mail}" =~ \@.+\. ]] || die "gcp_mail incorrect (${gcp_mail})"

## we need the index of DR
release_id=$"${dr_id}"
dr_index=$( echo "${dr_id}" | sed 's/^DR\-//')
request_id=$"${dr_index}"

## reset release/request ids to include suffix if given
if [[ "${dr_suffix}" != "" ]]; then
    release_id="${dr_id}-${dr_suffix}"
    request_id="${dr_index}-${dr_suffix}"
fi

bucket_name=$"hmf-dr-${request_id}"

## start with script
info ""
info "[START] revoke_acces_data_gcp: $(date +"%y%m%d (%T)")"
info ""

info "Accounts inputted in the script for which access to GCP data will try to be be revoked:"
info ${gcp_mail}
info ""

### check whether the GCP email inputted is similar to the GCP email showed in the manifest of the bucket.
#mkdir temp
#gsutil -q cp gs://${bucket_name}/manifest.json temp/manifest.json
#email_in_manifest=$""
#for email in $(echo ${gcp_mail} | sed "s/,/ /g")
#do
#    temp=$( jq '.accounts | .[] | .email' temp/manifest.json | grep $email )
#    if [[ $temp == "" ]]; then
#         warn "Account $email given as input to the script is not related to bucket ${bucket_name}. Revoking access not possible."
#    fi
#    email_in_manifest+=${temp}
#done
#if [[ ${email_in_manifest} == "" ]]; then
#    warn "None of the account(s) given as input to the script are related to bucket ${bucket_name}. The script will not run further."
#    echo ""
#    rm -r temp
#    exit
#fi
#rm -r temp

error=$( gsutil -u hmf-share iam get gs://${bucket_name}/ 2>&1)
if [[ "$error" == *"BucketNotFoundException: 404"* ]]; then
     warn "GCP BUCKET ${bucket_name} DOES NOT EXIST. Access will not be revoked."
     echo ""
else
    echo ""
    info "REVOKE ACCESS TO BUCKET: ${bucket_name} RELATED TO: ${release_id}."
    echo ""
    info "Current permissions of the bucket ${bucket_name}:"
    gsutil -u hmf-share iam get gs://${bucket_name}/
    echo ""
    for email in $(echo ${gcp_mail} | sed "s/,/ /g")
    do
        email_in_permissions=$( gsutil -u hmf-share iam get gs://${bucket_name}/ | grep $email )
        if [[ ${email_in_permissions} == "" ]]; then
            warn "Account $email not present in current permissions of the bucket, so no revoke needed."
            echo ""
        else
            info "....Access for account $email to bucket is being revoked...."
            gsutil -u hmf-share iam ch -d user:$email gs://${bucket_name}/
            email_in_permissions=$( gsutil -u hmf-share iam get gs://${bucket_name}/ | grep $email )
            if [[ ${email_in_permissions} == "" ]]; then
                info "Account ${email} correctly removed as user from gcp bucket."
                echo ""
            else
                warn "Account ${email} still registered as user in the bucket."
                echo ""
            fi
         fi
    done
    info "Updated permissions of the bucket ${bucket_name}:"
    gsutil -u hmf-share iam get gs://${bucket_name}/
    echo ""
fi


group_id=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups | jq --arg release_id "$release_id" '.[] | select(.name==$release_id) | .id')
if [[ "${group_id}" == "" ]]; then
    warn "NO API GROUP (for ACL permissions) RELATED TO: ${release_id}. Access will not be revoked."
else
    echo ""
    info "DELETE | OR DELETE USERS FROM - API GROUP (for ACL permissions) RELATED TO: ${release_id}."
    echo ""

    info "Accounts in API group related to ${release_id}:"
    account_nrs=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/members | jq '.[] | .account_id' )
    email_in_acl_group=$""
    for account_nr in $account_nrs
    do
        curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//'
        email_acl=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//' )
        email_in_acl_group+=${email_acl}
    done
    echo ""

    for email in $(echo ${gcp_mail} | sed "s/,/ /g")
    do
        if [[ $( echo ${email_in_acl_group} | grep $email ) == "" ]]; then
            warn "Account ${email} not present in API group related to ${release_id}, so no deletion needed."
            echo ""
        else
            info "....Account ${email} is being removed from the API group...."
            account_id=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts | jq --arg email_select "$email" '.[] | select(.email==$email_select) | .id' )
            curl -s --cert ${api_cert} --key ${api_key} -X DELETE ${api_url_spec}/groups/${group_id}/members/${account_id}
            echo ""
        fi
    done
    echo ""

    info "Updated accounts in API group related to ${release_id}:"
    account_nrs=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/members | jq '.[] | .account_id' )
    email_in_acl_group=$""
    for account_nr in $account_nrs
    do
        curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//'
        email_acl=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//' )
        email_in_acl_group+=${email_acl}
    done
    echo ""
    info "Current number of raw files with API group related to ${release_id} in the ACL:"
    curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l
    echo ""

    info "[INPUT] Do you also want to remove the whole API groep? Please fill in Y or N."
    read answer
    if [[ $answer != "Y" ]]; then
         warn "Script will end without deletion of the API group."
         exit
    fi
    echo ""

    info "....API group is being deleted ...."
    curl -s --cert ${api_cert} --key ${api_key} -X DELETE ${api_url_spec}/groups/${group_id}
    number_files_gcp=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l)
    if [[ ${number_files_gcp} == 0 ]]; then
        info "No raw data files anymore with API group related to ${release_id} in the ACL."
        echo ""
        info "Updated number of raw files with API group related to ${release_id} in the ACL:"
        curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l
        echo ""
    else
        warn "Still ${number_files_gcp} of raw files with API group related to ${release_id} in the ACL. API group not deleted. Please check what went wrong"
        echo ""
    fi
fi

echo ""
echo ""

#!/usr/bin/env bash

print_usage(){
    echo "-----"
    echo " Descr: Revokes access to data on GCP for a specific DR"
    echo " Usage: $(basename $0) -i <dr-id> -s <suffix> -e <email>"
    echo " Exmpl: $(basename $0) -i 'DR-001' -s 'update1' -e 'john@doe.com,jaap@doe.com'"
    echo "-----"
    exit 1
}

while getopts ':i:s:e:' flag; do
    case "${flag}" in
        i) dr_id=${OPTARG} ;;
        s) dr_suffix=${OPTARG} ;;
        e) gcp_mail=${OPTARG} ;;
        *) print_usage
        exit 1 ;;
    esac
done

if [[ -z "${dr_id}" || -z "${gcp_mail}" ]]; then
    echo "[ERROR] script revoke_acces_data_gcp did not run, check usage below:"
    print_usage
fi


api_url=$"https://api.hartwigmedicalfoundation.nl"
api_url_spec=$"${api_url}/hmf/v1"
api_key=$"/data/common/dbs/api_credentials/api.key"
api_cert=$"/data/common/dbs/api_credentials/api.crt" 


## quick input checks
[[ ! -z "${dr_id}" && "${dr_id}" =~ ^DR ]] || die "dr-id incorrect (${dr_id})?"
[[ ! -z "${gcp_mail}" && "${gcp_mail}" =~ \@.+\. ]] || die "gcp_mail incorrect (${gcp_mail})"

## we need the index of DR
release_id=$"${dr_id}"
dr_index=$( echo "${dr_id}" | sed 's/^DR\-//')
request_id=$"${dr_index}"

## reset release/request ids to include suffix if given
if [[ "${dr_suffix}" != "" ]]; then
    release_id="${dr_id}-${dr_suffix}"
    request_id="${dr_index}-${dr_suffix}"
fi

bucket_name=$"hmf-dr-${request_id}"

## start with script
echo ""
echo "[START] revoke_acces_data_gcp: $(date +"%y%m%d (%T)")"
echo ""

echo "[INFO] Accounts inputted in the script for which access to GCP data will try to be be revoked:"
echo ${gcp_mail}
echo ""

## check whether the GCP email inputted is similar to the GCP email showed in the manifest of the bucket.
mkdir temp
gsutil -q cp gs://${bucket_name}/manifest.json temp/manifest.json
email_in_manifest=$""
for email in $(echo ${gcp_mail} | sed "s/,/ /g")
do
    temp=$( jq '.accounts | .[] | .email' temp/manifest.json | grep $email )
    if [[ $temp == "" ]]; then
         echo "[ERROR] Account $email given as input to the script is not related to bucket ${bucket_name}. Revoking access not possible."
    fi
    email_in_manifest+=${temp}
done
if [[ ${email_in_manifest} == "" ]]; then
    echo "[ERROR] None of the account(s) given as input to the script are related to bucket ${bucket_name}. The script will not run further!"
    echo ""
    rm -r temp
    exit
fi
rm -r temp



echo ""
echo "[INFO] REVOKE ACCESS TO BUCKET: ${bucket_name} RELATED TO: ${release_id}."
echo ""

echo "[INFO] Current permissions of the bucket ${bucket_name}:"
gsutil -u hmf-share iam get gs://${bucket_name}/
echo ""

for email in $(echo ${gcp_mail} | sed "s/,/ /g")
do
    email_in_permissions=$( gsutil -u hmf-share iam get gs://${bucket_name}/ | grep $email )
    if [[ ${email_in_permissions} == "" ]]; then
        echo "[ERROR] Account $email not present in current permissions of the bucket, so no revoke needed."
        echo ""
    else
        echo "....Access for account $email is being revoked...."
        gsutil -u hmf-share iam ch -d User:$email gs://${bucket_name}/
        email_in_permissions=$( gsutil -u hmf-share iam get gs://${bucket_name}/ | grep $email )
        if [[ ${email_in_permissions} == "" ]]; then
            echo "[INFO] Account $email correctly removed as user from gcp bucket."
            echo "[INFO] Updated permissions of the bucket ${bucket_name}:"
            gsutil -u hmf-share iam get gs://${bucket_name}/
            echo ""
        else
            echo "[ERROR] Account $email still registered as user in the bucket."
            echo ""
        fi
     fi
done
echo ""


group_id=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups | jq --arg release_id "$release_id" '.[] | select(.name==$release_id) | .id')
if [[ "${group_id}" == "" ]]; then
    echo "[INFO] NO RAW FILES RELATED TO: ${release_id}."
else

    echo ""
    echo "[INFO] REVOKE ACCESS TO ACL OF RAW FILES RELATED TO: ${release_id}."
    echo ""

    echo "[INFO] Accounts related to ${release_id} for which access to ACL of raw files will be revoked (can only be done on group level!!):"
    account_nrs=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/members | jq '.[] | .account_id' )
    email_in_acl_group=$""
    for account_nr in $account_nrs
    do
        curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//'
        email_acl=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/accounts/${account_nr} | jq '.email' | sed -e 's/^"//' -e 's/"$//' )
        if [[ $( echo ${gcp_mail} | grep $email_acl ) == "" ]]; then
            echo "[ERROR] Account $email_acl is not inputted in the script, but access will nevertheless be revoked."
            echo "[INFO] Are you sure you want to continue with the script? Please answer Y or N."
            read answer
            if [[ $answer != "Y" ]]; then
                echo "[ERROR] Script will end."
                exit
            fi
        fi
        email_in_acl_group+=${email_acl}
    done
    echo ""
    for email in $(echo ${gcp_mail} | sed "s/,/ /g")
    do
        if [[ $( echo ${email_in_acl_group} | grep $email ) == "" ]]; then
                 echo "[ERROR] Account $email not present in group of accounts related to ${release_id} raw files, so no revoke needed."
        fi
    done
    echo ""

    echo "[INFO] Current number of raw data files with requester account(s) in the ACL:"
    curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l
    echo ""

    echo "....Accounts are being removed from ACLs...."
    curl -s --cert ${api_cert} --key ${api_key} /data/common/dbs/sbp_api_credentials/prod/api.key -X DELETE ${api_url_spec}/groups/${group_id}
    number_files_gcp=$( curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l)
    if [[ ${number_files_gcp} == 0 ]]; then
        echo "[INFO] No raw data files anymore related to ${release_id}."
        echo "[INFO] Updated number of raw data files with requester account(s) in the ACL:"
        curl -s --cert ${api_cert} --key ${api_key} ${api_url_spec}/groups/${group_id}/files | jq . | grep file_id | wc -l
        echo ""
    else
        echo "[ERROR] Still ${number_files_gcp} raw files with ACL related to ${release_id}. Please check what went wrong"
        echo ""
    fi
fi

echo ""
echo ""

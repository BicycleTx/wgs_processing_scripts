#!/usr/bin/env bash

# Not supposed to be used
exit 0

### =================================================================================
### Complete a data request
### =================================================================================

# main variables
scriptsDir="/data/common/repos/scripts/datarequest/procedure"
templatesDir="/data/common/repos/scripts/datarequest/templates"
latestMetadata="/data/data_archive/datarequests/procedure/latest/metadata"
execSqlScript="/data/common/repos/scripts/sql/execution/execute_sql_on_prod"
metadataScript="${scriptsDir}/create_metadata_for_request"

#entityName="CompleteDB"
entityName="DR-XXX" # entityName is not the same as requestId for updates
entitySbpId=$( query_sbp_api -type entities | grep $entityName | cut -f3 )
drHome="/data/data_archive/datarequests"
rootDir="${drHome}/${entityName}"
if [[ -d $rootDir ]]; then cd $rootDir && ls -1; else echo "[WARN] No $rootDir yet"; fi

# determine subname
requestId="${entityName}"
#requestId="${entityName}-190825"
#requestId="${entityName}-update3"

# request variables
requestDir="${rootDir}/${requestId}"
somaDir="${requestDir}/somatics"
germDir="${requestDir}/germline"
 rnaDir="${requestDir}/rnaseq"
metaDir="${requestDir}/metadata"
logsDir="${requestDir}/logs"
jsonDir="${requestDir}/logs/json"
logFile="${logsDir}/log.txt"
metadataFile="${metaDir}/metadata.tsv"
selectPatientsSql="${logsDir}/selectPatients.sql"
selectPatientsOut="${logsDir}/selectPatients.tsv"

# checks
echo -e "[INFO] Request: ${requestId} (base=${requestDir})\nEntity: ${entityName} (id=${entitySbpId})"
if [[ -d ${requestDir} ]]; then echo "[NOTE] Output dir already exists (${requestDir})"; fi

# setup dir structure
mkdir -p ${requestDir}; mkdir -p ${somaDir}; mkdir -p ${metaDir}; mkdir -p ${logsDir}; mkdir -p ${jsonDir}
cd ${requestDir} && ls
cd ${logsDir}
cp ${templatesDir}/template_selectPatients.sql ${selectPatientsSql}

# get patients
${execSqlScript} $selectPatientsSql > $selectPatientsOut

# Create metadata and run filter script that applies afterwards
${metadataScript} selectPatients.tsv $latestMetadata
filter_metadata_tumor # no patient and treatment
filter_metadata_tumor_patient # no treatment
filter_metadata_tumor_patient_treatment # all info

patientCount=$( grep -cv "^#" $selectPatientsOut )
echo "[INFO] PatientCount: ${patientCount}"
cat metadata_final.tsv | cut -f 1-6 | head -20
inspect_header metadata_final.tsv

# if all ok copy the final
cp metadata_final.tsv ${metadataFile}
cat ${metadataFile} | grep -v "^#" | cut -f4 | sort | uniq > "${logsDir}/patients_final.tsv"

finalBiopsyCount=$( grep -cv "^#" ${metadataFile} )
finalPatientCount=$( grep -cv "^#" "${logsDir}/patients_final.tsv" )
echo "[INFO] FinalBiopsyCount: ${finalBiopsyCount} (of ${finalPatientCount} unique patients)" >> $logFile
cat $logFile

# if only specific data: create specific jsons (one for each file-type)
matchStrings=(TUMOR_SAMPLE_BA)
cat $metadataFile | grep -v "^#" | cut -f1 | while read setName; do
  setId=$( cat metadata_unfiltered.tsv | grep ${setName} | cut -f2);
  for matchString in "${matchStrings[@]}"; do
    filterString="%${matchString}%";
    jsonOut="${requestDir}/logs/json/${setName}_${matchString}.json"; echo "Creating ${jsonOut}";
    create_share_json_for_tumor_bam ${setId} ${entitySbpId} > "${jsonOut}";
  done
done

# get the somatic files from datastore per set
cd $requestDir
cat $metadataFile | grep -v "^#" | cut -f1 | while read setName; do setPath=/data/cpct/runs/${setName}; get_somatic_set_data $setPath; done

# get the germline files from datastore per set
cd $requestDir
cat $metadataFile | grep -v "^#" | cut -f1 | while read setName; do setPath=/data/cpct/runs/${setName}; get_germline_set_data $setPath; done

# get RNAseq
cd $requestDir
mkdir -p $rnaDir
rnaOverview="/data/data_archive/rna_seq/overview/overview.tsv"
cat $metadataFile | grep -v ^# | cut -f3 | while read sampleId; do echo "[INFO] Checking $sampleId"; fastqPath=$( cat $rnaOverview | awk -v sampleId="${sampleId}" '$1 == sampleId' | cut -f4); if [[ "$fastqPath" ]]; then echo "[INFO]   found $fastqPath"; ln -s $fastqPath ${rnaDir}/; fi; done

# delete germline if not requested!
find $somaDir -name "*germline*"
#find data/ -name "*germline*" -delete

## =================================================================================
## Adding drug info
## ===============================================================================
cd $requestDir
generate_pre_biopsy_drugs_by_patient $metadataFile
generate_post_biopsy_drugs_by_biopsy $metadataFile
generate_responses_by_biopsy $metadataFile

## ===============================================================================
### Sanity checks
### ===============================================================================

# germline present and allowed?
find ${somaDir} -name "*germline*" | wc -l
find -L ${germDir} -name "*gz" | wc -l

# check amount to be equal with count in metadata file
countMeta=$( cat $metadataFile | grep -v "^#" | cut -f3 | sort | uniq | wc -l )
countDirs=$( find $somaDir -mindepth 1 -maxdepth 1 -type d | wc -l )
countGerm=$( find $germDir -mindepth 1 -maxdepth 1 -type d | wc -l )
countJson=$( find $logsDir/json/ -mindepth 1 -maxdepth 1 -type f -name "*.json" | wc -l )
echo "[INFO] meta: $countMeta" && echo "[INFO] dirs: $countDirs" && echo "[INFO] germ: $countGerm" && echo "[INFO] json: $countJson"

# check if all expected files are present
firstSet=$( ls -d $somaDir/* | head -1 )
fileCount=$( ls $firstSet | wc -l )
for i in ${somaDir}/*; do COUNT=$( ls $i | wc -l ); if [[ $COUNT != ${fileCount} ]]; then echo $i; fi; done

# find broken symlinks
find ${somaDir} -xtype l

# make sure we have only one purple version
for i in ${somaDir}/*/purple.version; do cat $i | grep version; done | sort | uniq -c

# metadata checks
cd $metaDir
for bFile in post_biopsy_drugs_by_biopsy.tsv responses_by_biopsy.tsv; do
  if [[ -f $bFile ]]; then 
    echo "[INFO] Checking $bFile"; cat $bFile | grep -v ^# | cut -f1 | sort | uniq | while read id; do
      COUNT=$( cat metadata.tsv | cut -f3 | grep -Pc "^$id$" ) 
      if [[ $COUNT == 0 ]]; then 
        echo "Biopsy ID not present ($id), checking patientId:"
        patientId=${id:0:12}; grep $patientId $metadataFile | cut -f3,4 
      fi 
    done
  fi
done

for pFile in pre_biopsy_drugs_by_patient.tsv; do
  if [[ -f $pFile ]]; then echo "[INFO] Checking $pFile"; cat $pFile | grep -v ^# | cut -f1 | sort | uniq | while read id; do
    COUNT=$( cat metadata.tsv | cut -f4 | grep -Pc "^$id$" ); if [[ $COUNT == 0 ]]; then echo $id; fi; done;
  fi
done

## =================================================================================
## Md5sum / TAR
## ===============================================================================
#nohup find -L ./data/ -type f -exec md5sum {} + > md5sums.txt &

# create archive to share with requester
cd $requestDir
for outType in "metadata" "somatics" "germline" "rnaseq"; do
  datPath="./${outType}"
  logPath="${HOME}/logs/tar_${entityName}_${outType}.log"
  tarPath="${rootDir}/${requestId}.${outType}.tar";
  tarName=$( basename "${tarPath}" );
  if [[ ! -d ${datPath} ]]; then
    echo "## [EXIT] Data dir to package does not exist: $datPath"
  elif [[ -e ${tarPath} ]]; then
    echo "## [EXIT] Output file already exists: $tarPath"
  else
    echo -e "## [TODO] Execute following to package type $outType:"
    echo " cd ${requestDir}; nohup tar -hcvf ${tarPath} ${datPath} > ${logPath} &"
  fi
done

# Upload to nextcloud for sharing
uploadLog="${HOME}/logs/upload_to_nextcloud.log"
echo "[INFO] About to upload" $( basename ${tarName} ) "to NEXTCLOUD"
nohup upload_file_to_nextcloud_UPLOAD "${tarPath}" > $uploadLog &

# inspect result
cat $uploadLog

## TAR checks
# check that all sets in germline tar are present in metadata file
tar -tf DR-XXX.germline.tar | grep -P "\/$" | grep -vP 'germline/$' | while read setPath; do setName=$(basename $setPath); COUNT=$(grep -c $setName $metadataFile); if [[ $COUNT < 1 ]]; then echo "[FAIL] String not present in metadata: $setName"; else echo "[OK] String present in metadata: $setName"; fi; done
# check that all sets in rnaseq tar are present in metadata file
tar -tf DR-XXX.rnaseq.tar | grep -P "\/$" | grep -vP   'rnaseq/$' | while read setPath; do setName=$(basename $setPath | cut -d"_" -f2); COUNT=$(grep -c $setName $metadataFile); if [[ $COUNT < 1 ]]; then echo "[FAIL] String not present in metadata: $setName"; else echo "[OK] String present in metadata: $setName"; fi; done


## =================================================================================
## Sharing of RNAseq/Germline data
## =================================================================================

## sync to bucket (user: sbp)
# symlink to /data/tmp/ then sync
nohup sbp s3 sync --dryrun /data/tmp/ s3://hmf_experiments/share/ --profile download --exclude "*" --include "${tarName}" > $HOME/logs/upload_to_share_bucket &
## get url to share
presign_url "s3://hmf_experiments/share/S{tarName}"
